{"file_contents":{"README.md":{"content":"<<<<<<< HEAD\nGet started by customizing your environment (defined in the .idx/dev.nix file) with the tools and IDE extensions you'll need for your project!\n\nLearn more at https://developers.google.com/idx/guides/customize-idx-env\n=======\n# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n>>>>>>> 0943694b1613952ce30e378a5354c0509d8e0bcd\n","size_bytes":401},"apphosting.yaml":{"content":"# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  cpu: 2\n  maxInstances: 1\n","size_bytes":279},"next.config.ts":{"content":"\nimport type {NextConfig} from 'next';\nimport withPWAInit from '@ducanh2912/next-pwa';\n\nconst withPWA = withPWAInit({\n  dest: 'public',\n  disable: process.env.NODE_ENV === 'development',\n  register: true,\n});\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  // Enable cross-origin for Replit environment\n  crossOrigin: 'anonymous',\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  // Configure allowed dev origins for cross-origin requests (Next.js 15 requires exact origins)\n  allowedDevOrigins: process.env.NODE_ENV === 'development' \n    ? [\n        // Current Replit domain (dynamically determined)\n        process.env.REPLIT_DOMAINS || '2b711deb-9881-4c8e-9864-f2078ec28923-00-1z7caopfvm8sp.picard.replit.dev',\n        // Additional common Replit subdomains for compatibility\n        'localhost:5000',\n        '0.0.0.0:5000'\n      ]\n    : [],\n  // Optimize for Vercel deployment\n  output: process.env.VERCEL ? 'standalone' : undefined,\n  // Replit environment configuration\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: process.env.NODE_ENV === 'development' \n          ? [\n              {\n                key: 'Content-Security-Policy',\n                value: `frame-ancestors ${process.env.REPLIT_DOMAINS || '2b711deb-9881-4c8e-9864-f2078ec28923-00-1z7caopfvm8sp.picard.replit.dev'} localhost:5000 0.0.0.0:5000;`,\n              },\n            ]\n          : [\n              {\n                key: 'X-Frame-Options',\n                value: 'SAMEORIGIN',\n              },\n            ],\n      },\n    ];\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'images.unsplash.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'picsum.photos',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'cdn.staticneo.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'media.tenor.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: \"https\",\n        hostname: \"res.cloudinary.com\",\n      },\n    ],\n  },\n   env: {\n    NEXT_PUBLIC_FIREBASE_PROJECT_ID: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    NEXT_PUBLIC_FIREBASE_APP_ID: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n    NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n    NEXT_PUBLIC_FIREBASE_API_KEY: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n    NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n    NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n    NEXT_PUBLIC_TENOR_API_KEY: process.env.TENOR_API_KEY,\n    NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n    NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET: process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n  },\n};\n\nexport default withPWA(nextConfig);\n","size_bytes":3162},"replit.md":{"content":"# Vibez - Social Messaging App\n\n## Overview\nThis is a Next.js social messaging application with Firebase authentication, AI chat features, stories, and real-time messaging capabilities. The app has been successfully imported and configured to run in the Replit environment.\n\n## Project Architecture\n- **Frontend**: Next.js 15.5.3 with React 18\n- **Authentication**: Firebase Auth with Google provider support\n- **Database**: Firebase Firestore for data storage\n- **Storage**: Firebase Storage for media files\n- **AI Features**: Google Genkit for AI chat functionality\n- **UI**: Radix UI components with Tailwind CSS\n- **PWA**: Progressive Web App capabilities with next-pwa\n\n## Current Status\n✅ **FULLY CONFIGURED AND RUNNING**\n- Dependencies installed successfully (npm install completed)\n- Next.js configured for Replit environment (port 5000, host 0.0.0.0)\n- Development workflow set up and running\n- Firebase configuration updated with fallback demo values\n- Async/await syntax errors fixed in auth provider\n- Deployment configuration completed (autoscale with Next.js build)\n- Application tested and working properly\n\n## Key Features\n- Real-time chat messaging\n- AI-powered chat with Google Gemini\n- Stories functionality (like Instagram/WhatsApp status)\n- User authentication and profiles\n- Friends system\n- Weather widget integration\n- Image/video upload with Cloudinary\n- Mobile-responsive design\n- Glass morphism UI design\n\n## Environment Configuration\nThe application requires Firebase configuration for full functionality. Currently using fallback demo values to allow basic operation.\n\n**Required Firebase Environment Variables:**\n- `NEXT_PUBLIC_FIREBASE_PROJECT_ID`\n- `NEXT_PUBLIC_FIREBASE_APP_ID` \n- `NEXT_PUBLIC_FIREBASE_API_KEY`\n- `NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN`\n- `NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET`\n- `NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID`\n- `NEXT_PUBLIC_MEASUREMENT_ID`\n\n**Additional API Keys:**\n- `GEMINI_API_KEY` - For AI chat functionality\n- `TENOR_API_KEY` - For GIF search\n- `NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME` - For media upload\n- `NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET` - For media upload\n\n## Development\n- **Start command**: `npm run dev` (configured for port 5000)\n- **Build command**: `npm run build:next`\n- **Production start**: `npm start`\n\n## Deployment\nConfigured for Replit autoscale deployment with build step included.\n\n## Recent Changes (2025-09-21)\n- Successfully imported GitHub project and configured for Replit environment\n- Installed all npm dependencies (1536 packages) - npm install completed successfully\n- Next.js application properly configured and running on port 5000 with host 0.0.0.0\n- Firebase configuration working with fallback demo values for development\n- Development workflow \"Frontend\" successfully running and serving pages\n- Deployment configuration set up for autoscale with proper build and start commands\n- Application tested and verified working - compiles successfully and serves pages\n- Cross-origin requests handled properly for Replit environment\n\n## Next Steps\nTo fully utilize all features, configure proper Firebase project credentials and API keys through the Replit secrets manager.","size_bytes":3165},"tailwind.config.ts":{"content":"\nimport type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-pt-sans)'],\n        heading: ['var(--font-poppins)'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n        'gradient-from': 'hsl(var(--gradient-from))',\n        'gradient-to': 'hsl(var(--gradient-to))',\n      },\n      borderRadius: {\n        '2xl': 'calc(var(--radius) + 8px)',\n        xl: 'calc(var(--radius) + 4px)',\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 4px)',\n        sm: 'calc(var(--radius) - 8px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n        'fade-in': {\n          from: { opacity: '0', transform: 'translateY(10px)' },\n          to: { opacity: '1', transform: 'translateY(0)' },\n        },\n        'background-pan': {\n            '0%': { backgroundPosition: '0% 50%' },\n            '50%': { backgroundPosition: '100% 50%' },\n            '100%': { backgroundPosition: '0% 50%' },\n        },\n        'progress-bar': {\n          from: { transform: 'scaleX(0)' },\n          to: { transform: 'scaleX(1)' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        'fade-in': 'fade-in 0.4s ease-out forwards',\n        'background-pan': 'background-pan 3s ease-in-out infinite',\n        'progress-bar': 'progress-bar linear forwards',\n      },\n      backdropBlur: {\n        'xl': '24px',\n      }\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n","size_bytes":3481},"docs/blueprint.md":{"content":"# **App Name**: Vibez\n\n## Core Features:\n\n- User Authentication: Secure sign-up/login with email, phone, or social accounts, including profile creation and management.\n- One-to-One Chat: Enable real-time private messaging with support for various message types.\n- Smart Notifications: Push notifications for new messages, with customizable settings.\n- AI Smart Reply: Suggest contextually relevant quick replies to speed up conversations using an AI tool.\n- Message Reactions: Allow users to react to messages with emojis for quick feedback.\n- Disappearing Messages: Enable users to send messages that auto-delete after a set time for enhanced privacy.\n- Dark/Light Mode: Offer a switchable dark/light mode for optimal viewing experience in different environments.\n\n## Style Guidelines:\n\n- Primary color: A vibrant violet (#A050BE) to reflect the energy and modernity of the app.\n- Background color: A desaturated lavender (#F0E6F5) provides a soft and clean backdrop that keeps the focus on the content. It enhances readability while maintaining the violet vibe of the interface.\n- Accent color: Use a cooler, desaturated blue-violet (#7991D6). It is approximately 30 degrees away on the color wheel. This contrast ensures interactive elements pop, improving the user experience while maintaining harmony with the violet theme.\n- Headline font: 'Poppins', a geometric sans-serif, lends a precise, contemporary, and fashionable look that will give your headers a fresh, modern edge. Body Font: 'PT Sans', A humanist sans-serif which combines a modern look with warmth, allowing longer passages of text to still remain approachable.\n- Cards layout for media previews provides an organized and visually appealing way to present images, videos, and files shared within chats.\n- Smooth transitions with subtle animations for a modern feel","size_bytes":1834},"scripts/migrate-devices-to-subcollection.js":{"content":"#!/usr/bin/env node\n/**\n * Migration script: copy `devices` array from each user document into\n * a `users/{uid}/devices/{deviceId}` subcollection document.\n *\n * Usage:\n *  - Set GOOGLE_APPLICATION_CREDENTIALS to a service account JSON file path, or\n *  - Set FIREBASE_SERVICE_ACCOUNT env var to the service account JSON string\n *\n *  node -r dotenv/config scripts/migrate-devices-to-subcollection.js [--remove-parent]\n *\n *  --remove-parent  : will delete the parent `devices` array after migration\n */\n\nrequire('dotenv').config();\nconst admin = require('firebase-admin');\nconst { v4: uuidv4 } = require('uuid');\n\nfunction initAdmin() {\n  if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n    console.log('Initializing admin using GOOGLE_APPLICATION_CREDENTIALS file.');\n    admin.initializeApp();\n    return;\n  }\n\n  if (process.env.FIREBASE_SERVICE_ACCOUNT) {\n    console.log('Initializing admin using FIREBASE_SERVICE_ACCOUNT env JSON.');\n    const svc = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);\n    admin.initializeApp({ credential: admin.credential.cert(svc) });\n    return;\n  }\n\n  console.error('No service account provided. Set GOOGLE_APPLICATION_CREDENTIALS or FIREBASE_SERVICE_ACCOUNT.');\n  process.exit(1);\n}\n\nasync function migrate() {\n  initAdmin();\n  const db = admin.firestore();\n  const removeParent = process.argv.includes('--remove-parent');\n\n  console.log('Fetching users...');\n  const usersSnap = await db.collection('users').get();\n  console.log(`Found ${usersSnap.size} users.`);\n\n  let migratedCount = 0;\n  for (const userDoc of usersSnap.docs) {\n    const uid = userDoc.id;\n    const data = userDoc.data();\n    const devices = data?.devices;\n    if (!devices || !Array.isArray(devices) || devices.length === 0) continue;\n\n    console.log(`Migrating ${devices.length} devices for user ${uid}`);\n    for (const d of devices) {\n      try {\n        const id = d?.id || uuidv4();\n        const deviceRef = db.collection('users').doc(uid).collection('devices').doc(id);\n\n        // Preserve loggedInAt if present, otherwise set serverTimestamp\n        const loggedInAt = d && d.loggedInAt ? d.loggedInAt : admin.firestore.FieldValue.serverTimestamp();\n\n        await deviceRef.set({ ...d, id, loggedInAt }, { merge: true });\n        migratedCount++;\n      } catch (err) {\n        console.error(`Failed to migrate device for user ${uid}:`, err);\n      }\n    }\n\n    if (removeParent) {\n      try {\n        await db.collection('users').doc(uid).update({ devices: admin.firestore.FieldValue.delete() });\n        console.log(`Removed parent devices array for user ${uid}`);\n      } catch (err) {\n        console.error(`Failed to remove parent devices array for user ${uid}:`, err);\n      }\n    }\n  }\n\n  console.log(`Migration complete. Created/updated ${migratedCount} device documents.`);\n  process.exit(0);\n}\n\nmigrate().catch((e) => {\n  console.error('Migration failed:', e);\n  process.exit(1);\n});\n","size_bytes":2923},"scripts/migrate-videos-to-cloudinary.js":{"content":"// migrate-videos-to-cloudinary.js (node)\nconst admin = require('firebase-admin');\nconst cloudinary = require('cloudinary').v2;\n\n// Initialize Firebase Admin SDK\n// Ensure you have your service account key file and set the GOOGLE_APPLICATION_CREDENTIALS env var\nadmin.initializeApp({\n  credential: admin.credential.applicationDefault(),\n  databaseURL: `https://${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID}.firebaseio.com`\n});\n\n// Configure Cloudinary\n// Ensure you have these environment variables set in your .env file\ncloudinary.config({\n  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET\n});\n\nconst db = admin.firestore();\n\nasync function runMigration() {\n  console.log('Starting video migration...');\n\n  if (!process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {\n    console.error('Error: Cloudinary environment variables are not set. Please check your .env file.');\n    return;\n  }\n\n  const conversationsSnapshot = await db.collection('conversations').get();\n  console.log(`Found ${conversationsSnapshot.docs.length} conversations to check.`);\n\n  let migratedCount = 0;\n  const migrationPromises = [];\n\n  for (const convoDoc of conversationsSnapshot.docs) {\n    const messagesRef = convoDoc.ref.collection('messages');\n    const messagesSnapshot = await messagesRef.get();\n\n    for (const messageDoc of messagesSnapshot.docs) {\n      const data = messageDoc.data();\n      const file = data.file;\n\n      const isBase64Video = file && file.type && file.type.startsWith('video/') && file.url && file.url.startsWith('data:');\n      const hasMediaData = data.mediaData && file && file.type && file.type.startsWith('video/');\n\n      if (isBase64Video || hasMediaData) {\n        console.log(`Found video to migrate in message ${messageDoc.id} from conversation ${convoDoc.id}`);\n        \n        const migrationPromise = (async () => {\n          try {\n            const base64Data = (file.url || data.mediaData).split(',')[1];\n            \n            // Upload to Cloudinary\n            const uploadResponse = await new Promise((resolve, reject) => {\n              const uploadStream = cloudinary.uploader.upload_stream(\n                { resource_type: 'video', folder: 'migrated_videos' },\n                (error, result) => {\n                  if (error) return reject(error);\n                  resolve(result);\n                }\n              );\n              uploadStream.end(Buffer.from(base64Data, 'base64'));\n            });\n\n            if (!uploadResponse.secure_url) {\n                throw new Error('Cloudinary did not return a secure_url');\n            }\n\n            // Update Firestore document\n            await messageDoc.ref.update({\n              'file.url': uploadResponse.secure_url,\n              mediaData: admin.firestore.FieldValue.delete() // Remove the large base64 field\n            });\n\n            console.log(`Successfully migrated message ${messageDoc.id}. New URL: ${uploadResponse.secure_url}`);\n            migratedCount++;\n          } catch (error) {\n            console.error(`Failed to migrate message ${messageDoc.id}:`, error);\n          }\n        })();\n        migrationPromises.push(migrationPromise);\n      }\n    }\n  }\n\n  await Promise.all(migrationPromises);\n  console.log(`\\nMigration complete. Migrated ${migratedCount} video messages.`);\n}\n\nrunMigration().catch(error => {\n  console.error(\"Migration script failed with an error:\", error);\n  process.exit(1);\n});\n","size_bytes":3580},"src/ai/dev.ts":{"content":"'use server';\nimport { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/summarize-long-messages.ts';\nimport '@/ai/flows/ai-chat-flow.ts';\nimport '@/ai/flows/weather-flow.ts';\n","size_bytes":180},"src/ai/genkit.ts":{"content":"import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest',\n});\n","size_bytes":179},"src/app/globals.css":{"content":"\n/* stylelint-disable at-rule-no-unknown, declaration-block-no-duplicate-properties */\n/* Allow Tailwind/JIT @rules in editor/linters (these are handled by PostCSS/Tailwind at build time) */\n@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=PT+Sans:wght@400;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 280 60% 97%; /* Light Lavender */\n    --foreground: 280 10% 20%;\n    \n    --card: 280 50% 95% / 0.8;\n    --card-foreground: 280 10% 15%;\n    \n    --popover: 280 60% 97%;\n    --popover-foreground: 280 10% 15%;\n    \n    --primary: 283 51% 53%; /* Vibrant Violet */\n    --primary-foreground: 280 40% 98%;\n    \n    --secondary: 280 40% 92%;\n    --secondary-foreground: 283 51% 53%;\n    \n    --muted: 280 30% 92%;\n    --muted-foreground: 280 10% 55%;\n    \n    --accent: 260 80% 65%; /* Cool Indigo */\n    --accent-foreground: 280 40% 98%;\n    \n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 100%;\n    \n    --border: 280 30% 90% / 0.5;\n    --input: 280 30% 90% / 0.8;\n    --ring: 283 51% 53%;\n    \n    --radius: 0.75rem;\n\n    --chart-1: 283 51% 53%;\n    --chart-2: 150 70% 45%;\n    --chart-3: 30 90% 55%;\n    --chart-4: 210 90% 55%;\n    --chart-5: 340 85% 65%;\n\n    --gradient-from: 330 85% 60%;\n    --gradient-to: 210 90% 55%;\n  }\n\n  .dark {\n    --background: 275 22% 11%; /* Deep Violet-Blue */\n    --foreground: 275 15% 85%;\n    \n    --card: 275 20% 15% / 0.6; \n    --card-foreground: 275 15% 90%;\n    \n    --popover: 275 22% 11%;\n    --popover-foreground: 275 15% 85%;\n    \n    --primary: 283 51% 53%; /* Vibrant Violet */\n    --primary-foreground: 280 20% 98%;\n    \n    --secondary: 275 15% 20%;\n    --secondary-foreground: 275 15% 95%;\n    \n    --muted: 275 15% 20%;\n    --muted-foreground: 275 10% 55%;\n    \n    --accent: 260 80% 70%; /* Brighter Indigo */\n    --accent-foreground: 280 20% 98%;\n    \n    --destructive: 0 63% 50%;\n    --destructive-foreground: 0 0% 100%;\n    \n    --border: 275 15% 25% / 0.4;\n    --input: 275 15% 25% / 0.6;\n    --ring: 283 51% 53%;\n\n    --chart-1: 283 51% 53%;\n    --chart-2: 150 70% 45%;\n    --chart-3: 30 90% 55%;\n    --chart-4: 210 90% 55%;\n    --chart-5: 340 85% 65%;\n\n    --gradient-from: 330 85% 60%;\n    --gradient-to: 210 90% 55%;\n  }\n\n  .amoled {\n    --background: 0 0% 0%; /* True Black */\n    --foreground: 275 15% 85%;\n    \n    --card: 0 0% 7%;\n    --card-foreground: 275 15% 85%;\n    \n    --popover: 0 0% 5%;\n    --popover-foreground: 275 15% 85%;\n    \n    --primary: 283 51% 53%;\n    --primary-foreground: 280 20% 98%;\n    \n    --secondary: 0 0% 12%;\n    --secondary-foreground: 275 15% 95%;\n    \n    --muted: 0 0% 10%;\n    --muted-foreground: 275 10% 55%;\n    \n    --accent: 260 80% 70%;\n    --accent-foreground: 280 20% 98%;\n    \n    --destructive: 0 70% 45%;\n    --destructive-foreground: 0 0% 100%;\n    \n    --border: 0 0% 15%;\n    --input: 0 0% 12%;\n    --ring: 283 51% 53%;\n\n    --gradient-from: 330 85% 60%;\n    --gradient-to: 210 90% 55%;\n  }\n}\n\n@layer base {\n  * {\n    border-color: hsl(var(--border));\n  }\n  body {\n    background-color: hsl(var(--background));\n    color: hsl(var(--foreground));\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n@layer utilities {\n    .animated-gradient {\n        background-size: 200%;\n        background-position: 0% 50%;\n        animation: background-pan 3s ease-in-out infinite;\n    }\n\n    @keyframes background-pan {\n        0% {\n            background-position: 0% 50%;\n        }\n        50% {\n            background-position: 100% 50%;\n        }\n        100% {\n            background-position: 0% 50%;\n        }\n    }\n    \n    .sr-only {\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      padding: 0;\n      margin: -1px;\n      overflow: hidden;\n      clip: rect(0, 0, 0, 0);\n      white-space: nowrap;\n      border-width: 0;\n    }\n}\n\n/* Force breaking of very long tokens in chat previews to avoid layout overflow */\n.chat-list-force-break {\n  overflow-wrap: anywhere;\n  word-break: break-word;\n}\n","size_bytes":4058},"src/app/layout.tsx":{"content":"\nimport type { Metadata, Viewport } from 'next';\nimport { ThemeProvider } from '@/components/providers/theme-provider';\nimport './globals.css';\nimport { Poppins, PT_Sans } from 'next/font/google';\nimport { cn } from '@/lib/utils';\nimport { AuthProvider } from '@/components/providers/auth-provider';\nimport { Toaster } from '@/components/ui/toaster';\nimport { AppearanceProvider } from '@/components/providers/appearance-provider';\nimport { MobileProvider } from '@/components/providers/mobile-provider';\nimport './mobile.css';\nimport { FriendsProvider } from '@/components/providers/friends-provider';\nimport { AppShell } from '@/components/app-shell';\n\nconst fontPoppins = Poppins({\n  subsets: ['latin'],\n  variable: '--font-poppins',\n  weight: ['400', '500', '600', '700'],\n});\n\nconst fontPtSans = PT_Sans({\n  subsets: ['latin'],\n  variable: '--font-pt-sans',\n  weight: ['400', '700'],\n});\n\nexport const metadata: Metadata = {\n  title: 'Vibez',\n  description: 'A next-generation messaging app.',\n  manifest: '/manifest.json',\n};\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  viewportFit: 'cover',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          'min-h-screen bg-background font-sans antialiased',\n          fontPoppins.variable,\n          fontPtSans.variable\n        )}\n      >\n        <AuthProvider>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"dark\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            <AppearanceProvider>\n              <FriendsProvider>\n                <MobileProvider>\n                  <AppShell>\n                    <main className=\"relative flex-1 z-10\">{children}</main>\n                  </AppShell>\n                  <Toaster />\n                </MobileProvider>\n              </FriendsProvider>\n            </AppearanceProvider>\n          </ThemeProvider>\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}\n\n","size_bytes":2151},"src/app/mobile.css":{"content":"\n/* This file is only loaded when the mobile_redesign feature flag is on */\nbody[data-mobile=\"true\"] .desktop-only {\n    display: none;\n}\n\nbody[data-mobile=\"true\"] .mobile-only {\n    display: flex; /* Or block, grid, etc., as needed */\n}\n\n/* By default, hide mobile-only content if JS is off or feature flag is not set */\n.mobile-only {\n    display: none;\n}\n\n/* Explicitly hide mobile-only elements on desktop screens */\n@media (min-width: 769px) {\n    .mobile-only {\n        display: none !important;\n    }\n}\n","size_bytes":510},"src/app/page.tsx":{"content":"\n'use client';\n\nimport { ChatLayout } from '@/components/chat-layout';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\n\nexport default function Home() {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      router.push('/login');\n    }\n  }, [user, loading, router]);\n\n  // Show loading state while checking auth\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Don't render anything if no user (redirect will happen)\n  if (!user) {\n    return null;\n  }\n  \n  return <ChatLayout />;\n}\n","size_bytes":935},"src/components/animated-auth-background.tsx":{"content":"\n'use client';\n\n/**\n * AnimatedAuthBackground renders a container with CSS-animated pseudo-elements\n * to create a subtle, floating blob effect. This component is purely presentational\n * and all animation logic is handled in `src/app/auth-background.css`.\n */\nexport function AnimatedAuthBackground() {\n  return (\n    <div className=\"blob-container\" aria-hidden=\"true\">\n        {/* This div is used to provide two more pseudo-elements for animation */}\n        <div></div>\n    </div>\n  );\n}\n","size_bytes":492},"src/components/app-shell.tsx":{"content":"\n\"use client\";\nimport '../styles/glass-theme.css';\nimport {\n  addDoc, arrayRemove, arrayUnion, collection, deleteDoc, doc, getDoc, getDocs, onSnapshot, orderBy, query,\n  runTransaction, serverTimestamp, Timestamp, updateDoc, where, writeBatch, limit, startAfter, setDoc\n} from 'firebase/firestore';\nimport { getDownloadURL, ref, uploadBytesResumable, UploadTask } from 'firebase/storage';\nimport React, { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { continueConversation } from '@/ai/flows/ai-chat-flow';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useNotifications } from '@/hooks/use-notifications';\nimport { db, storage } from '@/lib/firebase';\nimport type { Conversation, Message, Story, User, StoryReaction } from '@/lib/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { StoryViewer } from './story-viewer';\nimport { StoriesContext } from './providers/stories-provider';\nimport { ImagePreviewDialog } from './image-preview-dialog';\nimport { useAppearance } from './providers/appearance-provider';\nimport { GalaxyBackground } from './galaxy-background';\nimport { GradientGlowBackground } from './gradient-glow-background';\nimport { AuraBackground } from './aura-background';\nimport { GridBackground } from './grid-background';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { MobileGalaxyBackground } from './mobile-galaxy-background';\n\n\nconst AI_USER_ID = 'gemini-ai-chat-bot-7a4b9c1d-f2e3-4d56-a1b2-c3d4e5f6a7b8';\nconst AI_USER_NAME = 'Gemini';\nconst AI_AVATAR_URL = '/gemini-logo.svg';\n\nconst PAGE_SIZE = 30;\n\nexport async function uploadToCloudinaryXHR(\n  file: File,\n  cloudName: string,\n  uploadPreset: string,\n  onProgress?: (p: number) => void,\n  signal?: { xhrAbort?: () => void }\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const url = `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`;\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', uploadPreset);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', url, true);\n\n    xhr.upload.onprogress = (ev) => {\n      if (ev.lengthComputable && onProgress) {\n        onProgress((ev.loaded / ev.total) * 100);\n      }\n    };\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try { resolve(JSON.parse(xhr.responseText)); }\n          catch (e) { reject(new Error('Invalid JSON response from Cloudinary')); }\n        } else {\n          reject(new Error(`Cloudinary upload failed: ${xhr.status} ${xhr.responseText}`));\n        }\n      }\n    };\n\n    xhr.onerror = () => reject(new Error('Network error during Cloudinary upload'));\n    xhr.send(formData);\n\n    if (signal) signal.xhrAbort = () => { try { xhr.abort(); } catch(e){} };\n  });\n}\n\n\nfunction useChatData() {\n  const { user: authUser, loading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const { setAppBackground, setUseCustomBackground } = useAppearance();\n\n  const aiUser: User = {\n    id: AI_USER_ID,\n    uid: AI_USER_ID,\n    name: AI_USER_NAME,\n    photoURL: AI_AVATAR_URL,\n    status: 'online',\n  };\n\n  const initialAiConversation: Conversation = {\n    id: AI_USER_ID,\n    type: 'private',\n    participants: [AI_USER_ID],\n    participantsDetails: [aiUser],\n    name: AI_USER_NAME,\n    avatar: AI_AVATAR_URL,\n    messages: [],\n    lastMessage: {\n      text: 'Ask me anything!',\n      senderId: AI_USER_ID,\n      timestamp: new Date() as any,\n    }\n  };\n\n  const [aiConversation, setAiConversation] = useState<Conversation>(initialAiConversation);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [selectedChat, setSelectedChat] = useState<Conversation | undefined>(undefined);\n  const [isAiReplying, setIsAiReplying] = useState(false);\n  const [allUsers, setAllUsers] = useState<User[]>([]);\n  const [usersCache, setUsersCache] = useState<Map<string, User>>(new Map([[AI_USER_ID, aiUser]]));\n  const [newlyCreatedChatId, setNewlyCreatedChatId] = useState<string | null>(null);\n\n  const [uploadProgress, setUploadProgress] = useState<Map<string, number>>(new Map());\n  const uploadTasks = useRef<Map<string, UploadTask>>(new Map());\n  const xhrRequests = useRef<Map<string, { xhrAbort?: () => void }>>(new Map());\n\n\n  \n  const [currentUser, setCurrentUser] = useState<User | undefined>(undefined);\n  const [stories, setStories] = useState<Story[]>([]);\n  const [viewingStory, setViewingStory] = useState<{ user: User, stories: Story[] } | null>(null);\n  const [previewStoryFile, setPreviewStoryFile] = useState<File | null>(null);\n\n  const [messages, setMessages] = useState<Message[]>([]);\n// DEBUG LOGGING\nuseEffect(() => {\n  console.log('[AppShell] selectedChat:', selectedChat);\n  console.log('[AppShell] messages:', messages);\n}, [selectedChat, messages]);\n  const [firstMessageDoc, setFirstMessageDoc] = useState<any>(null);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  \n  const messagesUnsubscribe = useRef<() => void>();\n\n\n  useNotifications({ conversations, usersCache, currentUser, activeChatId: selectedChat?.id });\n\n  const updateUserInCache = useCallback((userToCache: User) => {\n    setUsersCache(prev => {\n      const newCache = new Map(prev);\n      const existingUser = newCache.get(userToCache.uid);\n      if (JSON.stringify(existingUser) !== JSON.stringify(userToCache)) {\n        newCache.set(userToCache.uid, userToCache);\n        return newCache;\n      }\n      return prev;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!authUser || authLoading) return;\n    \n    const userDocRef = doc(db, 'users', authUser.uid);\n    const unsubscribeCurrentUser = onSnapshot(userDocRef, (doc) => {\n        if (doc.exists()) {\n            const userData = { id: doc.id, ...doc.data() } as User;\n            setCurrentUser(userData);\n            updateUserInCache(userData);\n            // Update appearance from user data\n            if(userData.background) {\n              setAppBackground(userData.background);\n            }\n              if(userData.hasOwnProperty('useCustomBackground')) {\n              setUseCustomBackground(userData.useCustomBackground ?? false);\n            }\n        }\n    });\n    \n    const usersQuery = query(collection(db, 'users'));\n    const unsubscribeAllUsers = onSnapshot(usersQuery, (snapshot) => {\n      const usersData = snapshot.docs.map(doc => ({ ...doc.data(), id: doc.id } as User));\n      const newCache = new Map(usersCache);\n      usersData.forEach(user => newCache.set(user.uid, user));\n      setUsersCache(newCache);\n      setAllUsers(usersData);\n    }, (error) => console.error(\"Error fetching all users:\", error));\n\n    return () => {\n      unsubscribeCurrentUser();\n      unsubscribeAllUsers();\n    };\n  }, [authUser, authLoading, updateUserInCache, setAppBackground, setUseCustomBackground]);\n\n\n  const getParticipantDetails = useCallback((participantIds: string[]): User[] => {\n    return participantIds.map(id => usersCache.get(id)).filter(Boolean) as User[];\n  }, [usersCache]);\n\n\n  useEffect(() => {\n    if (!authUser || usersCache.size <= 1) return;\n\n    const conversationsQuery = query(\n      collection(db, 'conversations'),\n      where('participants', 'array-contains', authUser.uid)\n    );\n\n    const unsubscribeConversations = onSnapshot(conversationsQuery, async (snapshot) => {\n      const convosPromises = snapshot.docs.map(async (doc) => {\n          const data = doc.data() as Omit<Conversation, 'id'|'participantsDetails'>;\n          const participantIds = data.participants;\n          const participantsDetails = getParticipantDetails(participantIds);\n          let name = data.name;\n          let avatar = data.avatar;\n          let otherParticipantLastRead: Timestamp | undefined = undefined;\n\n          if (data.type === 'private') {\n              const otherParticipant = participantsDetails.find(p => p.uid !== authUser.uid);\n              if (otherParticipant) {\n                  name = otherParticipant.name;\n                  avatar = otherParticipant.photoURL;\n                  if(data.lastRead) {\n                    otherParticipantLastRead = data.lastRead[otherParticipant.uid];\n                  }\n              }\n          }\n          \n          let unreadCount = 0;\n          const lastReadTimestamp = data.lastRead?.[authUser.uid];\n          if (data.lastMessage && lastReadTimestamp && data.lastMessage.timestamp > lastReadTimestamp) {\n              // This is a simplified unread count. A more accurate one would query messages.\n              // For performance, we can assume 1 unread if last message is newer.\n              unreadCount = data.lastMessage.senderId !== authUser.uid ? 1 : 0;\n          } else if (data.lastMessage && !lastReadTimestamp && data.lastMessage.senderId !== authUser.uid) {\n              unreadCount = 1;\n          }\n\n          return {\n              ...data,\n              id: doc.id,\n              name,\n              avatar,\n              participantsDetails,\n              unreadCount,\n              otherParticipantLastRead,\n          } as Conversation\n      });\n\n      const convos = await Promise.all(convosPromises);\n      convos.sort((a, b) => (b.lastMessage?.timestamp?.toMillis() || 0) - (a.lastMessage?.timestamp?.toMillis() || 0));\n      \n      setConversations(convos);\n\n    });\n\n    return () => unsubscribeConversations();\n  }, [authUser, usersCache, getParticipantDetails]);\n  \n  useEffect(() => {\n    if (newlyCreatedChatId) {\n       const newChat = conversations.find(c => c.id === newlyCreatedChatId);\n       if (newChat) {\n         handleChatSelect(newChat.id);\n         setNewlyCreatedChatId(null);\n       }\n     }\n  }, [conversations, newlyCreatedChatId]);\n\n  // Sync messages with aiConversation when AI chat is selected\n  useEffect(() => {\n    if (selectedChat && selectedChat.id === AI_USER_ID) {\n      setMessages(aiConversation.messages || []);\n    }\n  }, [aiConversation, selectedChat]);\n\n\n  // Message fetching logic\n  const handleChatSelect = useCallback(async (chatId: string) => {\n    if (messagesUnsubscribe.current) {\n        messagesUnsubscribe.current();\n    }\n\n    const chat = conversations.find(c => c.id === chatId) || (chatId === AI_USER_ID ? aiConversation : undefined);\n\n    if (!chat) {\n        setSelectedChat(undefined);\n        setMessages([]);\n        return;\n    }\n\n    if (chat.id === AI_USER_ID) {\n        setSelectedChat(aiConversation);\n        setMessages(aiConversation.messages || []);\n        setHasMoreMessages(false);\n        return;\n    }\n    \n    setSelectedChat(chat);\n    setIsLoadingMore(true);\n\n    const messagesRef = collection(db, 'conversations', chat.id, 'messages');\n    const q = query(messagesRef, orderBy('timestamp', 'desc'), limit(PAGE_SIZE));\n    const snapshot = await getDocs(q);\n\n    const initialMsgs = snapshot.docs.map(d => ({ ...d.data(), id: d.id } as Message)).reverse();\n    setMessages(initialMsgs);\n\n    const lastDoc = snapshot.docs[snapshot.docs.length - 1];\n    setFirstMessageDoc(lastDoc);\n    setHasMoreMessages(snapshot.docs.length === PAGE_SIZE);\n    setIsLoadingMore(false);\n    \n    if (chat && authUser) {\n        const chatRef = doc(db, 'conversations', chat.id);\n        await updateDoc(chatRef, {\n            [`lastRead.${authUser.uid}`]: serverTimestamp()\n        });\n    }\n\n    // Subscribe to new messages\n    const lastVisibleMessage = initialMsgs[initialMsgs.length - 1];\n    const newMessagesQuery = lastVisibleMessage?.timestamp\n        ? query(messagesRef, orderBy('timestamp', 'asc'), startAfter(lastVisibleMessage.timestamp))\n        : query(messagesRef, orderBy('timestamp', 'asc'));\n\n    messagesUnsubscribe.current = onSnapshot(newMessagesQuery, (snapshot) => {\n        const newMsgs: Message[] = [];\n        snapshot.docChanges().forEach(change => {\n            if (change.type === 'added') {\n                newMsgs.push({ ...change.doc.data(), id: change.doc.id } as Message);\n            }\n        });\n\n        if (newMsgs.length > 0) {\n            setMessages(prev => {\n                const newMessagesMap = new Map(newMsgs.map(m => [m.clientTempId || m.id, m]));\n                const updatedMessages = prev.map(m => {\n                    const serverVersion = newMessagesMap.get(m.clientTempId!);\n                    if (serverVersion) {\n                        newMessagesMap.delete(m.clientTempId!);\n                        return serverVersion; // Replace optimistic with server version\n                    }\n                    return m;\n                });\n                return [...updatedMessages, ...Array.from(newMessagesMap.values())];\n            });\n        }\n    });\n\n  }, [conversations, aiConversation, authUser]);\n  \n  const loadMoreMessages = useCallback(async () => {\n    if (isLoadingMore || !hasMoreMessages || !selectedChat || !firstMessageDoc) return;\n  \n    setIsLoadingMore(true);\n  \n    const messagesRef = collection(db, 'conversations', selectedChat.id, 'messages');\n    const q = query(messagesRef, orderBy('timestamp', 'desc'), startAfter(firstMessageDoc), limit(PAGE_SIZE));\n    \n    try {\n        const snapshot = await getDocs(q);\n        if (snapshot.empty) {\n            setHasMoreMessages(false);\n            setIsLoadingMore(false);\n            return;\n        }\n\n        const olderMsgs = snapshot.docs.map(d => ({...d.data(), id: d.id} as Message)).reverse();\n        const newFirstDoc = snapshot.docs[snapshot.docs.length - 1];\n        setFirstMessageDoc(newFirstDoc);\n        setHasMoreMessages(snapshot.docs.length === PAGE_SIZE);\n\n        setMessages(prev => [...olderMsgs, ...prev]);\n\n    } catch (error) {\n      console.error(\"Error loading more messages:\", error);\n    } finally {\n      setIsLoadingMore(false);\n    }\n  }, [isLoadingMore, hasMoreMessages, selectedChat, firstMessageDoc]);\n\n\n  useEffect(() => {\n    if (!currentUser) {\n        setStories([]);\n        return;\n    };\n    \n    const storyOwnerIds = [...(currentUser.friends || []), currentUser.uid];\n\n    if(storyOwnerIds.length === 0) {\n      setStories([]);\n      return;\n    }\n\n    const storiesQuery = query(\n        collection(db, 'stories'),\n        where('ownerId', 'in', storyOwnerIds)\n    );\n\n    const unsubscribe = onSnapshot(storiesQuery, (snapshot) => {\n        const now = new Date();\n        const twentyFourHoursAgo = new Date(now.getTime() - (24 * 60 * 60 * 1000));\n        \n        const stories = snapshot.docs\n          .map(d => ({id: d.id, ...d.data()} as Story))\n          .filter(story => (story.createdAt as Timestamp).toDate() > twentyFourHoursAgo);\n        \n        setStories(stories);\n    }, error => {\n      console.error(\"Error fetching stories: \", error);\n    });\n\n    return () => unsubscribe();\n\n  }, [currentUser]);\n  \n  const handleSendMessage = useCallback(async (\n    chatId: string,\n    senderId: string,\n    messageText: string,\n    replyTo?: Message['replyTo']\n  ): Promise<string> => {\n    if (!messageText.trim() || !currentUser) return Promise.reject(\"Cannot send empty message\");\n  \n    const tempId = uuidv4();\n    const optimisticMessage: Message = {\n        id: tempId,\n        clientTempId: tempId,\n        senderId: currentUser.uid,\n        text: messageText,\n        timestamp: new Date(),\n        status: 'sending',\n        ...(replyTo && { replyTo })\n    };\n\n    setMessages(prev => [...prev, optimisticMessage]);\n\n    const messageCollectionRef = collection(db, 'conversations', chatId, 'messages');\n    const newMessageRef = doc(messageCollectionRef);\n    const messageData: any = {\n      senderId: senderId,\n      text: messageText,\n      timestamp: serverTimestamp(),\n      clientTempId: tempId,\n    };\n    if (replyTo) messageData.replyTo = replyTo;\n    \n    const chatRef = doc(db, 'conversations', chatId);\n\n    writeBatch(db)\n      .set(newMessageRef, messageData)\n      .update(chatRef, {\n          lastMessage: {\n              text: messageText,\n              senderId: senderId,\n              timestamp: serverTimestamp(),\n          },\n      })\n      .commit()\n      .catch(error => {\n          console.error('Error sending message: ', error);\n          setMessages(prev => prev.map(m => \n              m.clientTempId === tempId ? { ...m, status: 'error' } : m\n          ));\n      });\n    \n    return tempId;\n  \n  }, [currentUser]);\n\n  const handleSendBase64File = useCallback(async (chatId: any, senderId: any, base64Data: any, fileType: any, fileName: any, caption: any) => {\n    if (!base64Data || !currentUser) return Promise.reject(\"No data or user\");\n    if (fileType.startsWith('video/')) {\n        // Prevent regressions: videos must not be stored as base64\n        toast({ title: \"Error\", description: \"Video uploads must use Cloudinary. Do not send base64 for videos.\", variant: \"destructive\"});\n        return Promise.reject('Video uploads must use Cloudinary. Do not send base64 for videos.');\n    }\n    \n    if (!base64Data || !currentUser) return;\n    \n    const tempId = uuidv4();\n    const optimisticMessage: Message = {\n        id: tempId,\n        clientTempId: tempId,\n        senderId,\n        text: caption,\n        timestamp: new Date(),\n        status: 'sending',\n        file: {\n            url: base64Data, // Use data URL for optimistic preview\n            type: fileType,\n            name: fileName\n        }\n    };\n\n    setMessages(prev => [...prev, optimisticMessage]);\n\n    const messageData: any = {\n        senderId,\n        text: caption,\n        timestamp: serverTimestamp(),\n        clientTempId: tempId,\n        file: {\n            url: base64Data, \n            type: fileType,\n            name: fileName\n        }\n    };\n\n    try {\n        const messageCollectionRef = collection(db, 'conversations', chatId, 'messages');\n        const newMessageRef = doc(messageCollectionRef);\n        await setDoc(newMessageRef, messageData);\n        \n        let lastMessageText = caption ? caption : 'Sent a file';\n        if (fileType.startsWith('image/')) {\n            lastMessageText = caption || 'Sent an image';\n        } else if (fileType.startsWith('audio/')) {\n             lastMessageText = 'Sent a voice note';\n        } else if (fileType.startsWith('video/')) {\n             lastMessageText = caption || 'Sent a video';\n        }\n        \n        await updateDoc(doc(db, 'conversations', chatId), {\n            lastMessage: {\n                text: lastMessageText,\n                senderId: senderId,\n                timestamp: serverTimestamp(),\n            },\n        });\n    } catch (error) {\n        console.error('Error sending base64 file:', error);\n        setMessages(prev => prev.map(m => m.clientTempId === tempId ? {...m, status: 'error'} : m));\n        throw error;\n    }\n  }, [currentUser, toast]);\n\n\n  const handleAiConversation = useCallback(async (messageText: string) => {\n    if (!currentUser) return;\n\n    const userMessage: Message = {\n      id: uuidv4(),\n      senderId: currentUser.uid,\n      text: messageText,\n      timestamp: new Date(),\n      status: 'read',\n    };\n    \n    // Optimistically update AI chat\n    const tempAiConvo = {\n      ...aiConversation,\n      messages: [...(aiConversation.messages || []), userMessage],\n      lastMessage: { text: messageText, senderId: currentUser.uid, timestamp: new Date() as any }\n    }\n    setAiConversation(tempAiConvo);\n    setSelectedChat(tempAiConvo);\n\n    setIsAiReplying(true);\n\n    try {\n      const history = (tempAiConvo.messages)\n          .slice(-10) \n          .map(m => (m.senderId === currentUser.uid ? { user: m.text } : { model: m.text }));\n\n      const aiResponse = await continueConversation({ message: messageText, history });\n\n      const aiMessage: Message = {\n        id: uuidv4(),\n        senderId: AI_USER_ID,\n        text: aiResponse.reply,\n        timestamp: new Date(),\n        status: 'read',\n      };\n      \n      setAiConversation(prev => {\n          const newMessages = [...prev.messages, aiMessage];\n          const finalAiConvo = {\n            ...prev,\n            messages: newMessages,\n            lastMessage: { text: aiResponse.reply, senderId: AI_USER_ID, timestamp: new Date() as any }\n          };\n          setSelectedChat(finalAiConvo);\n          return finalAiConvo;\n      });\n\n    } catch (error) {\n      console.error(\"Error with AI conversation:\", error);\n       const errorMessage: Message = {\n          id: uuidv4(),\n          senderId: AI_USER_ID,\n          text: \"Sorry, I encountered an error. Please try again.\",\n          timestamp: new Date(),\n          status: 'read',\n        };\n       setAiConversation(prev => {\n          const finalAiConvo = { ...prev, messages: [...prev.messages, errorMessage] };\n          setSelectedChat(finalAiConvo);\n          return finalAiConvo;\n        });\n    } finally {\n      setIsAiReplying(false);\n    }\n  }, [currentUser, aiConversation]);\n  \n  const handleCloudinaryUpload = useCallback(async (file: File, messageText: string, chatId: string, senderId: string): Promise<string> => {\n    const tempId = uuidv4();\n    const optimisticMessage: Message = {\n        id: tempId, clientTempId: tempId, senderId,\n        text: messageText, timestamp: new Date(), status: 'sending',\n        file: { url: URL.createObjectURL(file), type: file.type, name: file.name }\n    };\n    setMessages(prev => [...prev, optimisticMessage]);\n\n    const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n    const uploadPreset = process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET;\n    if (!cloudName || !uploadPreset) {\n        setMessages(prev => prev.map(m => m.clientTempId === tempId ? {...m, status: 'error'} : m));\n        toast({ title: 'Cloudinary config missing', variant: 'destructive' });\n        return Promise.reject('Cloudinary config missing');\n    }\n\n    let xhrSignal: { xhrAbort?: ()=>void } = {};\n    xhrRequests.current.set(tempId, xhrSignal);\n    try {\n        const { secure_url, resource_type, duration } = await uploadToCloudinaryXHR(file, cloudName, uploadPreset, (p) => {\n            setUploadProgress(prev => new Map(prev).set(tempId, p));\n        }, xhrSignal);\n\n        const fileData: Message['file'] = {\n            url: secure_url,\n            type: file.type,\n            name: file.name,\n        };\n        \n        if (resource_type === 'video' && duration) {\n            fileData.duration = duration;\n        }\n\n        const finalMessageData = {\n            senderId,\n            text: messageText || '',\n            timestamp: serverTimestamp(),\n            clientTempId: tempId,\n            file: fileData,\n        };\n\n        const messageCollectionRef = collection(db, 'conversations', chatId, 'messages');\n        await addDoc(messageCollectionRef, finalMessageData);\n        await updateDoc(doc(db, 'conversations', chatId), { lastMessage: { text: messageText || `Sent a ${file.type.split('/')[0]}`, senderId, timestamp: serverTimestamp() } });\n\n        xhrRequests.current.delete(tempId);\n        setUploadProgress(prev => { const n = new Map(prev); n.delete(tempId); return n; });\n        return tempId;\n    } catch (err) {\n        console.error('Cloudinary upload error', err);\n        setMessages(prev => prev.map(m => m.clientTempId === tempId ? {...m, status: 'error'} : m));\n        xhrRequests.current.delete(tempId);\n        setUploadProgress(prev => { const n = new Map(prev); n.delete(tempId); return n; });\n        throw err;\n    }\n  }, [toast]);\n\n  const handleFileUpload = useCallback(async (file: File, messageText: string, chatId: string, senderId: string): Promise<string> => {\n      // Videos, Images, Audio, GIFs -> Cloudinary\n      if (file.type.startsWith('video/') || file.type.startsWith('image/') || file.type.startsWith('audio/')) {\n        return handleCloudinaryUpload(file, messageText, chatId, senderId);\n      }\n    \n      // Other files -> Firebase Storage\n      const tempId = uuidv4();\n      const optimisticMessage: Message = {\n          id: tempId,\n          clientTempId: tempId,\n          senderId: senderId,\n          text: messageText,\n          timestamp: new Date(),\n          status: 'sending',\n          file: {\n              url: URL.createObjectURL(file),\n              type: file.type,\n              name: file.name\n          }\n      };\n\n      setMessages(prev => [...prev, optimisticMessage]);\n  \n      const fileId = `${Date.now()}_${file.name}`;\n      const storageRef = ref(storage, `uploads/${chatId}/${fileId}`);\n      const metadata = { contentType: file.type };\n      \n      const uploadTask = uploadBytesResumable(storageRef, file, metadata);\n      uploadTasks.current.set(tempId, uploadTask);\n    \n      uploadTask.on('state_changed', \n          (snapshot) => {\n              const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n              setUploadProgress(prev => new Map(prev).set(tempId, progress));\n          },\n          (error) => {\n              console.error('Upload error:', error);\n              setMessages(prev => prev.map(m => m.clientTempId === tempId ? {...m, status: 'error'} : m));\n              uploadTasks.current.delete(tempId);\n          },\n          async () => {\n              try {\n                  const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n                  \n                  const finalMessageData = {\n                    senderId: senderId,\n                    text: messageText,\n                    timestamp: serverTimestamp(),\n                    clientTempId: tempId,\n                    file: {\n                        url: downloadURL,\n                        type: file.type,\n                        name: file.name,\n                    },\n                  };\n                  \n                  const messageCollectionRef = collection(db, 'conversations', chatId, 'messages');\n                  await addDoc(messageCollectionRef, finalMessageData);\n  \n                  const lastMessageText = messageText || `Sent a file: ${file.name}`;\n  \n                  const chatRef = doc(db, 'conversations', chatId);\n                  await updateDoc(chatRef, {\n                      lastMessage: {\n                          text: lastMessageText,\n                          senderId: senderId,\n                          timestamp: serverTimestamp(),\n                      },\n                  });\n              } catch(e) {\n                  console.error('Error saving message after upload:', e);\n                  setMessages(prev => prev.map(m => m.clientTempId === tempId ? {...m, status: 'error'} : m));\n              } finally {\n                  uploadTasks.current.delete(tempId);\n                  setUploadProgress(prev => {\n                      const newMap = new Map(prev);\n                      newMap.delete(tempId);\n                      return newMap;\n                  });\n              }\n          }\n      );\n        \n      return tempId;\n  }, [handleCloudinaryUpload, toast]);\n  \n  const cancelUpload = useCallback((messageId: string) => {\n    const firebaseTask = uploadTasks.current.get(messageId);\n    if (firebaseTask) {\n      firebaseTask.cancel();\n      uploadTasks.current.delete(messageId);\n    }\n    \n    const cloudinaryXhrSignal = xhrRequests.current.get(messageId);\n    if (cloudinaryXhrSignal?.xhrAbort) {\n        cloudinaryXhrSignal.xhrAbort();\n        xhrRequests.current.delete(messageId);\n    }\n    \n    setMessages(prev => prev.filter(m => m.clientTempId !== messageId));\n  }, []);\n\n\n  const handleCreateChat = useCallback(async (targetUser: User): Promise<string> => {\n    if (!currentUser) return Promise.reject(\"No current user\");\n  \n    const participants = [currentUser.uid, targetUser.uid].sort();\n  \n    const q = query(collection(db, \"conversations\"),\n      where(\"type\", \"==\", \"private\"),\n      where(\"participants\", \"==\", participants)\n    );\n  \n    const querySnapshot = await getDocs(q);\n  \n    if (!querySnapshot.empty) {\n      const existingConvoDoc = querySnapshot.docs[0];\n      handleChatSelect(existingConvoDoc.id);\n      return existingConvoDoc.id;\n    } else {\n      try {\n        const newConvoRef = await addDoc(collection(db, 'conversations'), {\n          type: 'private',\n          participants: participants,\n          createdAt: serverTimestamp(),\n          lastMessage: null,\n          lastRead: {}\n        });\n        setNewlyCreatedChatId(newConvoRef.id);\n        return newConvoRef.id;\n      } catch (error) {\n        console.error(\"Error creating new chat:\", error);\n        return Promise.reject(error);\n      }\n    }\n  }, [currentUser, handleChatSelect, conversations]);\n  \n  const handleCreateGroupChat = useCallback(async (groupName: string, selectedUsers: User[]) => {\n    if (!currentUser) return;\n  \n    const participantUids = [currentUser.uid, ...selectedUsers.map(u => u.uid)].sort();\n  \n    const newConvoData = {\n      type: 'group',\n      name: groupName,\n      participants: participantUids,\n      createdBy: currentUser.uid,\n      createdAt: serverTimestamp(),\n      lastMessage: null,\n      avatar: null,\n      lastRead: {}\n    };\n  \n    const newConvoRef = await addDoc(collection(db, 'conversations'), newConvoData);\n    setNewlyCreatedChatId(newConvoRef.id);\n  }, [currentUser]);\n\n  const handleConversationAction = useCallback(async (\n    conversationId: string,\n    action: 'toggleFavorite' | 'archive' | 'unarchive'\n  ) => {\n    const conversation = conversations.find(c => c.id === conversationId);\n    if (!conversation) return;\n\n    const conversationRef = doc(db, 'conversations', conversationId);\n\n    if (action === 'toggleFavorite') {\n      await updateDoc(conversationRef, {\n        isFavorite: !conversation.isFavorite,\n      });\n    } else if (action === 'archive') {\n      await updateDoc(conversationRef, {\n        isArchived: true,\n      });\n      if (selectedChat?.id === conversationId) {\n        setSelectedChat(undefined);\n      }\n    } else if (action === 'unarchive') {\n        await updateDoc(conversationRef, {\n            isArchived: false,\n        });\n    }\n  }, [conversations, selectedChat?.id]);\n\n const handleMessageAction = useCallback(async (\n    messageId: string,\n    action: 'react' | 'delete',\n    data?: any\n  ) => {\n    if (!selectedChat || !currentUser) return;\n    \n    if (action === 'delete') {\n      const messageToDelete = messages.find(m => m.id === messageId || m.clientTempId === messageId);\n      if (!messageToDelete) return;\n      \n      const messageRef = doc(db, 'conversations', selectedChat.id, 'messages', messageToDelete.id);\n      try {\n        await updateDoc(messageRef, {\n          text: 'This message was deleted.',\n          file: null,\n          deleted: true,\n          reactions: []\n        });\n      } catch (error) {\n        console.error(\"Error deleting message\", error);\n      }\n      return;\n    }\n\n    if (action === 'react') {\n      const emoji = data;\n      \n      setMessages(prevMessages => prevMessages.map(msg => {\n          if (msg.id === messageId) {\n              const reactions = msg.reactions || [];\n              let existingReaction = reactions.find(r => r.emoji === emoji);\n              let newReactions;\n\n              if (existingReaction) {\n                  const userIndex = existingReaction.users.indexOf(currentUser!.uid);\n                  if (userIndex > -1) {\n                      existingReaction.users.splice(userIndex, 1);\n                      existingReaction.count--;\n                  } else {\n                      existingReaction.users.push(currentUser!.uid);\n                      existingReaction.count++;\n                  }\n                  newReactions = reactions.filter(r => r.count > 0);\n              } else {\n                  newReactions = [...reactions, { emoji, users: [currentUser!.uid], count: 1 }];\n              }\n              return { ...msg, reactions: newReactions };\n          }\n          return msg;\n      }));\n\n      const messageRef = doc(db, 'conversations', selectedChat.id, 'messages', messageId);\n      try {\n        await runTransaction(db, async (transaction) => {\n          const messageDoc = await transaction.get(messageRef);\n          if (!messageDoc.exists()) return;\n          const messageData = messageDoc.data() as Message;\n          let reactions = messageData.reactions || [];\n          let existingReaction = reactions.find(r => r.emoji === emoji);\n\n          if (existingReaction) {\n            const userIndex = existingReaction.users.indexOf(currentUser.uid);\n            if (userIndex > -1) {\n                existingReaction.users.splice(userIndex, 1);\n                existingReaction.count--;\n            } else {\n                existingReaction.users.push(currentUser.uid);\n                existingReaction.count++;\n            }\n          } else {\n            reactions.push({ emoji, users: [currentUser.uid], count: 1 });\n          }\n          \n          const finalReactions = reactions.filter(r => r.count > 0);\n          transaction.update(messageRef, { reactions: finalReactions });\n        });\n      } catch (error) {\n        console.error(\"Error reacting to message\", error);\n        setMessages(messages);\n      }\n    }\n  }, [selectedChat, currentUser, messages]);\n\n  const handleFriendAction = useCallback(async (targetUserId: string, action: 'sendRequest' | 'acceptRequest' | 'declineRequest' | 'removeFriend') => {\n    if (!currentUser) return;\n    const currentUserRef = doc(db, 'users', currentUser.uid);\n    const targetUserRef = doc(db, 'users', targetUserId);\n\n    try {\n      if (action === 'sendRequest') {\n          await updateDoc(currentUserRef, { friendRequestsSent: arrayUnion(targetUserId) });\n          await updateDoc(targetUserRef, { friendRequestsReceived: arrayUnion(currentUser.uid) });\n          toast({ title: 'Request Sent', description: 'Your friend request has been sent.' });\n      } else if (action === 'acceptRequest') {\n          await updateDoc(currentUserRef, { \n              friends: arrayUnion(targetUserId),\n              friendRequestsReceived: arrayRemove(targetUserId)\n          });\n          await updateDoc(targetUserRef, {\n              friends: arrayUnion(currentUser.uid),\n              friendRequestsSent: arrayRemove(authUser.uid)\n          });\n          toast({ title: 'Friend Added', description: 'You are now friends!' });\n      } else if (action === 'declineRequest') {\n          await updateDoc(currentUserRef, { friendRequestsReceived: arrayRemove(targetUserId) });\n          await updateDoc(targetUserRef, { friendRequestsSent: arrayRemove(authUser.uid) });\n          toast({ title: 'Request Declined' });\n      } else if (action === 'removeFriend') {\n          await updateDoc(currentUserRef, { friends: arrayRemove(targetUserId) });\n          await updateDoc(targetUserRef, { friends: arrayRemove(currentUser.uid) });\n          toast({ title: 'Friend Removed' });\n      }\n    } catch (error: any) {\n        console.error(\"Error with friend action:\", error);\n        toast({ title: 'Error', description: error.message || \"An unexpected error occurred.\", variant: \"destructive\" });\n    }\n  }, [currentUser, toast, authUser]);\n\n  const handleBlockUser = useCallback(async (targetUserId: string, isBlocked: boolean) => {\n    if (!currentUser) return;\n    const currentUserRef = doc(db, 'users', currentUser.uid);\n\n    try {\n      if (isBlocked) {\n        await updateDoc(currentUserRef, { blockedUsers: arrayRemove(targetUserId) });\n        toast({ title: 'User Unblocked', description: 'You can now receive messages from this user.' });\n      } else {\n        await updateDoc(currentUserRef, { blockedUsers: arrayUnion(targetUserId) });\n        toast({ title: 'User Blocked', description: 'You will no longer see messages or chats from this user.' });\n      }\n    } catch (error: any) {\n      console.error(\"Error blocking user:\", error);\n      toast({ title: 'Error', description: error.message || 'An unexpected error occurred.', variant: 'destructive' });\n    }\n  }, [currentUser, toast]);\n  \n  const handleMuteToggle = useCallback(async (conversationId: string) => {\n      if (!currentUser) return;\n      const userRef = doc(db, 'users', currentUser.uid);\n      const isMuted = currentUser.mutedConversations?.includes(conversationId);\n\n      try {\n          if (isMuted) {\n              await updateDoc(userRef, { mutedConversations: arrayRemove(conversationId) });\n              toast({ title: 'Unmuted', description: 'You will now receive notifications from this chat.' });\n          } else {\n              await updateDoc(userRef, { mutedConversations: arrayUnion(conversationId) });\n              toast({ title: 'Muted', description: 'You will no longer receive notifications from this chat.' });\n          }\n      } catch (error: any) {\n          console.error(\"Error toggling mute:\", error);\n          toast({ title: 'Error', description: error.message || \"Could not update mute setting.\", variant: 'destructive'});\n      }\n  }, [currentUser, toast]);\n\n\n  const handleCreateStory = useCallback(async (mediaFile: File, caption?: string) => {\n    if (!currentUser) return Promise.reject(\"No current user\");\n  \n    const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n    const uploadPreset = process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET;\n    if (!cloudName || !uploadPreset) {\n      toast({ title: \"Cloudinary not configured\", variant: \"destructive\" });\n      return Promise.reject(\"Cloudinary not configured\");\n    }\n  \n    const tempId = uuidv4();\n    const isVideo = mediaFile.type.startsWith('video/');\n    const optimisticStory: Story = {\n      id: tempId,\n      ownerId: currentUser.uid,\n      mediaUrl: URL.createObjectURL(mediaFile),\n      mediaType: isVideo ? 'video' : 'image',\n      caption,\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 24*60*60*1000),\n      viewedBy: [],\n      reactions: [],\n    };\n    setStories(prev => [optimisticStory, ...prev]);\n  \n    let signal: { xhrAbort?: () => void } = {};\n    try {\n      const { secure_url, resource_type, duration } = await uploadToCloudinaryXHR(mediaFile, cloudName, uploadPreset, p => {\n        // optionally show story upload progress if you want\n      }, signal);\n      \n      const now = Timestamp.now();\n      const expiresAt = new Timestamp(now.seconds + 24*60*60, now.nanoseconds);\n      const storyData: Omit<Story, 'id'> = {\n        ownerId: currentUser.uid,\n        mediaUrl: secure_url,\n        mediaType: isVideo ? 'video' : 'image',\n        caption,\n        createdAt: now,\n        expiresAt,\n        viewedBy: [],\n        reactions: [],\n      }\n      if(isVideo && duration) {\n        storyData.duration = duration;\n      }\n\n      await addDoc(collection(db, 'stories'), storyData);\n      \n      toast({ title: \"Story posted!\" });\n    } catch (err) {\n      console.error(\"Error uploading story:\", err);\n      // remove optimistic story or mark failed\n      setStories(prev => prev.filter(s => s.id !== tempId));\n      toast({ title: \"Error\", description: \"Failed to post story.\", variant: \"destructive\" });\n      return Promise.reject(err);\n    }\n  }, [currentUser, toast]);\n\n\n  const handleViewStory = useCallback((user: User, stories: Story[]) => {\n      setViewingStory({ user, stories });\n  }, []);\n  \n  const handleStoryMarkAsViewed = useCallback(async (storyId: string) => {\n    if(!currentUser) return;\n    try {\n        await updateDoc(doc(db, 'stories', storyId), {\n            viewedBy: arrayUnion(currentUser.uid)\n        });\n    } catch (error) {\n        console.error(\"Failed to mark story as viewed\", error);\n    }\n  }, [currentUser]);\n\n  const handleDeleteStory = useCallback(async (storyId: string) => {\n    try {\n        await deleteDoc(doc(db, 'stories', storyId));\n        toast({ title: \"Story deleted\" });\n        setViewingStory(null); // Close the viewer\n    } catch (error) {\n        console.error(\"Error deleting story:\", error);\n        toast({ title: \"Error\", description: \"Failed to delete story.\", variant: \"destructive\" });\n    }\n  }, [toast]);\n  \n  const handleStoryReaction = useCallback(async (storyId: string, emoji: string) => {\n    if (!currentUser) return;\n    try {\n      const storyRef = doc(db, 'stories', storyId);\n      const reaction: StoryReaction = {\n        emoji,\n        userId: currentUser.uid,\n      };\n      await updateDoc(storyRef, {\n        reactions: arrayUnion(reaction)\n      });\n    } catch(error) {\n       console.error(\"Failed to add reaction to story\", error);\n    }\n  }, [currentUser]);\n\n\n  const activeSendMessage = useCallback((messageText: string, replyTo?: Message['replyTo']): Promise<string> => {\n    if (!selectedChat || !currentUser) return Promise.reject(\"No chat selected\");\n    if (selectedChat.id === AI_USER_ID) {\n      handleAiConversation(messageText);\n      return Promise.resolve(uuidv4()); // Return a dummy tempId\n    } else {\n      return handleSendMessage(selectedChat.id, currentUser.uid, messageText, replyTo);\n    }\n  }, [selectedChat, currentUser, handleAiConversation, handleSendMessage]);\n\n  const activeSendFile = useCallback((file: File, message: string): Promise<string> => {\n      if (!selectedChat || !currentUser) return Promise.reject(\"No chat selected\");\n      return handleFileUpload(file, message, selectedChat.id, currentUser.uid);\n  }, [selectedChat, currentUser, handleFileUpload]);\n\n  const activeSendBase64File = useCallback((base64: string, fileType: string, fileName: string, caption: string) => {\n      if (!selectedChat || !currentUser) return Promise.reject(\"No chat selected\");\n      return handleSendBase64File(selectedChat.id, currentUser.uid, base64, fileType, fileName, caption);\n  }, [selectedChat, currentUser, handleSendBase64File]);\n\n  const handleBack = useCallback(() => {\n    setSelectedChat(undefined);\n  }, []);\n\n  const handleTyping = useCallback(async (isTyping: boolean) => {\n    if (!selectedChat || !currentUser || selectedChat.id === AI_USER_ID) return;\n\n    const chatRef = doc(db, 'conversations', selectedChat.id);\n    try {\n      if (isTyping) {\n        await updateDoc(chatRef, {\n          typing: arrayUnion(currentUser.uid)\n        });\n      } else {\n        await updateDoc(chatRef, {\n          typing: arrayRemove(currentUser.uid)\n        });\n      }\n    } catch (error) {\n      console.error(\"Error updating typing status:\", error);\n    }\n  }, [selectedChat, currentUser]);\n  \n  const handleStoryReply = useCallback(async (story: Story, message: string) => {\n    if (!currentUser) return;\n    const storyOwnerId = story.ownerId;\n    const storyOwner = usersCache.get(storyOwnerId);\n    if (!storyOwner) return;\n\n    setViewingStory(null); // Close the viewer\n\n    let chatId: string;\n    const existingConvo = conversations.find(c => c.type === 'private' && c.participants.includes(storyOwnerId));\n    \n    if(existingConvo) {\n      chatId = existingConvo.id;\n      handleChatSelect(existingConvo.id);\n    } else {\n      chatId = await handleCreateChat(storyOwner);\n    }\n    \n    const replyTo: Message['replyTo'] = {\n        storyId: story.id,\n        storyMedia: story.mediaUrl,\n        messageSender: storyOwner.name,\n        messageText: 'Replied to story'\n    };\n    \n    handleSendMessage(chatId, currentUser.uid, message, replyTo);\n    \n    toast({ title: 'Reply Sent!' });\n\n  }, [currentUser, usersCache, conversations, handleCreateChat, handleSendMessage, toast, handleChatSelect]);\n\n  const usersWithStories = allUsers.filter(u => stories.some(s => s.ownerId === u.uid));\n  \n  const handleCreateStoryFromFile = async (file: File, caption: string) => {\n    return handleCreateStory(file, caption);\n  };\n\n  const handleClearChat = useCallback(async (conversationId: string) => {\n    const messagesRef = collection(db, 'conversations', conversationId, 'messages');\n    \n    try {\n      const querySnapshot = await getDocs(messagesRef);\n      if (querySnapshot.empty) return;\n  \n      // Firestore allows a maximum of 500 operations in a single batch.\n      const batchSize = 500;\n      let batch = writeBatch(db);\n      let count = 0;\n  \n      for (const messageDoc of querySnapshot.docs) {\n        batch.delete(messageDoc.ref);\n        count++;\n        if (count === batchSize) {\n          await batch.commit();\n          batch = writeBatch(db);\n          count = 0;\n        }\n      }\n  \n      if (count > 0) {\n        await batch.commit();\n      }\n\n      await updateDoc(doc(db, 'conversations', conversationId), {\n        lastMessage: null\n      });\n      \n      setMessages([]);\n\n      toast({ title: 'Chat Cleared', description: 'All messages have been deleted.' });\n\n    } catch (error) {\n      console.error(\"Error clearing chat:\", error);\n      toast({ title: 'Error', description: 'Could not clear chat history.', variant: 'destructive' });\n    }\n  }, [toast]);\n\n\n  return {\n    conversations,\n    selectedChat,\n    isAiReplying,\n    allUsers,\n    usersCache,\n    currentUser,\n    uploadProgress,\n    stories,\n    viewingStory,\n    setViewingStory,\n    usersWithStories,\n    previewStoryFile, \n    setPreviewStoryFile,\n    aiConversation,\n    messages,\n    loadMoreMessages,\n    hasMoreMessages,\n    isLoadingMore,\n    handleViewStory,\n    handleCreateStory,\n    handleStoryMarkAsViewed,\n    handleDeleteStory,\n    handleStoryReaction,\n    handleChatSelect,\n    activeSendMessage,\n    activeSendFile,\n    activeSendBase64File,\n    handleMessageAction,\n    cancelUpload,\n    handleCreateChat,\n    handleCreateGroupChat,\n    handleBack,\n    handleConversationAction,\n    handleTyping,\n    handleFriendAction,\n    handleBlockUser,\n    handleCreateStoryFromFile,\n    handleStoryReply,\n    handleMuteToggle,\n    handleClearChat,\n  }\n}\n\ntype AppShellContextType = ReturnType<typeof useChatData>;\n\nconst AppShellContext = createContext<AppShellContextType | undefined>(undefined);\n\nexport function useAppShell() {\n  const context = useContext(AppShellContext);\n  if (!context) {\n    throw new Error('useAppShell must be used within an AppShell provider');\n  }\n  return context;\n}\n\nfunction AppBackground() {\n  const { appBackground, useCustomBackground } = useAppearance();\n  const isMobile = useIsMobile();\n\n  if (!useCustomBackground) {\n    return <div className=\"absolute inset-0 bg-background\" />;\n  }\n\n  switch(appBackground) {\n    case 'galaxy':\n      return isMobile ? <MobileGalaxyBackground /> : <GalaxyBackground />;\n    case 'glow':\n      return <GradientGlowBackground />;\n    case 'aura':\n      return <AuraBackground />;\n    case 'grid':\n        return <GridBackground />;\n    default:\n      return <GalaxyBackground />;\n  }\n}\n\nexport function AppShell({ children }: { children: React.ReactNode }) {\n  const chatData = useChatData();\n  // DEBUG LOGGING\n  console.log('[AppShell Render] selectedChat:', chatData.selectedChat);\n  console.log('[AppShell Render] messages:', chatData.messages);\n  console.log('[AppShell Render] currentUser:', chatData.currentUser);\n  \n  return (\n    <AppShellContext.Provider value={chatData}>\n      <StoriesContext.Provider value={{\n        stories: chatData.stories,\n        usersWithStories: chatData.usersWithStories,\n        currentUser: chatData.currentUser,\n        onViewStory: chatData.handleViewStory,\n        onCreateStory: chatData.setPreviewStoryFile,\n        usersCache: chatData.usersCache,\n      }}>\n        <div className=\"relative\">\n          <AppBackground />\n          <div className=\"relative z-10\">\n            {children}\n          </div>\n        </div>\n\n        {chatData.previewStoryFile && (\n          <ImagePreviewDialog\n            file={chatData.previewStoryFile}\n            mode=\"story\"\n            onSend={chatData.handleCreateStoryFromFile}\n            onCancel={() => chatData.setPreviewStoryFile(null)}\n          />\n        )}\n        \n        {chatData.viewingStory && (\n            <StoryViewer \n                isOpen={!!chatData.viewingStory}\n                onOpenChange={(open) => !open && chatData.setViewingStory(null)}\n                user={chatData.viewingStory.user}\n                stories={chatData.viewingStory.stories}\n                currentUser={chatData.currentUser}\n                onMarkAsViewed={chatData.handleStoryMarkAsViewed}\n                onDeleteStory={chatData.handleDeleteStory}\n                onReply={chatData.handleStoryReply}\n                onReact={chatData.handleStoryReaction}\n                usersCache={chatData.usersCache}\n            />\n        )}\n      </StoriesContext.Provider>\n    </AppShellContext.Provider>\n  )\n}\n","size_bytes":48350},"src/components/aura-background.tsx":{"content":"\n'use client';\nimport React, { useRef, useEffect } from 'react';\n\nconst isReducedMotion = () =>\n  typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\nexport function AuraBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || isReducedMotion()) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const dpr = window.devicePixelRatio || 1;\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    ctx.scale(dpr, dpr);\n\n    const orbs = Array.from({ length: 5 }, () => ({\n      x: Math.random() * width,\n      y: Math.random() * height,\n      radius: Math.random() * 200 + 150,\n      color: `hsla(${Math.random() * 60 + 240}, 50%, 50%, 0.1)`,\n      vx: (Math.random() - 0.5) * 0.2,\n      vy: (Math.random() - 0.5) * 0.2,\n    }));\n\n    let animationFrameId: number;\n\n    const animate = () => {\n      ctx.clearRect(0, 0, width, height);\n\n      orbs.forEach(orb => {\n        orb.x += orb.vx;\n        orb.y += orb.vy;\n\n        if (orb.x - orb.radius < 0 || orb.x + orb.radius > width) orb.vx *= -1;\n        if (orb.y - orb.radius < 0 || orb.y + orb.radius > height) orb.vy *= -1;\n\n        const gradient = ctx.createRadialGradient(orb.x, orb.y, 0, orb.x, orb.y, orb.radius);\n        gradient.addColorStop(0, orb.color);\n        gradient.addColorStop(1, 'transparent');\n        ctx.fillStyle = gradient;\n        ctx.filter = 'blur(80px)';\n        ctx.beginPath();\n        ctx.arc(orb.x, orb.y, orb.radius, 0, Math.PI * 2);\n        ctx.fill();\n      });\n\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    const handleResize = () => {\n        width = window.innerWidth;\n        height = window.innerHeight;\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        ctx.scale(dpr, dpr);\n    }\n    \n    window.addEventListener('resize', handleResize);\n    animate();\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  if (isReducedMotion()) {\n    return <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', zIndex: -1, backgroundColor: '#020205' }} />;\n  }\n\n\n  return <canvas ref={canvasRef} style={{ position: 'fixed', top: 0, left: 0, zIndex: -1, width: '100vw', height: '100vh', backgroundColor: '#020205' }} />;\n}\n","size_bytes":2520},"src/components/chat-layout.tsx":{"content":"\n'use client';\n\nimport { useMobileDesign } from './providers/mobile-provider';\nimport { DesktopChatLayout } from './desktop-chat-layout';\nimport { MobileChatLayout } from './mobile-chat-layout';\nimport { SidebarProvider } from './ui/sidebar';\n\nexport function ChatLayout() {\n  const { isMobileView } = useMobileDesign();\n\n  return (\n    <SidebarProvider>\n      {isMobileView ? <MobileChatLayout /> : <DesktopChatLayout />}\n    </SidebarProvider>\n  );\n}\n","size_bytes":453},"src/components/chat-list.tsx":{"content":"\n\n'use client';\nimport { Search, LogOut, Plus, Settings, Star, MoreHorizontal, Bot, Archive, ArchiveRestore, UserPlus, UserCheck, UserX, GalleryHorizontal, Moon, Sun } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Button } from '@/components/ui/button';\nimport type { Conversation, User } from '@/lib/types';\nimport { UserAvatar } from './user-avatar';\nimport { cn } from '@/lib/utils';\nimport { VibezLogo } from './vibez-logo';\nimport { NewChatDialog } from './new-chat-dialog';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from './ui/dropdown-menu';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { WeatherWidget } from './weather-widget';\nimport { useAppearance } from './providers/appearance-provider';\nimport { Popover, PopoverContent, PopoverTrigger } from './ui/popover';\nimport { Separator } from './ui/separator';\nimport { useTheme } from 'next-themes';\nimport { GlassCard } from './ui/cards/GlassCard';\nimport { doc, getDoc, updateDoc, arrayRemove, collection, deleteDoc, getDocs } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAppShell } from './app-shell';\n\nconst listVariants = {\n    initial: { opacity: 0 },\n    animate: { \n        opacity: 1,\n        transition: {\n            staggerChildren: 0.05,\n        }\n    },\n    exit: { opacity: 0 }\n};\n\nconst itemVariants = {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, x: -20 },\n};\n\nfunction UserProfileMenu({ currentUser }: { currentUser?: User }) {\n    const { signOut } = useAuth();\n    const router = useRouter();\n    const { theme, setTheme } = useTheme();\n    const { toast } = useToast();\n\n    if (!currentUser) return null;\n\n    const hasFriendRequests = currentUser.friendRequestsReceived && currentUser.friendRequestsReceived.length > 0;\n\n    const handleLogout = async () => {\n        const deviceId = localStorage.getItem('deviceId');\n        if (deviceId && currentUser) {\n            try {\n                // Delete the per-device document from the devices subcollection\n                const deviceDocRef = doc(db, 'users', currentUser.uid, 'devices', deviceId);\n                await deleteDoc(deviceDocRef);\n\n                // Recalculate remaining device docs to determine online/offline\n                const devicesCol = collection(db, 'users', currentUser.uid, 'devices');\n                const snapshots = await getDocs(devicesCol);\n                const remaining = snapshots.docs.length;\n\n                const userDocRef = doc(db, 'users', currentUser.uid);\n                await updateDoc(userDocRef, {\n                    status: remaining > 0 ? 'online' : 'offline',\n                });\n            } catch (error) {\n                console.error(\"Error removing device doc on logout:\", error);\n                toast({\n                    title: \"Logout Error\",\n                    description: \"Could not update your device status, but you will be logged out.\",\n                    variant: \"destructive\"\n                });\n            }\n        }\n        await signOut();\n        router.push('/login');\n    };\n\n    return (\n        <Popover>\n            <PopoverTrigger asChild>\n                <div className=\"group/user-menu relative flex w-full cursor-pointer items-center justify-between p-2 transition-colors hover:bg-muted/50 rounded-lg\">\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                        <UserAvatar user={currentUser} className=\"h-10 w-10\" />\n                        <div className=\"overflow-hidden group-[[data-sidebar-state=collapsed]]/sidebar:hidden flex-1\">\n                            <p className=\"font-semibold truncate\">{currentUser.name}</p>\n                            <p className=\"text-sm text-muted-foreground truncate\">{currentUser.email}</p>\n                        </div>\n                    </div>\n                     <div className=\"group-[[data-sidebar-state=collapsed]]/sidebar:hidden relative\">\n                        <MoreHorizontal className=\"h-5 w-5 text-muted-foreground\" />\n                         {hasFriendRequests && (\n                            <span className=\"absolute -top-1 -right-1 h-2.5 w-2.5 rounded-full bg-green-500 border-2 border-background\" />\n                        )}\n                    </div>\n                </div>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-64 p-2 rounded-xl shadow-lg border backdrop-blur-xl bg-background/80 mb-2\" side=\"top\" align=\"start\">\n                <div className=\"p-2\">\n                    <p className=\"font-semibold truncate\">{currentUser.name}</p>\n                    <p className=\"text-sm text-muted-foreground truncate\">{currentUser.email}</p>\n                </div>\n                <Separator />\n                <div className=\"p-1 space-y-1\">\n                    <Button variant=\"ghost\" className=\"w-full justify-start relative\" asChild>\n                        <Link href=\"/friends\">\n                            <UserPlus />\n                            <span>Friends</span>\n                            {hasFriendRequests && (\n                                <span className=\"absolute right-2 h-2 w-2 rounded-full bg-green-500\" />\n                            )}\n                        </Link>\n                    </Button>\n                    <Button variant=\"ghost\" className=\"w-full justify-start\" onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}>\n                        {theme === 'dark' ? <Sun /> : <Moon />}\n                        <span>{theme === 'dark' ? 'Light Mode' : 'Dark Mode'}</span>\n                    </Button>\n                    <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                        <Link href=\"/settings\">\n                            <Settings />\n                            <span>Settings</span>\n                        </Link>\n                    </Button>\n                </div>\n                <Separator />\n                <div className=\"p-1\">\n                     <Button variant=\"ghost\" className=\"w-full justify-start text-destructive hover:text-destructive\" onClick={handleLogout}>\n                        <LogOut />\n                        <span>Log Out</span>\n                    </Button>\n                </div>\n            </PopoverContent>\n        </Popover>\n    )\n}\n\nexport function ChatList() {\n  const {\n    conversations,\n    aiConversation,\n    selectedChat,\n    handleChatSelect,\n    allUsers,\n    handleCreateChat,\n    handleCreateGroupChat,\n    currentUser,\n    handleConversationAction,\n    handleFriendAction,\n  } = useAppShell();\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const { isWeatherVisible } = useAppearance();\n\n  const filteredConversations = useMemo(() => {\n    const blockedUserIds = currentUser?.blockedUsers || [];\n    if (!conversations) return [];\n    return conversations.filter(convo => {\n      const isBlocked = convo.type === 'private' && convo.participants.some(p => blockedUserIds.includes(p));\n      return !isBlocked && convo.name?.toLowerCase().includes(searchTerm.toLowerCase());\n    });\n  }, [conversations, searchTerm, currentUser]);\n  \n  const activeChats = useMemo(() => filteredConversations.filter(c => !c.isArchived), [filteredConversations]);\n  const archivedChats = useMemo(() => filteredConversations.filter(c => c.isArchived), [filteredConversations]);\n\n  const favoriteChats = useMemo(() => activeChats.filter(c => c.isFavorite), [activeChats]);\n  const unreadChats = useMemo(() => activeChats.filter(c => c.unreadCount && c.unreadCount > 0 && !c.isFavorite), [activeChats]);\n  const regularChats = useMemo(() => activeChats.filter(c => !c.isFavorite && (!c.unreadCount || c.unreadCount === 0)), [activeChats]);\n\n  const usersForNewChat = allUsers.filter(u => u.uid !== currentUser?.uid && !(currentUser?.blockedUsers || []).includes(u.uid));\n\n  const shouldShowAiChat = useMemo(() => {\n    return aiConversation.name?.toLowerCase().includes(searchTerm.toLowerCase());\n  }, [aiConversation, searchTerm]);\n\n  return (\n    <>\n    <div className=\"flex flex-col h-full w-full max-w-[22rem] min-w-0 overflow-x-hidden bg-transparent\" style={{boxSizing: 'border-box'}}>\n    <div className=\"flex-none p-4 border-b border-border/50 flex justify-between items-center gap-2\">\n         <VibezLogo className=\"group-[[data-sidebar-state=collapsed]]/sidebar:hidden\" />\n         <div className=\"flex-1 flex justify-center group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">\n            {isWeatherVisible && <WeatherWidget />}\n         </div>\n         <NewChatDialog \n            users={usersForNewChat}\n            onCreateChat={handleCreateChat}\n            onCreateGroupChat={handleCreateGroupChat}\n            currentUser={currentUser}\n         >\n            <Button variant=\"ghost\" size=\"icon\">\n                <Plus className=\"h-5 w-5\" />\n                <span className=\"sr-only\">New Chat</span>\n            </Button>\n         </NewChatDialog>\n       </div>\n\n    <div className=\"flex-none px-4 py-2 border-b border-border/50\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input \n            placeholder=\"Search...\" \n            className=\"pl-10 bg-background/50 group-[[data-sidebar-state=collapsed]]/sidebar:hidden\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n           <div className=\"hidden group-[[data-sidebar-state=collapsed]]/sidebar:flex items-center justify-center\">\n             <Button variant=\"ghost\" size=\"icon\">\n                <Search className=\"h-5 w-5\" />\n             </Button>\n           </div>\n        </div>\n         <div className=\"mt-2 group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">\n            <Button asChild variant=\"outline\" className=\"w-full justify-start\">\n                <Link href=\"/stories\">\n                    <GalleryHorizontal className=\"mr-2 h-5 w-5\" />\n                    Stories\n                </Link>\n            </Button>\n        </div>\n      </div>\n      \n            <ScrollArea className=\"flex-1 overflow-y-auto\">\n                <div className=\"flex flex-col gap-1 p-2 w-full overflow-hidden\">\n            <div className=\"space-y-4\">\n            {favoriteChats.length > 0 && (\n                <div>\n                <h2 className=\"text-xs font-semibold text-muted-foreground px-2 pt-2 pb-1 uppercase tracking-wider group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">Favorites</h2>\n                <motion.ul \n                    className=\"space-y-1\"\n                    variants={listVariants}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                >\n                    {favoriteChats.map((convo) => (\n                    <ChatItem\n                        key={convo.id}\n                        conversation={convo}\n                        isSelected={selectedChat?.id === convo.id}\n                        currentUser={currentUser}\n                        onSelect={() => handleChatSelect(convo.id)}\n                        onAction={handleConversationAction}\n                        onFriendAction={handleFriendAction}\n                    />\n                    ))}\n                </motion.ul>\n                </div>\n            )}\n            {unreadChats.length > 0 && (\n                <div>\n                <h2 className=\"text-xs font-semibold text-muted-foreground px-2 pt-2 pb-1 uppercase tracking-wider group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">Unread</h2>\n                <motion.ul \n                    className=\"space-y-1\"\n                    variants={listVariants}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                >\n                    {unreadChats.map((convo) => (\n                    <ChatItem\n                        key={convo.id}\n                        conversation={convo}\n                        isSelected={selectedChat?.id === convo.id}\n                        currentUser={currentUser}\n                        onSelect={() => handleChatSelect(convo.id)}\n                        onAction={handleConversationAction}\n                        onFriendAction={handleFriendAction}\n                    />\n                    ))}\n                </motion.ul>\n                </div>\n            )}\n                <div>\n                <h2 className=\"text-xs font-semibold text-muted-foreground px-2 pt-2 pb-1 uppercase tracking-wider group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">Chats</h2>\n                <motion.ul \n                    className=\"space-y-1\"\n                    variants={listVariants}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                >\n                    {regularChats.map((convo) => (\n                    <ChatItem\n                        key={convo.id}\n                        conversation={convo}\n                        isSelected={selectedChat?.id === convo.id}\n                        currentUser={currentUser}\n                        onSelect={() => handleChatSelect(convo.id)}\n                        onAction={handleConversationAction}\n                        onFriendAction={handleFriendAction}\n                    />\n                    ))}\n                </motion.ul>\n            </div>\n\n            {regularChats.length === 0 && unreadChats.length === 0 && favoriteChats.length === 0 && (\n                <p className=\"p-4 text-center text-muted-foreground group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">No user chats yet.</p>\n            )}\n            \n            {shouldShowAiChat && (\n                <div>\n                    <h2 className=\"text-xs font-semibold text-muted-foreground px-2 pt-2 pb-1 uppercase tracking-wider group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">AI Assistant</h2>\n                    <ChatItem\n                        conversation={aiConversation}\n                        isSelected={selectedChat?.id === aiConversation.id}\n                        currentUser={currentUser}\n                        onSelect={() => handleChatSelect(aiConversation.id)}\n                        onAction={handleConversationAction}\n                        onFriendAction={handleFriendAction}\n                    />\n                </div>\n            )}\n\n            {archivedChats.length > 0 && (\n                    <div className=\"px-2 group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">\n                    <Accordion type=\"single\" collapsible className=\"w-full\">\n                        <AccordionItem value=\"archived\" className=\"border-b-0\">\n                            <AccordionTrigger className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider hover:no-underline py-2\">\n                                Archived\n                            </AccordionTrigger>\n                            <AccordionContent>\n                                <motion.ul \n                                    className=\"space-y-1\"\n                                    variants={listVariants}\n                                    initial=\"initial\"\n                                    animate=\"animate\"\n                                    exit=\"exit\"\n                                >\n                                    {archivedChats.map((convo) => (\n                                    <ChatItem\n                                        key={convo.id}\n                                        conversation={convo}\n                                        isSelected={selectedChat?.id === convo.id}\n                                        currentUser={currentUser}\n                                        onSelect={() => handleChatSelect(convo.id)}\n                                        onAction={handleConversationAction}\n                                        onFriendAction={handleFriendAction}\n                                    />\n                                    ))}\n                                </motion.ul>\n                            </AccordionContent>\n                        </AccordionItem>\n                    </Accordion>\n                </div>\n            )}\n            </div>\n        </div>\n      </ScrollArea>\n\n    <div className=\"flex-none p-2 border-t border-border/50\">\n            <UserProfileMenu currentUser={currentUser} />\n        </div>\n    </div>\n    </>\n  );\n}\n\ninterface ChatItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  currentUser?: User;\n  onSelect: () => void;\n  onAction: (conversationId: string, action: 'toggleFavorite' | 'archive' | 'unarchive') => void;\n  onFriendAction: (targetUserId: string, action: 'sendRequest' | 'acceptRequest' | 'declineRequest' | 'removeFriend') => void;\n}\n\nfunction ChatItem({ conversation, isSelected, currentUser, onSelect, onAction, onFriendAction }: ChatItemProps) {\n  const lastMessage = (convo: Conversation) => {\n    if(convo.lastMessage) {\n        const timestamp = convo.lastMessage.timestamp;\n        let date;\n        if (timestamp?.seconds) {\n            date = new Date(timestamp.seconds * 1000);\n        } else if (timestamp instanceof Date) {\n            date = timestamp;\n        }\n\n        return {\n            text: convo.lastMessage.text,\n            timestamp: date ? date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '',\n        }\n    }\n    return { text: 'No messages yet', timestamp: '' };\n  }\n\n  const { text, timestamp } = lastMessage(conversation);\n  \n  const handleAction = (action: 'toggleFavorite' | 'archive' | 'unarchive') => {\n    onAction(conversation.id, action);\n  }\n  \n  const handleFriendRequest = () => {\n    const otherParticipant = conversation.participantsDetails?.find(p => p.uid !== currentUser?.uid);\n    if(otherParticipant) {\n        onFriendAction(otherParticipant.uid, 'sendRequest');\n    }\n  }\n\n  const otherParticipant = conversation.participantsDetails?.find(p => p.uid !== currentUser?.uid);\n  const isFriend = currentUser?.friends?.includes(otherParticipant?.uid || '');\n  const hasSentRequest = currentUser?.friendRequestsSent?.includes(otherParticipant?.uid || '');\n  const hasReceivedRequest = currentUser?.friendRequestsReceived?.includes(otherParticipant?.uid || '');\n  const isAiChat = conversation.id === 'gemini-ai-chat-bot-7a4b9c1d-f2e3-4d56-a1b2-c3d4e5f6a7b8';\n  \n  const canSendRequest = conversation.type === 'private' && !isFriend && !hasSentRequest && !hasReceivedRequest && !isAiChat;\n  \n  const ContextMenuContent = ({ children }: { children: React.ReactNode }) => (\n    <DropdownMenuContent onClick={(e) => e.stopPropagation()} className=\"shadow-lg backdrop-blur-xl bg-background/80\">\n        {children}\n    </DropdownMenuContent>\n  );\n\n  return (\n     <motion.li\n        variants={itemVariants}\n        layout\n        className=\"list-none w-full max-w-full min-w-0 overflow-x-hidden\"\n    >\n            <GlassCard\n                onClick={onSelect}\n                className={cn(\n                    'relative group/chat-item flex w-full max-w-full min-w-0 items-center gap-3 p-3 text-left transition-all cursor-pointer overflow-x-hidden',\n                    isSelected ? 'bg-primary/20 border-primary/50' : 'hover:bg-muted/10'\n                )}\n            >\n        <UserAvatar \n            user={{\n                name: conversation.name || 'Unknown',\n                photoURL: conversation.avatar || '',\n            }} \n            isFriend={isFriend}\n            className=\"h-12 w-12 flex-shrink-0\"\n        />\n        <div className=\"flex-1 min-w-0 max-w-full overflow-hidden group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">\n            <div className=\"flex justify-between items-baseline min-w-0 max-w-full\">\n                <div className=\"flex items-center gap-2 min-w-0 max-w-full\">\n                    <p className=\"font-semibold truncate flex-grow min-w-0 max-w-full overflow-hidden whitespace-nowrap\">{conversation.name}</p>\n                    {conversation.isFavorite && !isAiChat && <Star className=\"h-4 w-4 text-yellow-500 fill-yellow-500\" />}\n                    {isAiChat && <Bot className=\"h-4 w-4 text-primary\" />}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                    <p className=\"text-xs text-muted-foreground flex-shrink-0\">{timestamp}</p>\n                </div>\n            </div>\n            <div className=\"flex justify-between items-start gap-2 min-w-0 max-w-full\">\n                    <p className=\"text-sm text-muted-foreground line-clamp-1 break-words overflow-hidden min-w-0 max-w-full chat-list-force-break\">\n                    {text}\n                </p>\n                {conversation.unreadCount && conversation.unreadCount > 0 ? (\n                    <span className=\"flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs text-primary-foreground shrink-0\">\n                        {conversation.unreadCount}\n                    </span>\n                ) : null}\n            </div>\n        </div>\n        <div className=\"absolute right-1 top-1/2 -translate-y-1/2 group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 hover:bg-background/50 hover:backdrop-blur-sm\" onClick={(e) => e.stopPropagation()}>\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                {!isAiChat && (\n                  <ContextMenuContent>\n                      {canSendRequest && <DropdownMenuItem onClick={handleFriendRequest}><UserPlus className=\"mr-2 h-4 w-4\" /><span>Add Friend</span></DropdownMenuItem>}\n                      {isFriend && <DropdownMenuItem disabled><UserCheck className=\"mr-2 h-4 w-4\" /><span>Friends</span></DropdownMenuItem>}\n                      {hasSentRequest && <DropdownMenuItem disabled><UserCheck className=\"mr-2 h-4 w-4\" /><span>Request Sent</span></DropdownMenuItem>}\n                      {hasReceivedRequest && <DropdownMenuItem onClick={() => { if (otherParticipant) onFriendAction(otherParticipant.uid, 'acceptRequest'); }}><UserPlus className=\"mr-2 h-4 w-4\" /><span>Accept Request</span></DropdownMenuItem>}\n                      <DropdownMenuItem onClick={() => handleAction('toggleFavorite')}><Star className=\"mr-2 h-4 w-4\" /><span>{conversation.isFavorite ? 'Unfavorite' : 'Favorite'}</span></DropdownMenuItem>\n                      {conversation.isArchived ? <DropdownMenuItem onClick={() => handleAction('unarchive')}><ArchiveRestore className=\"mr-2 h-4 w-4\" /><span>Unarchive</span></DropdownMenuItem> : <DropdownMenuItem onClick={() => handleAction('archive')}><Archive className=\"mr-2 h-4 w-4\" /><span>Archive</span></DropdownMenuItem>}\n                      {isFriend && <DropdownMenuItem className=\"text-destructive\" onClick={() => { if(otherParticipant) onFriendAction(otherParticipant.uid, 'removeFriend'); }}><UserX className=\"mr-2 h-4 w-4\" /><span>Remove Friend</span></DropdownMenuItem>}\n                  </ContextMenuContent>\n                )}\n            </DropdownMenu>\n        </div>\n      </GlassCard>\n    </motion.li>\n  );\n}\n","size_bytes":23722},"src/components/chat-view.tsx":{"content":"\n'use client';\nimport type { Conversation as ConversationType, User, Message as MessageType } from '@/lib/types';\nimport { MoreVertical, Phone, Video, Bot, X, Reply, ArrowLeft, Trash2, ArrowDown } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { UserAvatar } from './user-avatar';\nimport { MessageInput } from './message-input';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator\n} from './ui/dropdown-menu';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport React, { useState, useMemo, memo, useCallback, useEffect, useRef, useLayoutEffect } from 'react';\nimport { cn } from '@/lib/utils';\nimport { UserProfileSheet } from './user-profile-sheet';\nimport { SidebarTrigger } from './ui/sidebar';\nimport { useAppearance } from './providers/appearance-provider';\nimport Image from 'next/image';\nimport { ImagePreviewDialog } from './image-preview-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { GroupProfileSheet } from './group-profile-sheet';\nimport { useMobileDesign } from './providers/mobile-provider';\nimport { MessageList } from './message-list';\nimport { RightPaneBackground } from './right-pane-background';\nimport { Timestamp } from 'firebase/firestore';\nimport { useAppShell } from './app-shell';\n\nconst AI_USER_ID = 'gemini-ai-chat-bot-7a4b9c1d-f2e3-4d56-a1b2-c3d4e5f6a7b8';\n\ninterface ChatViewProps {\n  chat: ConversationType | undefined;\n  isAiReplying: boolean;\n  currentUser: User | undefined;\n  onBack?: () => void;\n  messages: MessageType[];\n  loadMoreMessages: () => Promise<void>;\n  hasMoreMessages: boolean;\n  isLoadingMore: boolean;\n}\n\nconst ChatViewComponent = ({ \n    chat, \n    isAiReplying, \n    currentUser, \n    onBack,\n    messages,\n    loadMoreMessages,\n    hasMoreMessages,\n    isLoadingMore\n}: ChatViewProps) => {\n  const { toast } = useToast();\n  const [isProfileSheetOpen, setIsProfileSheetOpen] = useState(false);\n  const [replyToMessage, setReplyToMessage] = useState<MessageType | null>(null);\n  const { chatBackground } = useAppearance();\n  const { isMobileView } = useMobileDesign();\n  const [previewFile, setPreviewFile] = useState<File | null>(null);\n  const messageListRef = useRef<HTMLDivElement>(null);\n  const [isAtBottom, setIsAtBottom] = useState(true);\n  const [newMessagesCount, setNewMessagesCount] = useState(0);\n  const prevMessagesLength = useRef(messages.length);\n\n  const {\n    usersCache,\n    uploadProgress,\n    cancelUpload,\n    activeSendMessage,\n    activeSendFile,\n    handleMessageAction,\n    handleTyping,\n    handleFriendAction,\n    handleBlockUser,\n    handleMuteToggle,\n    handleClearChat,\n  } = useAppShell();\n  \n  const otherParticipant = useMemo(() => {\n    if (!chat || !currentUser || chat.type !== 'private') return undefined;\n    const otherId = chat.participants.find(p => p !== currentUser.uid);\n    return usersCache.get(otherId || '');\n  }, [chat, currentUser, usersCache]);\n\n  const typingUsers = useMemo(() => {\n    if (!chat?.typing || !currentUser) return [];\n    return chat.typing\n      .filter(uid => uid !== currentUser.uid)\n      .map(uid => usersCache.get(uid)?.name)\n      .filter(Boolean) as string[];\n  }, [chat?.typing, currentUser, usersCache]);\n\n  const onReply = useCallback((message: MessageType) => {\n    setReplyToMessage(message);\n  }, []);\n\n  useEffect(() => {\n    if (!chat || !currentUser) {\n      return;\n    }\n    const messageList = messageListRef.current;\n    if (messageList) {\n        const handleScroll = () => {\n            const { scrollTop, scrollHeight, clientHeight } = messageList;\n            const atBottom = scrollHeight - scrollTop - clientHeight < 100;\n            setIsAtBottom(atBottom);\n            if (atBottom) {\n                setNewMessagesCount(0);\n            }\n        };\n        messageList.addEventListener('scroll', handleScroll);\n        return () => messageList.removeEventListener('scroll', handleScroll);\n    }\n  }, [chat, currentUser, messageListRef]);\n\n\n  useLayoutEffect(() => {\n    if (!chat || !currentUser) {\n      return;\n    }\n    const newMessagesAdded = messages.length > prevMessagesLength.current;\n\n    if (newMessagesAdded && isAtBottom) {\n        scrollToBottom();\n    } else if (newMessagesAdded && !isAtBottom) {\n        setNewMessagesCount(prev => prev + 1);\n    }\n    \n    prevMessagesLength.current = messages.length;\n}, [messages, isAtBottom, chat, currentUser]);\n  \n  const handleFileSelect = async (file: File) => {\n    const isImage = file.type.startsWith(\"image/\");\n    const isVideo = file.type.startsWith(\"video/\");\n  \n    try {\n      if (isImage) {\n        setPreviewFile(file);\n      } else if (isVideo) {\n        // Send video directly to Cloudinary flow\n        await activeSendFile(file, \"\");\n      } else {\n        // Other files like audio, docs etc.\n        await activeSendFile(file, \"\");\n      }\n    } catch (error) {\n      console.error(\"Error handling file:\", error);\n      toast({\n        title: \"File Error\",\n        description: \"Could not process the selected file.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const handleSendFile = async (file: File, message: string) => {\n    try {\n        await activeSendFile(file, message);\n    } catch (error) {\n        toast({\n            title: \"Upload Failed\",\n            description: \"There was a problem sending your file.\",\n            variant: \"destructive\",\n        });\n    }\n    setPreviewFile(null);\n  };\n\n\n  const handleSendMessageWithReply = async (messageText: string) => {\n    if (!messageText.trim()) return;\n    \n    try {\n        await activeSendMessage(messageText, replyToMessage?.replyTo || (replyToMessage ? {\n            messageId: replyToMessage.id,\n            messageText: replyToMessage.text || (replyToMessage.file ? 'Attachment' : ''),\n            messageSender: usersCache.get(replyToMessage.senderId)?.name || 'Unknown User'\n        } : undefined));\n        setReplyToMessage(null); // Clear reply state after sending\n    } catch (e) {\n      toast({\n          title: 'Error Sending Message',\n          description: 'Could not send your message. Please try again.',\n          variant: 'destructive',\n      });\n    }\n  };\n\n  const handleSendGif = (base64: string, fileType: string, fileName: string, caption: string) => {\n      activeSendFile(\n        new File([Buffer.from(base64.split(',')[1], 'base64')], fileName, { type: fileType }),\n        caption\n      );\n  }\n\n\n  const getStatusText = () => {\n    if (isAiReplying) return 'typing...';\n    if (typingUsers.length > 0) {\n      if (typingUsers.length === 1) {\n        return `${typingUsers[0]} is typing...`;\n      }\n      if (typingUsers.length === 2) {\n        return `${typingUsers[0]} and ${typingUsers[1]} are typing...`;\n      }\n      return 'several people are typing...';\n    }\n    if (isAIChat) return 'Online';\n    if (chat?.type === 'group') {\n      const uniqueParticipants = new Set(chat.participants);\n      return `${uniqueParticipants.size} members`;\n    }\n    return otherParticipant?.status;\n  };\n\n  const scrollToBottom = () => {\n    if (messageListRef.current) {\n        requestAnimationFrame(() => {\n            if (messageListRef.current) {\n                messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n            }\n        });\n    }\n    setNewMessagesCount(0);\n  }\n\n  if (!chat || !currentUser) {\n    return (\n        <div className=\"flex h-full flex-1 flex-col items-center justify-center text-muted-foreground bg-transparent\">\n             <RightPaneBackground />\n             <div className=\"text-center p-8 z-10\">\n                <h2 className=\"text-2xl font-bold font-heading\">\n                    Welcome to{' '}\n                    <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-gradient-from to-gradient-to animated-gradient\">\n                        Vibez\n                    </span>\n                </h2>\n                <p className=\"mt-2\">Select a chat to start messaging</p>\n             </div>\n        </div>\n    )\n  }\n  \n  const isAIChat = chat.id === AI_USER_ID;\n  const isGroupChat = chat.type === 'group';\n  \n  const participantForProfile = isAIChat ? usersCache.get(AI_USER_ID) : otherParticipant;\n\n  const displayName = chat.name;\n  const displayAvatar = chat.avatar;\n  const displayStatus = getStatusText();\n\n  const headerAvatarUser = isGroupChat ? { \n    name: displayName, \n    photoURL: displayAvatar \n  } : (participantForProfile || { \n    name: displayName, \n    photoURL: displayAvatar \n  });\n\n\n  return (\n    <div className=\"flex h-full w-full flex-col bg-transparent\">\n      <header className=\"flex items-center justify-between border-b border-border/50 bg-card/80 backdrop-blur-xl p-2 sm:p-4 shrink-0 z-10\">\n        <div className=\"flex items-center gap-3\">\n            {isMobileView && onBack ? (\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-10 w-10\" onClick={onBack}>\n                <ArrowLeft className=\"h-6 w-6\" />\n              </Button>\n            ) : (\n               <SidebarTrigger className=\"md:hidden\" />\n            )}\n          <button \n            className=\"flex items-center gap-3 text-left disabled:cursor-default\"\n            onClick={() => setIsProfileSheetOpen(true)}\n            disabled={!participantForProfile && !isGroupChat}\n          >\n            <UserAvatar user={headerAvatarUser} className=\"h-10 w-10\"/>\n            <div>\n              <p className=\"font-semibold font-heading\">{displayName}</p>\n              <p className=\"text-sm text-muted-foreground capitalize flex items-center gap-1\">\n                  {isAIChat && !isAiReplying && <Bot className=\"h-3 w-3\" />}\n                  {displayStatus}\n              </p>\n            </div>\n          </button>\n        </div>\n        <div className={cn(\"flex items-center\", isAIChat && \"hidden\")}>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                    <MoreVertical className=\"h-5 w-5\" />\n                    <span className=\"sr-only\">More options</span>\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => setIsProfileSheetOpen(true)}>\n                    View Profile\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <AlertDialog>\n                  <AlertDialogTrigger asChild>\n                    <DropdownMenuItem\n                      onSelect={(e) => e.preventDefault()}\n                      className=\"text-destructive\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Clear Chat\n                    </DropdownMenuItem>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        This will permanently delete all messages in this conversation. This action cannot be undone.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={() => handleClearChat(chat.id)}\n                        className=\"bg-destructive hover:bg-destructive/90\"\n                      >\n                        Clear Chat\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </header>\n\n      {/* FIXED THIS WRAPPER: Changed h-full to flex-1 and added relative */}\n      <div className=\"flex flex-1 flex-col min-h-0 relative\">\n        <div className=\"flex-1 min-h-0 overflow-y-auto relative\">\n         {chatBackground && (\n          <div className=\"absolute inset-0 opacity-20 dark:opacity-10\">\n             {chatBackground && !chatBackground.startsWith('data:image') && (\n                <Image \n                    src={chatBackground}\n                    fill\n                    style={{objectFit:\"cover\"}}\n                    alt=\"Chat background\"\n                />\n            )}\n             {chatBackground && chatBackground.startsWith('data:image') && (\n                <div style={{ backgroundImage: `url(${chatBackground})`}} className=\"h-full w-full bg-cover bg-center\" />\n             )}\n          </div>\n        )}\n      <MessageList \n        messages={messages}\n        currentUser={currentUser}\n        usersCache={usersCache}\n        uploadProgress={uploadProgress}\n        onCancelUpload={cancelUpload}\n        onMessageAction={handleMessageAction}\n        onReply={onReply}\n        isAiReplying={isAiReplying}\n        otherParticipantLastRead={chat.otherParticipantLastRead}\n        onLoadMore={loadMoreMessages}\n        hasMore={hasMoreMessages}\n        isLoadingMore={isLoadingMore}\n        ref={messageListRef}\n        chatId={chat.id}\n      />\n      {newMessagesCount > 0 && (\n        <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 z-20\">\n          <Button onClick={scrollToBottom} className=\"rounded-full shadow-lg\">\n            <ArrowDown className=\"mr-2 h-4 w-4\"/>\n            {newMessagesCount} New Message{newMessagesCount > 1 && 's'}\n          </Button>\n        </div>\n      )}\n    </div>\n    <div className=\"sticky bottom-0 left-0 w-full bg-background z-10\">\n      {replyToMessage && (\n        <div className=\"p-2 px-4 border-t border-border/50 bg-background/50 flex justify-between items-center\">\n          <div className=\"flex items-center gap-2\">\n            <Reply className=\"h-4 w-4 text-muted-foreground\" />\n            <div className=\"text-sm\">\n              <p className=\"font-semibold\">{replyToMessage.senderId === currentUser.uid ? \"You\" : usersCache.get(replyToMessage.senderId)?.name}</p>\n              <p className=\"text-muted-foreground truncate max-w-xs\">{replyToMessage.text}</p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => setReplyToMessage(null)}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      )}\n      <MessageInput\n        onSendMessage={handleSendMessageWithReply}\n        onFileSelect={handleFileSelect}\n        onGifSelect={handleSendGif}\n        onTyping={handleTyping}\n        isAiChat={isAIChat}\n      />\n    </div>\n  </div>\n      \n      {isGroupChat ? (\n          <GroupProfileSheet \n            chat={chat}\n            currentUser={currentUser}\n            isOpen={isProfileSheetOpen}\n            onOpenChange={setIsProfileSheetOpen}\n            usersCache={usersCache}\n          />\n      ) : participantForProfile ? (\n        <UserProfileSheet\n          user={participantForProfile}\n          currentUser={currentUser}\n          chatId={chat.id}\n          isOpen={isProfileSheetOpen}\n          onOpenChange={setIsProfileSheetOpen}\n          onFriendAction={handleFriendAction}\n          onBlockUser={handleBlockUser}\n          onMuteToggle={handleMuteToggle}\n        />\n      ) : null}\n\n\n      {previewFile && (\n        <ImagePreviewDialog\n            file={previewFile}\n            onSend={handleSendFile}\n            onCancel={() => setPreviewFile(null)}\n            mode=\"chat\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport const ChatView = memo(ChatViewComponent);\n","size_bytes":15732},"src/components/desktop-chat-layout.tsx":{"content":"\n'use client';\nimport { ChatList } from './chat-list';\nimport { ChatView } from './chat-view';\nimport { useAppShell } from './app-shell';\nimport { Sidebar, SidebarInset } from './ui/sidebar';\nimport { useAppearance } from './providers/appearance-provider';\nimport React from 'react';\n\nexport function DesktopChatLayout() {\n  const { \n    selectedChat,\n    isAiReplying,\n    currentUser,\n    handleBack,\n    messages,\n    loadMoreMessages,\n    hasMoreMessages,\n    isLoadingMore\n  } = useAppShell();\n  const { chatListOpacity } = useAppearance();\n\n  const desktopSidebarStyle = {\n    // By setting the background to transparent, we allow the AppBackground to show through.\n    // The opacity is controlled by the --card variable for the GlassCard effect inside ChatList.\n    backgroundColor: 'transparent',\n  } as React.CSSProperties;\n  \n  return (\n    <div className=\"h-screen w-full flex overflow-hidden\">\n      <Sidebar\n        collapsible=\"icon\"\n        className=\"backdrop-blur-xl border-r border-border/20 w-[22rem] max-w-[22rem] min-w-0 flex-shrink-0 flex-grow-0 overflow-x-hidden\"\n        style={desktopSidebarStyle}\n      >\n        <ChatList />\n      </Sidebar>\n      <SidebarInset>\n        <ChatView\n          chat={selectedChat}\n          isAiReplying={isAiReplying}\n          currentUser={currentUser}\n          onBack={handleBack}\n          messages={messages}\n          loadMoreMessages={loadMoreMessages}\n          hasMoreMessages={hasMoreMessages}\n          isLoadingMore={isLoadingMore}\n        />\n      </SidebarInset>\n    </div>\n  );\n}\n","size_bytes":1554},"src/components/emoji-reaction-animation.tsx":{"content":"\n'use client';\nimport { motion } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface EmojiReactionAnimationProps {\n  emoji: string;\n}\n\nconst numParticles = 40; // Increased for a fuller burst\n\nexport function EmojiReactionAnimation({ emoji }: EmojiReactionAnimationProps) {\n  \n  const particles = useMemo(() => Array.from({ length: numParticles }), []);\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        inset: 0,\n        pointerEvents: 'none',\n        zIndex: 9999,\n        overflow: 'hidden'\n      }}\n    >\n      {particles.map((_, i) => {\n        const angle = Math.random() * 360; // Random angle for burst direction\n        const radius = Math.random() * 250 + 150; // Distance to travel from center\n        const duration = Math.random() * 1.5 + 1; // 1s to 2.5s duration\n        const delay = Math.random() * 0.2; // Staggered start for a more natural burst\n\n        const x = Math.cos(angle * (Math.PI / 180)) * radius;\n        const y = Math.sin(angle * (Math.PI / 180)) * radius;\n\n        return (\n          <motion.div\n            key={i}\n            style={{\n              position: 'absolute',\n              left: '50%',\n              top: '50%',\n              fontSize: `${Math.random() * 1.5 + 1}rem`, // 1rem to 2.5rem\n            }}\n            initial={{ x: 0, y: 0, scale: 0.5, opacity: 1 }}\n            animate={{\n              x: x,\n              y: y,\n              scale: [1, 1.2, 0.8],\n              opacity: [1, 1, 0],\n              rotate: Math.random() * 720 - 360,\n            }}\n            transition={{\n              duration,\n              delay,\n              ease: 'easeOut',\n              opacity: { times: [0, 0.8, 1], duration }\n            }}\n          >\n            {emoji}\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":1814},"src/components/galaxy-background.css":{"content":"\n#galaxy-canvas {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: -1;\n    pointer-events: none;\n    background-color: #000;\n}\n","size_bytes":174},"src/components/galaxy-background.tsx":{"content":"\n'use client';\nimport React, { useRef, useEffect } from 'react';\nimport './galaxy-background.css';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\n// Star properties type\ntype Star = {\n  x: number;\n  y: number;\n  size: number;\n  speed: number;\n  opacity: number;\n  opacityDirection: number;\n};\n\n// Component props\ninterface GalaxyBackgroundProps {\n  starCount?: number;\n  twinkle?: boolean;\n}\n\nexport function GalaxyBackground({ starCount = 500, twinkle = true }: GalaxyBackgroundProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationFrameId = useRef<number | null>(null);\n  const isMobile = useIsMobile();\n  const reducedMotion =\n    typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    let stars: Star[] = [];\n\n    const setup = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      stars = [];\n      const effectiveStarCount = reducedMotion ? starCount / 2 : starCount;\n      for (let i = 0; i < effectiveStarCount; i++) {\n        stars.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          size: Math.random() * 1.5 + 0.5,\n          speed: Math.random() * 0.2 + 0.1,\n          opacity: Math.random() * 0.5 + 0.2,\n          opacityDirection: Math.random() > 0.5 ? 1 : -1,\n        });\n      }\n    };\n\n    const draw = () => {\n      if (!ctx || !canvas) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // --- Enhanced Nebula Effect ---\n      const nebulaOpacity1 = isMobile ? 0.6 : 0.4;\n      const nebulaOpacity2 = isMobile ? 0.5 : 0.3;\n      const radiusMultiplier1 = isMobile ? 0.8 : 0.5;\n      const radiusMultiplier2 = isMobile ? 0.7 : 0.4;\n\n      // Nebula 1\n      const centerX1 = canvas.width * 0.25;\n      const centerY1 = canvas.height * 0.25;\n      const radius1 = Math.max(canvas.width, canvas.height) * radiusMultiplier1;\n      const grad1 = ctx.createRadialGradient(centerX1, centerY1, 0, centerX1, centerY1, radius1);\n      grad1.addColorStop(0, `hsla(260, 45%, 15%, ${nebulaOpacity1})`);\n      grad1.addColorStop(1, 'transparent');\n      ctx.fillStyle = grad1;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Nebula 2\n      const centerX2 = canvas.width * 0.75;\n      const centerY2 = canvas.height * 0.75;\n      const radius2 = Math.max(canvas.width, canvas.height) * radiusMultiplier2;\n      const grad2 = ctx.createRadialGradient(centerX2, centerY2, 0, centerX2, centerY2, radius2);\n      grad2.addColorStop(0, `hsla(220, 50%, 20%, ${nebulaOpacity2})`);\n      grad2.addColorStop(1, 'transparent');\n      ctx.fillStyle = grad2;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\n      for (const star of stars) {\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n        ctx.fillStyle = `hsla(200, 80%, 90%, ${star.opacity})`;\n        ctx.fill();\n      }\n    };\n\n    const update = () => {\n      if(!canvas) return;\n      for (const star of stars) {\n        // Star movement\n        star.y -= star.speed;\n        if (star.y < 0) {\n          star.y = canvas.height;\n          star.x = Math.random() * canvas.width;\n        }\n\n        // Twinkle effect\n        if (twinkle && !reducedMotion) {\n          star.opacity += 0.005 * star.opacityDirection;\n          if (star.opacity > 0.8 || star.opacity < 0.1) {\n            star.opacityDirection *= -1;\n          }\n        }\n      }\n    };\n\n    const animate = () => {\n      if (!reducedMotion) {\n        update();\n      }\n      draw();\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n\n    const handleResize = () => {\n      setup();\n      draw(); // Redraw immediately on resize\n    };\n\n    setup();\n    draw(); // Draw the initial frame immediately\n    animate();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [reducedMotion, starCount, twinkle, isMobile]);\n\n  return <canvas ref={canvasRef} id=\"galaxy-canvas\" aria-hidden=\"true\"></canvas>;\n}\n","size_bytes":4330},"src/components/gif-picker.tsx":{"content":"\n'use client';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from './ui/input';\nimport { ScrollArea } from './ui/scroll-area';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Search } from 'lucide-react';\nimport Image from 'next/image';\nimport { Button } from './ui/button';\nimport { cn } from '@/lib/utils';\nimport { useDebounce } from '@/hooks/use-debounce';\n\nconst TENOR_API_KEY = process.env.NEXT_PUBLIC_TENOR_API_KEY;\n\ninterface Gif {\n  id: string;\n  url: string;\n  preview: string;\n  title: string;\n}\n\ninterface GifPickerProps {\n  children: React.ReactNode;\n  onSelect: (base64: string, fileType: string, fileName: string, caption: string) => void;\n}\n\nconst fileToBase64 = (file: Blob): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n};\n\nasync function fetchGifs(\n  searchTerm: string,\n  toast: (options: any) => void\n): Promise<Gif[]> {\n  if (!TENOR_API_KEY) {\n      toast({\n        title: 'Missing API Key',\n        description: 'The Tenor API key is missing. Please add it to your environment variables.',\n        variant: 'destructive',\n      });\n      return [];\n  }\n  \n  const searchUrl = `https://tenor.googleapis.com/v2/search?q=${encodeURIComponent(\n    searchTerm\n  )}&key=${TENOR_API_KEY}&limit=20&media_filter=tinygif`;\n  const trendingUrl = `https://tenor.googleapis.com/v2/featured?key=${TENOR_API_KEY}&limit=20&media_filter=tinygif`;\n\n  const url = searchTerm ? searchUrl : trendingUrl;\n  \n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.results.map((gif: any) => ({\n      id: gif.id,\n      url: gif.media_formats.gif?.url || gif.media_formats.tinygif.url,\n      preview: gif.media_formats.tinygif.url,\n      title: gif.content_description,\n    })).filter((g: Gif) => g.url && g.preview);\n  } catch (error) {\n    console.error('Error fetching GIFs:', error);\n    return [];\n  }\n}\n\nexport function GifPicker({ children, onSelect }: GifPickerProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n  const [gifs, setGifs] = useState<Gif[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSearch = useCallback(async (term: string) => {\n    setIsLoading(true);\n    try {\n      const results = await fetchGifs(term, toast);\n      setGifs(results);\n    } catch (error) {\n      console.error('Failed to fetch GIFs', error);\n      toast({\n        title: 'Error fetching GIFs',\n        description: 'Could not load GIFs. Please try again later.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    if (isOpen) {\n      handleSearch(debouncedSearchTerm);\n    }\n  }, [isOpen, debouncedSearchTerm, handleSearch]);\n\n  const handleGifSelect = (gif: Gif) => {\n    fetch(gif.url)\n        .then(res => res.blob())\n        .then(blob => fileToBase64(blob))\n        .then(base64 => {\n            onSelect(base64, 'image/gif', gif.title || 'vibez-gif.gif', '');\n        })\n        .catch(err => {\n             console.error(\"Error fetching GIF blob\", err);\n             toast({\n                title: \"Couldn't send GIF\",\n                description: \"There was a problem downloading the selected GIF.\",\n                variant: \"destructive\"\n             })\n        });\n\n    setIsOpen(false);\n  };\n  \n  const memoizedGifs = useMemo(() => {\n    return gifs.map((gif) => (\n        <button\n            key={gif.id}\n            onClick={() => handleGifSelect(gif)}\n            className=\"rounded-md overflow-hidden aspect-video relative group focus:outline-none focus:ring-2 focus:ring-primary\"\n        >\n            <Image\n            src={gif.preview}\n            alt={gif.title}\n            fill\n            className=\"object-cover group-hover:scale-110 transition-transform duration-200\"\n            unoptimized\n            />\n        </button>\n    ))\n  }, [gifs, handleGifSelect]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>{children}</DialogTrigger>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Select a GIF</DialogTitle>\n        </DialogHeader>\n        <div className=\"relative my-4\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search for a GIF...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        <ScrollArea className={cn(\"h-80 border rounded-md\", isLoading && 'flex items-center justify-center')}>\n            {isLoading ? (\n                <div className=\"flex justify-center items-center h-full\">\n                    <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                </div>\n            ) : gifs.length > 0 ? (\n                <div className=\"p-2 grid grid-cols-2 gap-2\">\n                    {memoizedGifs}\n                </div>\n            ) : (\n                <p className=\"text-center text-muted-foreground p-8\">No GIFs found. Is your API key set?</p>\n            )}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5760},"src/components/gradient-glow-background.tsx":{"content":"\n'use client';\nimport React from 'react';\n\nconst isReducedMotion = () =>\n  typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\nexport function GradientGlowBackground() {\n  if (isReducedMotion()) {\n    return <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', zIndex: -1, background: '#0f0c29' }} />;\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh',\n          zIndex: -1,\n          background: 'linear-gradient(270deg, #0f0c29, #302b63, #24243e)',\n          backgroundSize: '600% 600%',\n          animation: 'gradient-pan 16s ease infinite',\n        }}\n      />\n      <style jsx global>{`\n        @keyframes gradient-pan {\n          0% { background-position: 0% 50%; }\n          50% { background-position: 100% 50%; }\n          100% { background-position: 0% 50%; }\n        }\n      `}</style>\n    </>\n  );\n}\n","size_bytes":1005},"src/components/grid-background.tsx":{"content":"\n'use client';\nimport React from 'react';\n\nconst isReducedMotion = () =>\n  typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\nexport function GridBackground() {\n    const shouldAnimate = !isReducedMotion();\n\n    return (\n        <>\n            <div \n                className=\"fixed inset-0 z-[-1] bg-[#050505]\"\n                style={{\n                    backgroundImage: 'linear-gradient(rgba(255, 255, 255, 0.07) 1px, transparent 1px), linear-gradient(90deg, rgba(255, 255, 255, 0.07) 1px, transparent 1px)',\n                    backgroundSize: '2rem 2rem',\n                    animation: shouldAnimate ? 'grid-pan 30s linear infinite' : 'none',\n                }}\n            />\n             <style jsx global>{`\n                @keyframes grid-pan {\n                    0% { background-position: 0% 0%; }\n                    100% { background-position: 2rem 2rem; }\n                }\n            `}</style>\n        </>\n    );\n}\n","size_bytes":980},"src/components/group-profile-sheet.tsx":{"content":"\n'use client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet';\nimport { Conversation, User } from '@/lib/types';\nimport { UserAvatar } from './user-avatar';\nimport { Button } from './ui/button';\nimport { ScrollArea } from './ui/scroll-area';\nimport { Badge } from './ui/badge';\nimport { Input } from './ui/input';\nimport { Textarea } from './ui/textarea';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { Camera, Loader2 } from 'lucide-react';\nimport { ImagePreviewDialog } from './image-preview-dialog';\n\ninterface GroupProfileSheetProps {\n  chat: Conversation;\n  currentUser: User;\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  usersCache: Map<string, User>;\n}\n\nexport function GroupProfileSheet({\n  chat,\n  currentUser,\n  isOpen,\n  onOpenChange,\n  usersCache,\n}: GroupProfileSheetProps) {\n  const [name, setName] = useState(chat.name || '');\n  const [description, setDescription] = useState(chat.description || '');\n  const [isEditing, setIsEditing] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [previewFile, setPreviewFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  \n  const [avatarUrl, setAvatarUrl] = useState(chat.avatar || '');\n  const [newAvatarDataUrl, setNewAvatarDataUrl] = useState<string | null>(null);\n\n\n  const allParticipants = chat.participants.map(p => usersCache.get(p)).filter(Boolean) as User[];\n  const uniqueParticipantIds = new Set<string>();\n  const participants = allParticipants.filter(p => {\n    if (uniqueParticipantIds.has(p.uid)) {\n      return false;\n    }\n    uniqueParticipantIds.add(p.uid);\n    return true;\n  });\n  \n  const adminId = chat.createdBy;\n  const isAdmin = currentUser.uid === adminId;\n\n  const resetLocalState = () => {\n    setName(chat.name || '');\n    setDescription(chat.description || '');\n    setAvatarUrl(chat.avatar || '');\n    setNewAvatarDataUrl(null);\n    setIsEditing(false);\n  };\n  \n  useEffect(() => {\n    if (isOpen) {\n      resetLocalState();\n    }\n  }, [chat, isOpen]);\n  \n  \n  const handleAvatarUpload = async (file: File) => {\n    setIsUploading(true);\n    try {\n        const dataUrl = await new Promise<string>((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = (event) => {\n                if (!event.target?.result) {\n                    return reject(new Error(\"Failed to read file.\"));\n                }\n                resolve(event.target.result as string);\n            };\n            reader.onerror = (error) => reject(new Error(\"Failed to read file for resizing.\"));\n        });\n        \n        setNewAvatarDataUrl(dataUrl);\n        setAvatarUrl(dataUrl); // also update for preview\n        toast({ title: 'Success', description: 'Avatar ready to be saved.', variant: 'default' });\n\n    } catch (error: any) {\n        console.error(\"Error preparing avatar:\", error);\n        toast({ title: 'Error', description: error.message || 'Failed to prepare avatar. Please try again.', variant: 'destructive' });\n    } finally {\n        setIsUploading(false);\n        setPreviewFile(null);\n    }\n  };\n\n  const handleSaveChanges = async () => {\n    if (!isAdmin) return;\n    setIsSaving(true);\n    try {\n        const chatRef = doc(db, 'conversations', chat.id);\n        const dataToUpdate: any = {};\n\n        if (name !== (chat.name || '')) dataToUpdate.name = name;\n        if (description !== (chat.description || '')) dataToUpdate.description = description;\n\n        // Prioritize newly uploaded avatar\n        if (newAvatarDataUrl) {\n            dataToUpdate.avatar = newAvatarDataUrl;\n        } else if (avatarUrl !== (chat.avatar || '')) {\n            // Fallback to URL input if no new file was uploaded\n            dataToUpdate.avatar = avatarUrl;\n        }\n        \n        if (Object.keys(dataToUpdate).length > 0) {\n            await updateDoc(chatRef, dataToUpdate);\n        }\n\n        toast({ title: \"Success\", description: \"Group info updated successfully.\" });\n        setIsEditing(false);\n        setNewAvatarDataUrl(null); // Clear new avatar data after saving\n    } catch (error) {\n        console.error(\"Error updating group info:\", error);\n        toast({ title: \"Error\", description: \"Failed to update group info.\", variant: \"destructive\" });\n    } finally {\n        setIsSaving(false);\n    }\n  }\n  \n  const onSelectFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n        const file = e.target.files[0];\n        setPreviewFile(file);\n        if(fileInputRef.current) fileInputRef.current.value = '';\n    }\n  };\n\n  const isChanged = (chat.name || '') !== name || (chat.avatar || '') !== avatarUrl || (chat.description || '') !== description || newAvatarDataUrl;\n  const currentAvatar = isEditing ? avatarUrl : chat.avatar;\n\n  return (\n    <>\n    <Sheet open={isOpen} onOpenChange={(open) => {\n        onOpenChange(open);\n        if (!open) setIsEditing(false);\n    }}>\n      <SheetContent className=\"w-full max-w-md bg-background/90 backdrop-blur-lg p-0 flex flex-col\">\n        <SheetHeader className=\"p-6 pb-4 text-left\">\n          <SheetTitle>Group Info</SheetTitle>\n        </SheetHeader>\n\n        <div className=\"flex flex-col items-center justify-center p-6 pt-0 space-y-4 border-b\">\n            <div className=\"relative\">\n                <UserAvatar user={{ name: isEditing ? name : chat.name, photoURL: currentAvatar }} className=\"w-32 h-32 text-4xl\" />\n                <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    onChange={onSelectFile}\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                />\n            </div>\n            <div className=\"text-center\">\n              <h2 className=\"text-2xl font-bold\">{isEditing ? name : chat.name}</h2>\n              <p className=\"text-sm text-muted-foreground\">{isEditing ? description : (chat.description || \"No description.\")}</p>\n              <p className=\"text-xs text-muted-foreground pt-2\">{participants.length} members</p>\n            </div>\n             {isAdmin && !isEditing && (\n                <Button variant=\"outline\" onClick={() => setIsEditing(true)}>Edit Info</Button>\n            )}\n        </div>\n\n        <ScrollArea className=\"flex-1\">\n          <div className=\"p-6 space-y-4\">\n             {isAdmin && isEditing && (\n                <div className=\"space-y-6\">\n                    <div className=\"space-y-3\">\n                        <Button asChild className=\"w-full\">\n                            <button onClick={() => fileInputRef.current?.click()} disabled={isUploading}>\n                                {isUploading ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : <Camera className=\"h-4 w-4 mr-2\"/>}\n                                {isUploading ? 'Uploading...' : 'Upload from computer'}\n                            </button>\n                        </Button>\n                    </div>\n                    <div>\n                        <label htmlFor=\"group-name\" className=\"text-sm font-medium\">Group Name</label>\n                        <Input id=\"group-name\" value={name} onChange={e => setName(e.target.value)} placeholder=\"Group name\" disabled={isSaving}/>\n                    </div>\n                     <div>\n                        <label htmlFor=\"group-description\" className=\"text-sm font-medium\">Description</label>\n                        <Textarea id=\"group-description\" value={description} onChange={e => setDescription(e.target.value)} placeholder=\"Group description...\" disabled={isSaving}/>\n                    </div>\n                    <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"ghost\" onClick={() => setIsEditing(false)} disabled={isSaving}>Cancel</Button>\n                        <Button onClick={handleSaveChanges} disabled={isSaving || !isChanged}>\n                            {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                            Save\n                        </Button>\n                    </div>\n                </div>\n             )}\n\n              {!isEditing && (\n                <>\n                    <h3 className=\"font-semibold text-card-foreground\">{participants.length} Members</h3>\n                    <div className=\"space-y-3\">\n                        {participants.map(participant => (\n                            <div key={participant.uid} className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                                <UserAvatar user={participant} className=\"h-10 w-10\"/>\n                                <div>\n                                    <p className=\"font-semibold\">{participant.name}</p>\n                                    <p className=\"text-sm text-muted-foreground\">{participant.email}</p>\n                                </div>\n                            </div>\n                            {participant.uid === adminId && (\n                                <Badge variant=\"outline\">Admin</Badge>\n                            )}\n                            </div>\n                        ))}\n                    </div>\n                </>\n              )}\n          </div>\n        </ScrollArea>\n      </SheetContent>\n    </Sheet>\n    {previewFile && (\n        <ImagePreviewDialog\n          file={previewFile}\n          onSend={handleAvatarUpload}\n          onCancel={() => setPreviewFile(null)}\n          mode=\"avatar\"\n        />\n    )}\n    </>\n  );\n}\n","size_bytes":9848},"src/components/image-preview-dialog.tsx":{"content":"'use client';\nimport { useState, useEffect, useRef } from 'react';\nimport NextImage from 'next/image';\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Loader2, File as FileIcon, Video } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport ReactCrop, { type Crop, centerCrop, makeAspectCrop } from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\ninterface ImagePreviewDialogProps {\n  file: File;\n  onSend: (file: File, message: string) => Promise<any>;\n  onCancel: () => void;\n  mode: 'chat' | 'story' | 'avatar';\n}\n\n/**\n * Creates a centered, aspect-ratio-constrained crop rectangle.\n * @param mediaWidth The width of the media element.\n * @param mediaHeight The height of the media element.\n * @param aspect The desired aspect ratio.\n * @returns A Crop object.\n */\nfunction centerAspectCrop(\n  mediaWidth: number,\n  mediaHeight: number,\n  aspect: number,\n): Crop {\n  return centerCrop(\n    makeAspectCrop(\n      {\n        unit: '%',\n        width: 90,\n      },\n      aspect,\n      mediaWidth,\n      mediaHeight,\n    ),\n    mediaWidth,\n    mediaHeight,\n  );\n}\n\n/**\n * Generates a cropped, circular image from a source image and a crop object.\n * This function correctly handles image scaling and device pixel ratio for high-quality output.\n * @param image The source HTMLImageElement.\n * @param crop The crop parameters from ReactCrop (in percentages).\n * @param fileName The desired filename for the output file.\n * @returns A promise that resolves with the cropped image as a File object.\n */\nasync function getCroppedCircularImage(\n  image: HTMLImageElement,\n  crop: Crop,\n  fileName: string\n): Promise<File> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('Canvas context is not available');\n  }\n\n  // --- Avatar Cropping Logic ---\n  // The following section implements the high-quality circular crop.\n\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  const pixelRatio = window.devicePixelRatio || 1;\n\n  // The crop object uses percentages, so we calculate the source crop region in pixels.\n  const cropX = (crop.x / 100) * image.naturalWidth;\n  const cropY = (crop.y / 100) * image.naturalHeight;\n  const cropWidth = (crop.width / 100) * image.naturalWidth;\n  const cropHeight = (crop.height / 100) * image.naturalHeight;\n  \n  // Set canvas dimensions to the actual crop size, scaled for high DPI.\n  canvas.width = Math.floor(cropWidth * pixelRatio);\n  canvas.height = Math.floor(cropHeight * pixelRatio);\n\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = 'high';\n\n  // Center the drawing within the canvas\n  const centerX = cropWidth / 2;\n  const centerY = cropHeight / 2;\n  const radius = Math.min(centerX, centerY);\n  \n  // Create a circular clipping path. Anything drawn after this will be confined to the circle.\n  ctx.beginPath();\n  ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n  ctx.clip();\n\n  // Draw the cropped portion of the source image onto the canvas.\n  ctx.drawImage(\n    image,\n    cropX,\n    cropY,\n    cropWidth,\n    cropHeight,\n    0,\n    0,\n    cropWidth,\n    cropHeight\n  );\n  \n  // --- End of Avatar Cropping Logic ---\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (!blob) {\n        reject(new Error('Canvas is empty'));\n        return;\n      }\n      // Resolve with a new File object. Using PNG to preserve transparency outside the circle.\n      resolve(new File([blob], fileName, { type: 'image/png' }));\n    }, 'image/png', 1); // Use PNG for transparency and high quality.\n  });\n}\n\n\nexport function ImagePreviewDialog({ file, onSend, onCancel, mode }: ImagePreviewDialogProps) {\n  const [message, setMessage] = useState('');\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [isSending, setIsSending] = useState(false);\n  const { toast } = useToast();\n\n  const [crop, setCrop] = useState<Crop>();\n  const imgRef = useRef<HTMLImageElement | null>(null);\n\n  useEffect(() => {\n    if (!file || !file.type) {\n      onCancel();\n      return;\n    }\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n\n    return () => {\n      URL.revokeObjectURL(url);\n    };\n  }, [file, onCancel]);\n\n  /**\n   * When an image loads, automatically set a centered square crop if in 'avatar' mode.\n   */\n  const onImageLoad = (e: React.SyntheticEvent<HTMLImageElement>) => {\n    imgRef.current = e.currentTarget;\n    if (mode === 'avatar') {\n      const { width, height } = e.currentTarget;\n      // Set a centered, 1:1 aspect ratio crop.\n      setCrop(centerAspectCrop(width, height, 1 / 1));\n    }\n  };\n\n  const handleSend = async () => {\n    setIsSending(true);\n\n    let fileToSend = file;\n\n    try {\n      // --- File Generation Logic ---\n      // If in avatar mode, generate the cropped file before sending.\n      if (mode === 'avatar' && imgRef.current && crop?.width && crop?.height) {\n        fileToSend = await getCroppedCircularImage(imgRef.current, crop, 'avatar.png');\n      }\n      // For 'chat' and 'story' modes, fileToSend remains the original file.\n      \n      await onSend(fileToSend, message);\n\n    } catch (error) {\n      console.error('Image upload/crop failed:', error);\n      toast({\n        title: \"Action Failed\",\n        description: \"Could not process the image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSending(false);\n      onCancel();\n    }\n  };\n\n  if (!file || !file.type) return null;\n\n  const isImage = file.type.startsWith('image/');\n  const isVideo = file.type.startsWith('video/');\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'story': return \"Post a Story\";\n      case 'avatar': return \"Set New Avatar\";\n      default: return \"Send File\";\n    }\n  }\n\n  const getButtonText = () => {\n    switch (mode) {\n      case 'story': return \"Post Story\";\n      case 'avatar': return \"Set as Avatar\";\n      default: return \"Send\";\n    }\n  }\n\n  return (\n    <Dialog open={true} onOpenChange={(isOpen) => !isOpen && onCancel()}>\n      <DialogContent className=\"max-w-lg w-full\">\n        <DialogHeader>\n          <DialogTitle>{getTitle()}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex items-center justify-center p-4 bg-muted/30 rounded-lg max-h-[50vh] min-h-[200px]\">\n          {isImage && previewUrl && (\n            mode === 'avatar' ? (\n              <ReactCrop\n                crop={crop}\n                onChange={c => setCrop(c)}\n                circularCrop\n                aspect={1}\n              >\n                <img\n                  ref={imgRef}\n                  src={previewUrl}\n                  alt=\"Image preview\"\n                  style={{ maxHeight: '50vh', display: 'block' }}\n                  onLoad={onImageLoad}\n                />\n              </ReactCrop>\n            ) : (\n              <NextImage\n                src={previewUrl}\n                alt=\"Image preview\"\n                width={500}\n                height={500}\n                style={{ objectFit: 'contain', maxHeight: '50vh', width: 'auto', height: 'auto' }}\n              />\n            )\n          )}\n          {isVideo && previewUrl && (\n              <video src={previewUrl} controls className=\"max-h-[50vh] rounded-lg\" />\n          )}\n          {!isImage && !isVideo && (\n            <div className=\"flex flex-col items-center gap-4 text-muted-foreground\">\n              <FileIcon className=\"w-16 h-16\"/>\n              <p className=\"font-semibold\">{file.name}</p>\n              <p className=\"text-sm\">{(file.size / 1024 / 1024).toFixed(2)} MB</p>\n            </div>\n          )}\n        </div>\n\n        {mode !== 'avatar' && (\n          <div className=\"relative\">\n            <Textarea\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder={mode === 'story' ? 'Add a caption...' : 'Add a message...'}\n              className=\"pr-20\"\n              rows={1}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSend();\n                }\n              }}\n            />\n          </div>\n        )}\n\n        <DialogFooter className=\"mt-2\">\n          <Button variant=\"outline\" onClick={onCancel} disabled={isSending}>\n            Cancel\n          </Button>\n          <Button onClick={handleSend} disabled={isSending}>\n            {isSending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            {isSending ? 'Sending...' : getButtonText()}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8861},"src/components/message-bubble.tsx":{"content":"\n'use client';\n\nimport { Message, User } from '@/lib/types';\nimport { cn } from '@/lib/utils';\nimport { UserAvatar } from './user-avatar';\nimport { Check, CheckCheck, Clock, File as FileIcon, Download, Image as ImageIcon, Smile, MoreHorizontal, Reply, Trash2, Video, Volume2 } from 'lucide-react';\nimport { Timestamp } from 'firebase/firestore';\nimport Image from 'next/image';\nimport { motion, PanInfo } from 'framer-motion';\nimport { UploadProgress } from './upload-progress';\nimport { Popover, PopoverContent, PopoverTrigger } from './ui/popover';\nimport { Button } from './ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from './ui/dropdown-menu';\nimport { memo } from 'react';\nimport React from 'react';\n\ninterface MessageBubbleProps {\n  message: Message;\n  sender?: User;\n  isCurrentUser: boolean;\n  progress?: number;\n  onCancelUpload: () => void;\n  onMessageAction: (messageId: string, action: 'react' | 'delete', data?: any) => void;\n  onReply: (message: Message) => void;\n  isRead: boolean;\n}\n\nconst isImage = (fileType: string) => fileType.startsWith('image/');\nconst isAudio = (fileType: string) => fileType.startsWith('audio/');\nconst isVideo = (fileType: string) => fileType.startsWith('video/');\n\nconst defaultEmojis = ['👍', '❤️', '😂', '😮', '😢', '🙏'];\n\nconst messageVariants = {\n    initial: { opacity: 0, y: 10, scale: 0.95 },\n    animate: { opacity: 1, y: 0, scale: 1, transition: { duration: 0.2, ease: [0.25, 1, 0.5, 1] } },\n};\n\nfunction MessageBubble({ message, sender, isCurrentUser, progress, onCancelUpload, onMessageAction, onReply, isRead }: MessageBubbleProps) {\n  if (!sender) {\n    return (\n        <div className={cn('group flex w-full items-start gap-3', isCurrentUser && 'flex-row-reverse')}>\n            <div className=\"h-8 w-8 rounded-full bg-muted animate-pulse\" />\n            <div className={cn('relative flex max-w-[70%] flex-col rounded-xl px-4 py-2', isCurrentUser ? 'rounded-tr-none bg-primary text-primary-foreground' : 'rounded-tl-none bg-card')}>\n                <p className=\"text-base\">{message.text}</p>\n            </div>\n        </div>\n    );\n  }\n  \n  const getReadReceiptIcon = () => {\n    if (message.status === 'sending') return <Clock className=\"h-4 w-4 text-primary-foreground/70\" />;\n    if (isRead) return <CheckCheck className=\"h-4 w-4 text-blue-400\" />;\n    if (message.status === 'sent' || message.status === 'delivered' || message.status === 'read') return <CheckCheck className=\"h-4 w-4 text-primary-foreground/70\" />;\n    return <Check className=\"h-4 w-4 text-primary-foreground/70\" />;\n  }\n\n\n  const getFormattedTimestamp = (timestamp: any) => {\n    if (!timestamp) return '';\n    \n    let date: Date;\n    if (timestamp instanceof Timestamp) {\n        date = timestamp.toDate();\n    } else if (timestamp instanceof Date) {\n        date = timestamp;\n    } else if (typeof timestamp === 'string') {\n        date = new Date(timestamp);\n    } else if (timestamp?.seconds) {\n        date = new Date(timestamp.seconds * 1000);\n    } else {\n        return \"Sending...\"\n    }\n\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n  \n  const formattedTimestamp = getFormattedTimestamp(message.timestamp);\n  \n  const renderMessageContent = () => {\n     if (message.deleted) {\n        return <p className=\"text-base italic text-muted-foreground\">This message was deleted.</p>;\n     }\n    if (message.file) {\n      const isSending = message.status === 'sending';\n      const fileContent = (() => {\n        if (isImage(message.file.type)) {\n            const imageUrl = message.file.url;\n            const isGif = message.file.type === 'image/gif';\n            if (!imageUrl) {\n                return (\n                    <div className=\"w-[250px] h-[250px] bg-muted rounded-lg flex items-center justify-center\">\n                        <ImageIcon className=\"w-10 h-10 text-muted-foreground\" />\n                    </div>\n                );\n            }\n            return (\n                <a href={imageUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <Image\n                        key={message.id}\n                        src={imageUrl}\n                        alt={message.file.name}\n                        width={250}\n                        height={250}\n                        className={cn(\n                        \"rounded-lg object-cover max-w-full\",\n                        isSending && 'opacity-60'\n                        )}\n                        unoptimized={isGif}\n                    />\n                </a>\n            )\n        }\n        if (isAudio(message.file.type)) {\n            return (\n                message.file.url ? <audio controls src={message.file.url} className={cn(\"w-full max-w-xs\", isSending && 'opacity-60')} /> : null\n            )\n        }\n        if (isVideo(message.file.type)) {\n            return (\n                message.file.url ? <video controls src={message.file.url} className={cn(\"w-full max-w-xs rounded-lg\", isSending && 'opacity-60')} /> : null\n            )\n        }\n        return (\n            <a \n            href={message.file.url} \n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            className=\"flex items-center gap-3 bg-muted/50 p-3 rounded-lg hover:bg-muted\"\n            >\n            <FileIcon className=\"h-8 w-8 text-muted-foreground\" />\n            <div className=\"flex-1 overflow-hidden\">\n                <p className=\"font-medium truncate\">{message.file.name}</p>\n                <p className=\"text-sm text-muted-foreground\">Click to download</p>\n            </div>\n            <Download className=\"h-5 w-5 text-muted-foreground\" />\n            </a>\n        )\n      })();\n      \n      return (\n        <div className=\"relative\">\n          {fileContent}\n          {isSending && (\n            <UploadProgress progress={progress} onCancel={onCancelUpload} />\n          )}\n        </div>\n      );\n    }\n    return null;\n  }\n  \n  const hasContent = message.text || message.file;\n\n  const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {\n    const swipeThreshold = 50;\n    if (info.offset.x > swipeThreshold && !isCurrentUser) {\n      onReply(message);\n    }\n    if (info.offset.x < -swipeThreshold && isCurrentUser) {\n      onReply(message);\n    }\n  };\n\n  const MessageActions = () => (\n    <div className={cn(\n        \"absolute top-0 -translate-y-1/2 flex items-center bg-background border rounded-full p-0.5 shadow-md transition-opacity duration-200 opacity-0 group-hover:opacity-100\",\n        isCurrentUser ? 'right-2' : 'left-2'\n    )}>\n        <Popover>\n            <PopoverTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 rounded-full\">\n                    <Smile className=\"h-4 w-4\" />\n                </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"p-1 w-auto\">\n                <div className=\"flex gap-1\">\n                    {defaultEmojis.map(emoji => (\n                        <Button\n                            key={emoji}\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8 text-xl rounded-full\"\n                            onClick={() => onMessageAction(message.id, 'react', emoji)}\n                        >\n                            {emoji}\n                        </Button>\n                    ))}\n                </div>\n            </PopoverContent>\n        </Popover>\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7 rounded-full\">\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => onReply(message)}>\n                    <Reply className=\"mr-2 h-4 w-4\" />\n                    <span>Reply</span>\n                </DropdownMenuItem>\n                {isCurrentUser && (\n                  <DropdownMenuItem\n                    className=\"text-destructive\"\n                    onClick={() => onMessageAction(message.id, 'delete')}\n                  >\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    <span>Delete</span>\n                  </DropdownMenuItem>\n                )}\n            </DropdownMenuContent>\n        </DropdownMenu>\n    </div>\n  );\n\n  return (\n    <motion.div\n      variants={messageVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n      layout\n      className={cn(\n        'group flex w-full items-start gap-3 relative',\n        isCurrentUser && 'flex-row-reverse'\n      )}\n      // Swipe to reply gesture\n      drag=\"x\"\n      dragConstraints={{ left: 0, right: 0 }}\n      onDragEnd={handleDragEnd}\n      dragElastic={{ right: isCurrentUser ? 0 : 0.1, left: isCurrentUser ? 0.1 : 0 }}\n      style={{ x: 0 }} // Initialize x to avoid layout jumps\n    >\n      <UserAvatar user={sender} className=\"h-8 w-8\" />\n      <div\n        className={cn(\n          'relative flex max-w-[70%] flex-col rounded-xl shadow-md',\n          isCurrentUser\n            ? 'rounded-tr-none bg-gradient-to-br from-gradient-from to-gradient-to text-primary-foreground animated-gradient'\n            : 'rounded-tl-none bg-card',\n            (message.file && !message.text) ? 'p-1.5' : 'px-4 py-2'\n        )}\n      >\n        {!isCurrentUser && (\n            <p className=\"text-sm font-semibold text-primary px-2 pt-1 font-heading\">{sender.name}</p>\n        )}\n        \n        {message.replyTo && (\n          <div className={cn(\n            \"p-2 mb-2 bg-black/20 rounded-md\",\n            message.replyTo.storyMedia && \"flex items-center gap-2\"\n          )}>\n                {message.replyTo.storyMedia && (\n                    <Image src={message.replyTo.storyMedia} alt=\"Story reply\" width={40} height={40} className=\"rounded-md object-cover h-10 w-10\" />\n                )}\n                <div>\n                  <p className=\"text-sm font-semibold\">{message.replyTo.messageSender}</p>\n                  <p className=\"text-sm text-white/80 line-clamp-2\">{message.replyTo.messageText}</p>\n                </div>\n          </div>\n        )}\n\n        {renderMessageContent()}\n        \n    {message.text && (\n      <p className={cn(\n        \"text-base whitespace-pre-wrap break-words chat-list-force-break\",\n        (message.file) ? \"mt-2 px-2 pb-1\" : \"\",\n        message.deleted && \"italic text-muted-foreground\"\n      )}>\n        {message.text}\n      </p>\n    )}\n\n        {message.reactions && message.reactions.length > 0 && (\n            <div className={cn(\n                \"absolute -bottom-4 flex gap-1\",\n                isCurrentUser ? 'left-2' : 'right-2'\n            )}>\n                {message.reactions.map(r => (\n                    <div key={r.emoji} className=\"flex items-center bg-background/70 backdrop-blur-md border rounded-full px-2 py-0.5 text-xs shadow\">\n                        <span>{r.emoji}</span>\n                        <span className=\"ml-1 font-semibold\">{r.count}</span>\n                    </div>\n                ))}\n            </div>\n        )}\n        \n        {hasContent && !message.deleted && <MessageActions />}\n\n        <div className=\"mt-1 flex items-center gap-2 self-end px-2\">\n          <p className={cn('text-xs', isCurrentUser ? 'text-primary-foreground/70' : 'text-muted-foreground')}>\n            {formattedTimestamp}\n          </p>\n          {isCurrentUser && getReadReceiptIcon()}\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n\nconst MemoizedMessageBubble = memo(MessageBubble);\nexport { MemoizedMessageBubble as MessageBubble };\n","size_bytes":11721},"src/components/message-input.tsx":{"content":"\n'use client';\n\nimport { Paperclip, SendHorizonal, Mic, Trash2, StopCircle, Play, Smile } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Textarea } from './ui/textarea';\nimport { useState, useRef, ChangeEvent, useEffect } from 'react';\nimport { cn } from '@/lib/utils';\nimport { useToast } from '@/hooks/use-toast';\nimport { GifPicker } from './gif-picker';\n\ninterface MessageInputProps {\n  onSendMessage: (messageText: string) => void;\n  onFileSelect: (file: File) => void;\n  onGifSelect: (base64: string, fileType: string, fileName: string, caption: string) => void;\n  onTyping: (isTyping: boolean) => void;\n  isAiChat?: boolean;\n}\n\n// #region WAV Encoder & Base64 Converter\n// This set of functions provides a pure, client-side way to encode raw audio data (PCM)\n// into a standard, universally playable WAV file format. It avoids server-side dependencies\n// and ensures cross-browser compatibility for recorded audio.\nconst encodeWAV = (samples: Float32Array, sampleRate: number): Blob => {\n    const buffer = new ArrayBuffer(44 + samples.length * 2);\n    const view = new DataView(buffer);\n    const writeString = (view: DataView, offset: number, string: string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    const floatTo16BitPCM = (output: DataView, offset: number, input: Float32Array) => {\n      for (let i = 0; i < input.length; i++, offset += 2) {\n        const s = Math.max(-1, Math.min(1, input[i]));\n        output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n      }\n    };\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + samples.length * 2, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, 1, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * 2, true);\n    view.setUint16(32, 2, true);\n    view.setUint16(34, 16, true);\n    writeString(view, 36, 'data');\n    view.setUint32(40, samples.length * 2, true);\n    floatTo16BitPCM(view, 44, samples);\n    return new Blob([view], { type: 'audio/wav' });\n};\nconst blobToArrayBuffer = (blob: Blob): Promise<ArrayBuffer> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result as ArrayBuffer);\n        reader.onerror = reject;\n        reader.readAsArrayBuffer(blob);\n    });\n};\n// #endregion\n\nexport function MessageInput({ onSendMessage, onFileSelect, onGifSelect, onTyping, isAiChat }: MessageInputProps) {\n    const [message, setMessage] = useState('');\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const { toast } = useToast();\n    \n    const [recordingStatus, setRecordingStatus] = useState<'idle' | 'recording' | 'recorded'>('idle');\n    const [recordedAudio, setRecordedAudio] = useState<{ blob: Blob, url: string } | null>(null);\n    const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n    const audioChunksRef = useRef<Blob[]>([]);\n\n    const [isSending, setIsSending] = useState(false);\n    const [recordingDuration, setRecordingDuration] = useState(0);\n    const timerIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n    const reviewAudioRef = useRef<HTMLAudioElement>(null);\n    const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n    const handleTypingChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setMessage(e.target.value);\n        if (isAiChat) return;\n\n        onTyping(true);\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current);\n        }\n        typingTimeoutRef.current = setTimeout(() => {\n            onTyping(false);\n        }, 1000);\n    }\n\n    const handleSend = () => {\n        if(!message.trim() || isSending) return;\n\n        setIsSending(true);\n        onSendMessage(message.trim());\n        setMessage('');\n        if(typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n        onTyping(false);\n\n        // Explicitly focus the textarea after sending to keep keyboard open\n        textareaRef.current?.focus();\n\n        // Cooldown to prevent ghost clicks on mobile\n        setTimeout(() => {\n            setIsSending(false);\n        }, 50);\n    }\n    \n    const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            const maxSize = 50 * 1024 * 1024; // 50MB\n            if (file.size > maxSize) {\n                toast({\n                    title: 'File Too Large',\n                    description: `Please select a file smaller than ${maxSize / 1024 / 1024}MB.`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n            onFileSelect(file);\n        }\n        if(fileInputRef.current) {\n            fileInputRef.current.value = '';\n        }\n    }\n\n    const startRecording = async () => {\n        if (isSending) return;\n        try {\n            if (!navigator.mediaDevices?.getUserMedia) {\n              toast({ title: \"Recording not supported\", description: \"Your browser does not support audio recording.\", variant: \"destructive\" });\n              return;\n            }\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            // Using a specific MIME type is not reliable, so we record with the default\n            // and convert to a universally supported format (WAV) later.\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            \n            mediaRecorderRef.current.addEventListener(\"dataavailable\", (event) => {\n              if (event.data.size > 0) {\n                audioChunksRef.current.push(event.data);\n              }\n            });\n\n            mediaRecorderRef.current.start();\n            setRecordingStatus('recording');\n            setRecordingDuration(0);\n            timerIntervalRef.current = setInterval(() => {\n                setRecordingDuration(prev => prev + 1);\n            }, 1000);\n        } catch (err) {\n            console.error(\"Error accessing microphone:\", err);\n            toast({ title: 'Microphone Access Denied', description: 'Please enable microphone permissions in your browser settings.', variant: 'destructive'});\n        }\n    };\n\n    const stopRecording = (): Promise<Blob> => {\n      return new Promise((resolve) => {\n          if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);\n          if (!mediaRecorderRef.current || mediaRecorderRef.current.state === 'inactive') {\n              resolve(new Blob());\n              return;\n          }\n  \n          mediaRecorderRef.current.addEventListener('stop', () => {\n              const audioBlob = new Blob(audioChunksRef.current, { type: audioChunksRef.current[0]?.type || 'audio/webm' });\n              audioChunksRef.current = [];\n              mediaRecorderRef.current?.stream.getTracks().forEach(track => track.stop());\n              mediaRecorderRef.current = null;\n              resolve(audioBlob);\n          }, { once: true });\n  \n          mediaRecorderRef.current.stop();\n      });\n    };\n\n\n    const handleStopRecording = async () => {\n        const recordedBlob = await stopRecording();\n\n        if (recordedBlob.size === 0) {\n            console.error(\"Recording failed, blob is empty.\");\n            cancelRecording();\n            return;\n        }\n\n        try {\n            // Convert the recorded audio (likely webm/opus) to a WAV file for universal compatibility.\n            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            const arrayBuffer = await blobToArrayBuffer(recordedBlob);\n            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n            const pcmData = audioBuffer.getChannelData(0);\n            const wavBlob = encodeWAV(pcmData, audioBuffer.sampleRate);\n            \n            const audioUrl = URL.createObjectURL(wavBlob);\n            setRecordedAudio({ blob: wavBlob, url: audioUrl });\n            setRecordingStatus('recorded');\n\n        } catch (error) {\n            console.error(\"Failed to convert audio to WAV:\", error);\n            toast({ title: 'Conversion Failed', description: 'Could not process recorded audio.', variant: 'destructive' });\n            cancelRecording();\n        }\n    };\n\n    const cancelRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n             mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n        }\n        if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);\n        if (recordedAudio) URL.revokeObjectURL(recordedAudio.url);\n        \n        setRecordedAudio(null);\n        mediaRecorderRef.current = null;\n        audioChunksRef.current = [];\n        setRecordingStatus('idle');\n        setRecordingDuration(0);\n    }\n\n    const handleSendRecording = () => {\n      if (recordedAudio) {\n        const audioFile = new File([recordedAudio.blob], `voice-note-${Date.now()}.wav`, { type: 'audio/wav' });\n        onFileSelect(audioFile);\n        cancelRecording();\n      }\n    }\n\n    useEffect(() => {\n        return () => {\n            if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);\n            if (recordedAudio) URL.revokeObjectURL(recordedAudio.url);\n            if(typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n            if (!isAiChat) {\n                onTyping(false);\n            }\n        }\n    }, [recordedAudio, isAiChat, onTyping]);\n\n    const formatDuration = (seconds: number) => {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n    \n  return (\n    <div className=\"border-t border-border/50 bg-card/80 backdrop-blur-sm p-2\">\n      <div className=\"flex items-end gap-2\">\n        {!isAiChat && recordingStatus === 'idle' && (\n            <>\n                <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                    accept=\"image/*,video/*,audio/*\"\n                />\n                <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0\" onClick={() => fileInputRef.current?.click()}>\n                    <Paperclip className=\"h-5 w-5\" />\n                    <span className=\"sr-only\">Attach file</span>\n                </Button>\n                <GifPicker onSelect={onGifSelect}>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0\">\n                        <Smile className=\"h-5 w-5\" />\n                        <span className=\"sr-only\">Select a GIF</span>\n                    </Button>\n                </GifPicker>\n            </>\n        )}\n\n        <div className=\"flex-1 relative\">\n            {recordingStatus === 'recording' ? (\n                <div className=\"flex-1 flex items-center justify-between bg-background/50 rounded-2xl px-4 py-2 h-10\">\n                    <div className=\"flex items-center gap-2 text-red-500\">\n                        <Mic className=\"h-5 w-5 animate-pulse\" />\n                        <span>{formatDuration(recordingDuration)}</span>\n                    </div>\n                    <Button variant=\"destructive\" size=\"icon\" className=\"rounded-full shrink-0 h-8 w-8\" onClick={handleStopRecording}>\n                        <StopCircle className=\"h-5 w-5\" />\n                        <span className=\"sr-only\">Stop recording</span>\n                    </Button>\n                </div>\n            ) : recordingStatus === 'recorded' && recordedAudio ? (\n              <div className=\"flex-1 flex items-center justify-between bg-background/50 rounded-2xl px-4 py-2 h-10\">\n                  <div className=\"flex items-center gap-2\">\n                    <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0 text-red-500 hover:text-red-600 h-8 w-8\" onClick={cancelRecording}>\n                        <Trash2 className=\"h-5 w-5\"/>\n                    </Button>\n                    <audio ref={reviewAudioRef} src={recordedAudio.url} className=\"hidden\"/>\n                    <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8\" onClick={() => reviewAudioRef.current?.play()}>\n                        <Play className=\"h-4 w-4\" />\n                    </Button>\n                     <span className=\"text-sm\">{formatDuration(recordingDuration)}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                      <Button size=\"icon\" className=\"rounded-full shrink-0 h-8 w-8\" onClick={handleSendRecording}>\n                          <SendHorizonal className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">Send voice message</span>\n                      </Button>\n                  </div>\n              </div>\n            ) : (\n                <Textarea\n                    ref={textareaRef}\n                    value={message}\n                    onChange={handleTypingChange}\n                    placeholder=\"Type a message...\"\n                    className=\"flex-1 resize-none self-center rounded-2xl border-input bg-background/50 py-2.5 px-4 pr-12 min-h-0 h-10 max-h-24\"\n                    rows={1}\n                    onKeyDown={(e) => {\n                        if(e.key === 'Enter' && !e.shiftKey) {\n                            e.preventDefault();\n                            handleSend();\n                        }\n                    }}\n                />\n            )}\n        </div>\n        \n        {message.trim() && recordingStatus === 'idle' ? (\n            <Button\n              type=\"button\"\n              size=\"icon\"\n              className=\"rounded-full shrink-0\"\n              onClick={handleSend}\n            >\n                <SendHorizonal className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Send message</span>\n            </Button>\n        ) : recordingStatus === 'idle' && !isAiChat ? (\n            <Button size=\"icon\" className=\"rounded-full shrink-0\" onClick={startRecording} disabled={isSending}>\n                <Mic className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Record voice message</span>\n            </Button>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14489},"src/components/message-list.tsx":{"content":"\n'use client';\nimport { useEffect, useRef, memo, Fragment, forwardRef, UIEvent, useState, useLayoutEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { ScrollArea } from './ui/scroll-area';\nimport { Timestamp } from 'firebase/firestore';\nimport { format, isToday, isYesterday, isSameDay } from 'date-fns';\nimport { Loader2 } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { MessageBubble } from './message-bubble';\nimport { User, Message } from '@/lib/types';\nimport { UserAvatar } from './user-avatar';\n\n\nconst AI_USER_ID = 'gemini-ai-chat-bot-7a4b9c1d-f2e3-4d56-a1b2-c3d4e5f6a7b8';\n\nconst messageListVariants = {\n    initial: {},\n    animate: {\n        transition: {\n            staggerChildren: 0.08,\n        }\n    }\n};\n\nconst MemoizedMessageBubble = memo(MessageBubble);\n\ninterface MessageListProps {\n    messages: Message[];\n    currentUser: User;\n    usersCache: Map<string, User>;\n    uploadProgress: Map<string, number>;\n    onCancelUpload: (messageId: string) => void;\n    onMessageAction: (messageId: string, action: 'react' | 'delete', data?: any) => void;\n    onReply: (message: Message) => void;\n    isAiReplying: boolean;\n    otherParticipantLastRead?: Timestamp;\n    onLoadMore: () => Promise<void>;\n    hasMore: boolean;\n    isLoadingMore: boolean;\n    chatId: string;\n}\n\nfunction convertToDate(timestamp: any): Date | null {\n    if (!timestamp) return null;\n    if (timestamp instanceof Timestamp) return timestamp.toDate();\n    if (timestamp instanceof Date) return timestamp;\n    if (typeof timestamp === 'string') return new Date(timestamp);\n    if (timestamp?.seconds) return new Date(timestamp.seconds * 1000);\n    return null;\n}\n\nfunction formatDateSeparator(date: Date): string {\n    if (isToday(date)) return 'Today';\n    if (isYesterday(date)) return 'Yesterday';\n    return format(date, 'MMMM d, yyyy');\n}\n\n\nexport const MessageList = forwardRef<HTMLDivElement, MessageListProps>(({\n    messages,\n    currentUser,\n    usersCache,\n    uploadProgress,\n    onCancelUpload,\n    onMessageAction,\n    onReply,\n    isAiReplying,\n    otherParticipantLastRead,\n    onLoadMore,\n    hasMore,\n    isLoadingMore,\n    chatId,\n}, ref) => {\n    \n    const viewportRef = useRef<HTMLDivElement>(null);\n    const [isManualLoading, setIsManualLoading] = useState(false);\n    const prevChatId = useRef(chatId);\n    const [scrollAnchor, setScrollAnchor] = useState<{ top: number; height: number } | null>(null);\n    const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n    const visibleMessages = messages.filter(message => {\n        const blockedUsers = currentUser?.blockedUsers || [];\n        return !blockedUsers.includes(message.senderId);\n    });\n\n    useEffect(() => {\n        if (chatId !== prevChatId.current) {\n            setIsInitialLoad(true);\n            prevChatId.current = chatId;\n        }\n    }, [chatId]);\n\n\n    useLayoutEffect(() => {\n        const viewport = viewportRef.current;\n        if (isInitialLoad && viewport && messages.length > 0) {\n            viewport.scrollTop = viewport.scrollHeight;\n            setIsInitialLoad(false);\n        }\n\n        if (scrollAnchor && viewport) {\n            viewport.scrollTop = scrollAnchor.top + (viewport.scrollHeight - scrollAnchor.height);\n            setScrollAnchor(null);\n        }\n    }, [messages, isInitialLoad, scrollAnchor]);\n    \n    \n    const handleLoadMore = async () => {\n        if (!viewportRef.current || isLoadingMore) return;\n\n        setScrollAnchor({\n            top: viewportRef.current.scrollTop,\n            height: viewportRef.current.scrollHeight,\n        });\n        \n        setIsManualLoading(true);\n\n        try {\n            await onLoadMore();\n        } finally {\n            setIsManualLoading(false);\n        }\n    };\n    \n    const getParticipantDetails = (senderId: string) => {\n        if (senderId === currentUser.uid) return currentUser;\n        return usersCache.get(senderId);\n    }\n\n    return (\n        <ScrollArea className=\"h-full\" viewportRef={ref as React.RefObject<HTMLDivElement>}>\n            <motion.div \n                ref={viewportRef}\n                className=\"p-4 space-y-6\"\n                variants={messageListVariants}\n                initial=\"initial\"\n                animate=\"animate\"\n            >\n                {hasMore && (\n                    <div className=\"flex justify-center\">\n                        <Button\n                            variant=\"secondary\"\n                            onClick={handleLoadMore}\n                            disabled={isManualLoading || isLoadingMore}\n                        >\n                            {(isManualLoading || isLoadingMore) ? (\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            ) : null}\n                            Load Older Messages\n                        </Button>\n                    </div>\n                )}\n                {messages.length > 0 ? (\n                    visibleMessages.map((message, index) => {\n                        const sender = getParticipantDetails(message.senderId);\n                        \n                        let isRead = false;\n                        if(otherParticipantLastRead && message.timestamp && message.senderId === currentUser.uid) {\n                            const messageDate = convertToDate(message.timestamp);\n                            const lastReadDate = convertToDate(otherParticipantLastRead);\n                            if (messageDate && lastReadDate) {\n                                isRead = messageDate <= lastReadDate;\n                            }\n                        }\n\n                        let dateSeparator = null;\n                        const currentMessageDate = convertToDate(message.timestamp);\n                        if (currentMessageDate) {\n                            if (index === 0) {\n                                dateSeparator = formatDateSeparator(currentMessageDate);\n                            } else {\n                                const prevMessageDate = convertToDate(visibleMessages[index - 1].timestamp);\n                                if (prevMessageDate && !isSameDay(currentMessageDate, prevMessageDate)) {\n                                    dateSeparator = formatDateSeparator(currentMessageDate);\n                                }\n                            }\n                        }\n\n                        return (\n                            <Fragment key={message.id || message.clientTempId}>\n                                {dateSeparator && (\n                                    <div className=\"relative text-center my-4\">\n                                        <hr className=\"absolute top-1/2 left-0 w-full -translate-y-1/2\" />\n                                        <span className=\"relative bg-background px-2 text-xs text-muted-foreground\">{dateSeparator}</span>\n                                    </div>\n                                )}\n                                <MemoizedMessageBubble\n                                    message={message}\n                                    sender={sender}\n                                    isCurrentUser={sender?.uid === currentUser.uid}\n                                    progress={uploadProgress.get(message.clientTempId || message.id)}\n                                    onCancelUpload={() => onCancelUpload(message.clientTempId || message.id)}\n                                    onMessageAction={onMessageAction}\n                                    onReply={onReply}\n                                    isRead={isRead}\n                                />\n                            </Fragment>\n                        );\n                })\n                ) : (\n                <div className=\"flex justify-center items-center h-full\">\n                    <div className=\"text-center p-4 rounded-lg bg-background/50\">\n                    <p className=\"text-muted-foreground\">\n                        No messages in this chat yet.\n                    </p>\n                    </div>\n                </div>\n                )}\n                {isAiReplying && (\n                <div className=\"flex items-start gap-3\">\n                    <UserAvatar user={usersCache.get(AI_USER_ID)!} className=\"h-8 w-8\" />\n                    <div className=\"bg-card/80 backdrop-blur-sm rounded-xl px-4 py-2 rounded-tl-none flex items-center gap-2\">\n                    <span className=\"h-2 w-2 bg-muted-foreground rounded-full animate-pulse delay-0\"></span>\n                    <span className=\"h-2 w-2 bg-muted-foreground rounded-full animate-pulse delay-150\"></span>\n                    <span className=\"h-2 w-2 bg-muted-foreground rounded-full animate-pulse delay-300\"></span>\n                    </div>\n                </div>\n                )}\n            </motion.div>\n        </ScrollArea>\n    );\n});\nMessageList.displayName = 'MessageList';\n","size_bytes":8916},"src/components/mobile-chat-layout.tsx":{"content":"\n'use client';\nimport { ChatView } from './chat-view';\nimport { useAppShell } from './app-shell';\nimport { ChatList } from './chat-list';\nimport React from 'react';\nimport { useMobileKeyboardHeight } from '@/hooks/use-mobile-keyboard-height';\n\nexport function MobileChatLayout() {\n  const {\n    selectedChat,\n    isAiReplying,\n    currentUser,\n    handleBack,\n    messages,\n    loadMoreMessages,\n    hasMoreMessages,\n    isLoadingMore,\n  } = useAppShell();\n\n  // Dynamically set height to visible viewport (accounts for keyboard)\n  const { viewportHeight } = useMobileKeyboardHeight();\n\n  return (\n    <div\n      className=\"flex flex-col w-full h-full overflow-hidden z-10\"\n      style={{ height: viewportHeight }}\n    >\n      {/* Only render one main view at a time */}\n      {!selectedChat ? (\n        <div className=\"flex-1 min-h-0\">\n          <ChatList />\n        </div>\n      ) : (\n        <div className=\"flex-1 min-h-0\">\n          <ChatView\n            chat={selectedChat}\n            isAiReplying={isAiReplying}\n            currentUser={currentUser}\n            onBack={handleBack}\n            messages={messages}\n            loadMoreMessages={loadMoreMessages}\n            hasMoreMessages={hasMoreMessages}\n            isLoadingMore={isLoadingMore}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1313},"src/components/mobile-galaxy-background.css":{"content":"#mobile-galaxy-canvas {\n  position: fixed;\n  inset: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 0;\n  pointer-events: none;\n  background-color: transparent;\n}\n","size_bytes":159},"src/components/mobile-galaxy-background.tsx":{"content":"\n'use client';\nimport React, { useRef, useEffect } from 'react';\n\nconst isReducedMotion = () =>\n  typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\ntype Star = {\n  x: number;\n  y: number;\n  size: number;\n  speedX: number;\n  speedY: number;\n  opacity: number;\n  opacityDirection: number;\n};\n\ntype ShootingStar = {\n  x: number;\n  y: number;\n  len: number;\n  speed: number;\n  size: number;\n  active: boolean;\n};\n\ntype Nebula = {\n  x: number;\n  y: number;\n  radius: number;\n  color: string;\n  opacity: number;\n  opacityDirection: number;\n};\n\nexport function MobileGalaxyBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationFrameId = useRef<number | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || isReducedMotion()) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    let stars: Star[] = [];\n    let shootingStars: ShootingStar[] = [];\n    let nebulas: Nebula[] = [];\n\n    const setup = () => {\n      const dpr = window.devicePixelRatio || 1;\n      const vw = window.visualViewport ? window.visualViewport.width : window.innerWidth;\n      const vh = window.visualViewport ? window.visualViewport.height : window.innerHeight;\n\n      canvas.width = vw * dpr;\n      canvas.height = vh * dpr;\n      canvas.style.width = `${vw}px`;\n      canvas.style.height = `${vh}px`;\n      ctx.scale(dpr, dpr);\n\n      stars = [];\n      shootingStars = [];\n      nebulas = [];\n\n      // Create stars\n      for (let i = 0; i < 300; i++) {\n        stars.push({\n          x: Math.random() * vw,\n          y: Math.random() * vh,\n          size: Math.random() * 1.2 + 0.3,\n          speedX: (Math.random() - 0.5) * 0.1,\n          speedY: (Math.random() * 0.15 + 0.1) * -1, // Move upwards\n          opacity: Math.random() * 0.5 + 0.3,\n          opacityDirection: Math.random() > 0.5 ? 1 : -1,\n        });\n      }\n      \n      // Create shooting stars\n      for (let i = 0; i < 2; i++) {\n        shootingStars.push({\n            x: Math.random() * vw,\n            y: Math.random() * vh,\n            len: Math.random() * 80 + 10,\n            speed: Math.random() * 8 + 4,\n            size: Math.random() * 1 + 0.5,\n            active: false\n        });\n      }\n\n      // Create nebulas\n      nebulas.push({ x: vw * 0.2, y: vh * 0.3, radius: vw * 0.8, color: 'hsla(260, 65%, 30%, 0.4)', opacity: 0.4, opacityDirection: 1 });\n      nebulas.push({ x: vw * 0.8, y: vh * 0.8, radius: vw * 0.7, color: 'hsla(220, 70%, 40%, 0.3)', opacity: 0.3, opacityDirection: -1 });\n      nebulas.push({ x: vw * 0.1, y: vh * 0.9, radius: vw * 0.6, color: 'hsla(320, 70%, 40%, 0.25)', opacity: 0.25, opacityDirection: 1 });\n\n    };\n\n    const draw = () => {\n        if (!ctx || !canvas) return;\n        const dpr = window.devicePixelRatio || 1;\n        const vw = window.visualViewport ? window.visualViewport.width : window.innerWidth;\n        const vh = window.visualViewport ? window.visualViewport.height : window.innerHeight;\n\n        canvas.width = vw * dpr;\n        canvas.height = vh * dpr;\n        canvas.style.width = `${vw}px`;\n        canvas.style.height = `${vh}px`;\n        ctx.scale(dpr, dpr);\n\n        ctx.clearRect(0, 0, vw, vh);\n        ctx.fillStyle = '#000005';\n        ctx.fillRect(0, 0, vw, vh);\n\n        // Draw nebulas first\n        nebulas.forEach(n => {\n            const grad = ctx.createRadialGradient(n.x, n.y, 0, n.x, n.y, n.radius);\n            const color = n.color.replace(/, ([\\d.]+)\\)/, `, ${n.opacity})`);\n            grad.addColorStop(0, color);\n            grad.addColorStop(1, 'transparent');\n            ctx.fillStyle = grad;\n            ctx.fillRect(0, 0, vw, vh);\n        });\n\n        // Draw stars on top\n        stars.forEach(star => {\n            ctx.beginPath();\n            ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n            ctx.fillStyle = `hsla(200, 100%, 95%, ${star.opacity})`;\n            ctx.fill();\n        });\n\n        // Draw shooting stars on top\n        shootingStars.forEach(s => {\n            if (s.active) {\n                ctx.beginPath();\n                ctx.moveTo(s.x, s.y);\n                ctx.lineTo(s.x - s.len, s.y + s.len);\n                ctx.strokeStyle = 'white';\n                ctx.lineWidth = s.size;\n                ctx.stroke();\n            }\n        });\n    };\n\n    const update = () => {\n      if(!canvas) return;\n      const vw = window.visualViewport ? window.visualViewport.width : window.innerWidth;\n      const vh = window.visualViewport ? window.visualViewport.height : window.innerHeight;\n      // Update stars\n      stars.forEach(star => {\n        star.x += star.speedX;\n        star.y += star.speedY;\n\n        // Twinkle effect\n        star.opacity += 0.003 * star.opacityDirection;\n        if (star.opacity <= 0.2 || star.opacity >= 0.8) {\n          star.opacityDirection *= -1;\n        }\n\n        if (star.y < 0) {\n            star.y = vh;\n            star.x = Math.random() * vw;\n        }\n        if (star.x < 0) star.x = vw;\n        if (star.x > vw) star.x = 0;\n      });\n\n      // Update shooting stars\n       shootingStars.forEach(s => {\n            if (s.active) {\n                s.x -= s.speed;\n                s.y += s.speed;\n                if (s.x < 0 || s.y > vh) {\n                    s.active = false;\n                }\n            } else if (Math.random() < 0.001) {\n                s.active = true;\n                s.x = Math.random() * vw / 2 + vw / 2;\n                s.y = Math.random() * vh / 2;\n                s.len = Math.random() * 80 + 10;\n                s.speed = Math.random() * 8 + 4;\n                s.size = Math.random() * 1 + 0.5;\n            }\n        });\n\n        // Update nebulas\n        nebulas.forEach(n => {\n            n.opacity += 0.001 * n.opacityDirection;\n            if(n.opacity > 0.6 || n.opacity < 0.2) n.opacityDirection *= -1;\n        });\n\n    };\n\n    const animate = () => {\n      update();\n      draw();\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n\n    const handleResize = () => {\n      setup();\n      draw(); // Redraw immediately on resize\n    };\n\n    setup();\n    animate();\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, []);\n\n  if (isReducedMotion()) {\n      return <div className=\"fixed inset-0 bg-black -z-10\" />;\n  }\n\n  return <canvas ref={canvasRef} id=\"mobile-galaxy-canvas\" className=\"fixed inset-0 -z-10\" aria-hidden=\"true\"></canvas>;\n}\n","size_bytes":6629},"src/components/new-chat-dialog.tsx":{"content":"\n\n'use client';\n\nimport { useState, useMemo, useCallback } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { User } from '@/lib/types';\nimport { ScrollArea } from './ui/scroll-area';\nimport { UserAvatar } from './user-avatar';\nimport { Search, Loader2 } from 'lucide-react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Checkbox } from './ui/checkbox';\nimport { Label } from './ui/label';\nimport { collection, query, where, getDocs, limit } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface NewChatDialogProps {\n  users: User[];\n  onCreateChat: (user: User) => void;\n  onCreateGroupChat: (groupName: string, users: User[]) => void;\n  children: React.ReactNode;\n  currentUser?: User;\n}\n\nconst isEmail = (str: string) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(str);\n}\n\nexport function NewChatDialog({ users, onCreateChat, onCreateGroupChat, children, currentUser }: NewChatDialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState<User[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const { toast } = useToast();\n\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\n  const [groupName, setGroupName] = useState('');\n  \n  const publicUsers = useMemo(() => users.filter(u => u.uid !== currentUser?.uid), [users, currentUser]);\n\n  const handleSearch = useCallback(async (term: string) => {\n    if (!term.trim()) {\n        setSearchResults([]);\n        setIsSearching(false);\n        return;\n    }\n    setIsSearching(true);\n    try {\n        // Check if Firebase is properly configured (not using demo values)\n        const isFirebaseConfigured = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID && \n                                    process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID !== 'demo-project';\n        \n        if (isEmail(term) && isFirebaseConfigured) {\n            // Try Firebase search for email if properly configured\n            const usersRef = collection(db, 'users');\n            const q = query(usersRef, where('email', '==', term.toLowerCase()), limit(1));\n            const querySnapshot = await getDocs(q);\n            const foundUsers = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as User));\n            \n            if (querySnapshot.empty) {\n               toast({ title: \"User not found\", description: \"No user found with that exact email address.\", variant: \"destructive\" });\n            }\n            setSearchResults(foundUsers);\n        } else {\n            // Fallback to client-side filtering for both email and name searches\n            const filtered = publicUsers.filter(user => {\n                const searchLower = term.toLowerCase();\n                return (user.name && user.name.toLowerCase().includes(searchLower)) ||\n                       (user.email && user.email.toLowerCase().includes(searchLower));\n            });\n            setSearchResults(filtered);\n            \n            if (filtered.length === 0) {\n                toast({ \n                    title: \"No results\", \n                    description: isEmail(term) ? \n                        \"No user found with that email address.\" : \n                        \"No users found matching your search.\", \n                    variant: \"default\" \n                });\n            }\n        }\n    } catch (error) {\n        console.error(\"Error searching users:\", error);\n        // Fallback to client-side search if Firebase fails\n        const filtered = publicUsers.filter(user => {\n            const searchLower = term.toLowerCase();\n            return (user.name && user.name.toLowerCase().includes(searchLower)) ||\n                   (user.email && user.email.toLowerCase().includes(searchLower));\n        });\n        setSearchResults(filtered);\n        \n        toast({ \n            title: \"Search completed\", \n            description: `Found ${filtered.length} users in local search.`, \n            variant: \"default\" \n        });\n    } finally {\n        setIsSearching(false);\n    }\n  }, [publicUsers, toast]);\n\n\n  const displayedUsers = searchTerm ? searchResults : publicUsers;\n\n  const handleCreateChatClick = (user: User) => {\n    if (!currentUser) {\n        toast({ title: \"Error\", description: \"Cannot create chat. Current user not found.\", variant: \"destructive\" });\n        return;\n    }\n    onCreateChat(user);\n    setIsOpen(false);\n    resetState();\n  };\n\n  const handleCreateGroup = () => {\n    if (groupName.trim() && selectedUsers.length > 0) {\n        onCreateGroupChat(groupName.trim(), selectedUsers);\n        setIsOpen(false);\n        resetState();\n    }\n  }\n  \n  const handleUserSelection = (user: User, isSelected: boolean) => {\n    if (isSelected) {\n        setSelectedUsers(prev => [...prev, user]);\n    } else {\n        setSelectedUsers(prev => prev.filter(u => u.id !== user.id));\n    }\n  }\n  \n  const resetState = () => {\n    setSearchTerm('');\n    setSearchResults([]);\n    setGroupName('');\n    setSelectedUsers([]);\n  }\n  \n  const onSearchTermChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n    handleSearch(term);\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n        setIsOpen(open);\n        if (!open) resetState();\n    }}>\n      <DialogTrigger asChild>{children}</DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Start a new chat</DialogTitle>\n        </DialogHeader>\n        <Tabs defaultValue=\"private\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"private\">Private</TabsTrigger>\n                <TabsTrigger value=\"group\">Group</TabsTrigger>\n            </TabsList>\n            <div className=\"relative my-4\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                    placeholder=\"Search by name or exact email...\"\n                    value={searchTerm}\n                    onChange={onSearchTermChange}\n                    className=\"pl-10\"\n                />\n                 {isSearching && isEmail(searchTerm) && <Loader2 className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 animate-spin\" />}\n            </div>\n\n            <TabsContent value=\"private\">\n                <ScrollArea className=\"h-72\">\n                  <div className=\"p-1\">\n                    {displayedUsers.length > 0 ? (\n                      displayedUsers.map(user => (\n                        <div\n                          key={user.id}\n                          className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/50 cursor-pointer\"\n                          onClick={() => handleCreateChatClick(user)}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <UserAvatar user={user} className=\"h-10 w-10\" />\n                            <div>\n                              <p className=\"font-semibold\">{user.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{user.email || 'No email'}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-center text-muted-foreground p-4\">\n                        {searchTerm && !isSearching ? 'No users found.' : 'Type to search for users.'}\n                        </p>\n                    )}\n                  </div>\n                </ScrollArea>\n            </TabsContent>\n            \n            <TabsContent value=\"group\">\n                <div className=\"space-y-4\">\n                    <div>\n                        <Label htmlFor=\"group-name\">Group Name</Label>\n                        <Input \n                            id=\"group-name\"\n                            placeholder=\"Enter a name for your group\"\n                            value={groupName}\n                            onChange={(e) => setGroupName(e.target.value)}\n                        />\n                    </div>\n                     <p className=\"text-sm font-medium text-muted-foreground\">Select members ({selectedUsers.length})</p>\n                    <ScrollArea className=\"h-56\">\n                        <div className=\"p-1 space-y-1\">\n                            {displayedUsers.length > 0 ? (\n                            displayedUsers.map(user => (\n                                <div key={user.id} className=\"flex items-center p-2 rounded-lg hover:bg-muted/50\">\n                                    <Checkbox \n                                        id={`user-${user.id}`}\n                                        className=\"mr-3\"\n                                        onCheckedChange={(checked) => handleUserSelection(user, !!checked)}\n                                        checked={selectedUsers.some(u => u.id === user.id)}\n                                    />\n                                    <Label htmlFor={`user-${user.id}`} className=\"flex items-center gap-3 cursor-pointer flex-1\">\n                                        <UserAvatar user={user} className=\"h-10 w-10\" />\n                                        <div>\n                                            <p className=\"font-semibold\">{user.name}</p>\n                                            <p className=\"text-sm text-muted-foreground\">{user.email || 'No email'}</p>\n                                        </div>\n                                    </Label>\n                                </div>\n                            ))\n                            ) : (\n                            <p className=\"text-center text-muted-foreground p-4\">\n                                {searchTerm && !isSearching ? 'No users found.' : 'Type to search for users.'}\n                            </p>\n                            )}\n                        </div>\n                    </ScrollArea>\n                </div>\n            </TabsContent>\n        </Tabs>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n            Cancel\n          </Button>\n           <Button onClick={handleCreateGroup} disabled={groupName.trim().length === 0 || selectedUsers.length === 0}>\n            Create Group\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10784},"src/components/right-pane-background.tsx":{"content":"\n'use client';\nimport { useAppearance } from './providers/appearance-provider';\n\nexport function RightPaneBackground() {\n    const { chatBackground } = useAppearance();\n    \n    if (chatBackground) return null;\n\n    return (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-background via-muted/50 to-background\" />\n    )\n}","size_bytes":338},"src/components/stories-tray.tsx":{"content":"\n'use client';\nimport { useMemo } from 'react';\nimport { Plus } from 'lucide-react';\nimport { User, Story } from '@/lib/types';\nimport { UserAvatar } from './user-avatar';\nimport { ScrollArea, ScrollBar } from './ui/scroll-area';\nimport { cn } from '@/lib/utils';\nimport React from 'react';\n\ninterface StoriesTrayProps {\n    currentUser?: User;\n    stories: Story[];\n    usersWithStories: User[];\n    onViewStory: (user: User, stories: Story[]) => void;\n    onCreateStory: () => void;\n}\n\nexport function StoriesTray({ \n    currentUser, \n    stories, \n    usersWithStories, \n    onViewStory, \n    onCreateStory,\n}: StoriesTrayProps) {\n    \n    const storiesByUser = useMemo(() => {\n        const userStoryMap = new Map<string, Story[]>();\n        stories.forEach(story => {\n            if (!userStoryMap.has(story.ownerId)) {\n                userStoryMap.set(story.ownerId, []);\n            }\n            userStoryMap.get(story.ownerId)!.push(story);\n        });\n\n        // Sort stories by createdAt date\n        userStoryMap.forEach(userStories => {\n            userStories.sort((a, b) => b.createdAt.toMillis() - a.createdAt.toMillis());\n        });\n\n        return userStoryMap;\n    }, [stories]);\n\n    const hasUnreadStory = (userStories: Story[]) => {\n        return userStories.some(story => !story.viewedBy.includes(currentUser?.uid || ''));\n    };\n    \n    if (!currentUser) return null;\n\n    const myStories = storiesByUser.get(currentUser.uid) || [];\n    const hasMyStory = myStories.length > 0;\n    const hasMyUnreadStory = hasMyStory && hasUnreadStory(myStories);\n\n    const friendsWithStories = usersWithStories.filter(u => u.uid !== currentUser.uid);\n\n    return (\n        <>\n            <div className=\"p-4 border-b border-border/50 group-[[data-sidebar-state=collapsed]]/sidebar:hidden\">\n                <ScrollArea className=\"w-full whitespace-nowrap\">\n                    <div className=\"flex gap-4\">\n                        <div className=\"flex flex-col items-center gap-2\">\n                             <button \n                                onClick={hasMyStory ? () => onViewStory(currentUser, myStories) : onCreateStory} \n                                className=\"relative h-16 w-16\"\n                            >\n                                <div className={cn(\n                                    \"rounded-full p-0.5 border-2\",\n                                    hasMyUnreadStory ? \"border-primary\" : \"border-transparent\"\n                                )}>\n                                    <UserAvatar user={currentUser} className=\"h-[58px] w-[58px]\" />\n                                </div>\n                                {!hasMyStory && (\n                                    <div className=\"absolute bottom-0 right-0 bg-primary text-primary-foreground rounded-full p-1 border-2 border-background\">\n                                        <Plus className=\"h-3 w-3\" />\n                                    </div>\n                                )}\n                            </button>\n                            <p className=\"text-xs font-medium truncate w-16\">Your Story</p>\n                        </div>\n\n                        {friendsWithStories.map(user => {\n                            const userStories = storiesByUser.get(user.uid) || [];\n                            if (userStories.length === 0) return null;\n\n                            const hasUnread = hasUnreadStory(userStories);\n\n                            return (\n                                <div key={user.uid} className=\"flex flex-col items-center gap-2\">\n                                    <button \n                                        onClick={() => onViewStory(user, userStories)}\n                                        className={cn(\n                                            \"rounded-full p-0.5 border-2\",\n                                            hasUnread ? \"border-primary\" : \"border-muted\"\n                                        )}\n                                    >\n                                        <UserAvatar user={user} className=\"h-16 w-16\" />\n                                    </button>\n                                    <p className=\"text-xs font-medium truncate w-16\">{user.name}</p>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <ScrollBar orientation=\"horizontal\" />\n                 </ScrollArea>\n                 {!hasMyStory && friendsWithStories.length === 0 && (\n                    <p className=\"text-sm text-muted-foreground text-center py-4\">No stories yet</p>\n                )}\n            </div>\n        </>\n    );\n}\n","size_bytes":4683},"src/components/story-uploader.tsx":{"content":"\n'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { Textarea } from './ui/textarea';\nimport Image from 'next/image';\nimport { Loader2, PlusCircle, X } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport imageCompression from 'browser-image-compression';\n\ninterface StoryUploaderProps {\n    isOpen: boolean;\n    onOpenChange: (isOpen: boolean) => void;\n    onCreateStory: (mediaFile: File, caption?: string) => Promise<void>;\n}\n\nexport function StoryUploader({ isOpen, onOpenChange, onCreateStory }: StoryUploaderProps) {\n    const [file, setFile] = useState<File | null>(null);\n    const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n    const [caption, setCaption] = useState('');\n    const [isUploading, setIsUploading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const { toast } = useToast();\n\n    useEffect(() => {\n        if (!isOpen) {\n            // Reset state when dialog closes\n            setFile(null);\n            setPreviewUrl(null);\n            setCaption('');\n            setIsUploading(false);\n            setError(null);\n        }\n    }, [isOpen]);\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const selectedFile = event.target.files?.[0];\n        if (selectedFile) {\n            if (!selectedFile.type.startsWith('image/')) {\n                toast({\n                    title: \"Invalid File Type\",\n                    description: \"Currently, only images are supported for stories.\",\n                    variant: \"destructive\"\n                });\n                return;\n            }\n            setFile(selectedFile);\n            setPreviewUrl(URL.createObjectURL(selectedFile));\n            setError(null);\n        }\n    };\n\n    const handlePostStory = async () => {\n        if (!file) return;\n\n        setIsUploading(true);\n        setError(null);\n\n        try {\n            const options = {\n                maxSizeMB: 1.5,\n                maxWidthOrHeight: 1920,\n                useWebWorker: true,\n            };\n            const compressedFile = await imageCompression(file, options);\n            \n            await onCreateStory(compressedFile, caption);\n\n            toast({\n                title: \"Success!\",\n                description: \"Your story has been posted.\",\n            });\n            onOpenChange(false);\n\n        } catch (err) {\n            console.error('Story upload failed:', err);\n            setError('Upload failed. Please try again.');\n            toast({\n                title: 'Upload Failed',\n                description: 'There was a problem posting your story.',\n                variant: 'destructive',\n            });\n        } finally {\n            setIsUploading(false);\n        }\n    };\n\n    return (\n        <Dialog open={isOpen} onOpenChange={onOpenChange}>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Create a new story</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4 py-4\">\n                    {!previewUrl ? (\n                        <div\n                            className=\"flex flex-col items-center justify-center p-8 border-2 border-dashed rounded-lg cursor-pointer\"\n                            onClick={() => fileInputRef.current?.click()}\n                        >\n                            <PlusCircle className=\"h-12 w-12 text-muted-foreground\" />\n                            <p className=\"mt-2 text-sm text-muted-foreground\">Click to select an image</p>\n                            <input\n                                type=\"file\"\n                                ref={fileInputRef}\n                                onChange={handleFileChange}\n                                className=\"hidden\"\n                                accept=\"image/*\"\n                            />\n                        </div>\n                    ) : (\n                        <div className=\"relative\">\n                            <Image\n                                src={previewUrl}\n                                alt=\"Story preview\"\n                                width={500}\n                                height={500}\n                                className=\"rounded-lg object-contain max-h-[50vh]\"\n                            />\n                            <Button\n                                variant=\"destructive\"\n                                size=\"icon\"\n                                className=\"absolute top-2 right-2 rounded-full h-7 w-7\"\n                                onClick={() => {\n                                    setFile(null);\n                                    setPreviewUrl(null);\n                                }}\n                            >\n                                <X className=\"h-4 w-4\" />\n                            </Button>\n                        </div>\n                    )}\n                    <Textarea\n                        placeholder=\"Add a caption... (optional)\"\n                        value={caption}\n                        onChange={(e) => setCaption(e.target.value)}\n                        disabled={isUploading || !file}\n                    />\n                     {error && (\n                        <div className=\"text-destructive text-sm flex items-center justify-between\">\n                            <span>{error}</span>\n                            <Button variant=\"link\" onClick={handlePostStory}>Retry</Button>\n                        </div>\n                    )}\n                </div>\n                <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isUploading}>\n                        Cancel\n                    </Button>\n                    <Button onClick={handlePostStory} disabled={!file || isUploading}>\n                        {isUploading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        {isUploading ? 'Posting...' : 'Post Story'}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","size_bytes":6317},"src/components/story-viewer.tsx":{"content":"\n'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport Image from 'next/image';\nimport { Story, User, StoryReaction } from '@/lib/types';\nimport { Dialog, DialogContent, DialogTitle } from './ui/dialog';\nimport { UserAvatar } from './user-avatar';\nimport { X, MoreVertical, Send, Eye, Trash2 } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { formatDistanceToNow } from 'date-fns';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from './ui/sheet';\nimport { ScrollArea } from './ui/scroll-area';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from './ui/dropdown-menu';\nimport { Timestamp } from 'firebase/firestore';\nimport { cn } from '@/lib/utils';\nimport { useToast } from '@/hooks/use-toast';\nimport { EmojiReactionAnimation } from './emoji-reaction-animation';\n\n\nconst DEFAULT_STORY_DURATION = 5000; // 5 seconds for images\nconst defaultReactions = ['❤️', '😂', '😮', '😢', '🔥', '👍'];\n\ninterface StoryViewerProps {\n    isOpen: boolean;\n    onOpenChange: (open: boolean) => void;\n    user: User;\n    stories: Story[];\n    currentUser?: User;\n    onMarkAsViewed: (storyId: string) => void;\n    onDeleteStory: (storyId: string) => void;\n    onReply: (story: Story, message: string) => void;\n    onReact: (storyId: string, emoji: string) => void;\n    usersCache: Map<string, User>;\n}\n\nconst toDate = (timestamp: Timestamp | Date | undefined): Date | null => {\n    if (!timestamp) return null;\n    if (timestamp instanceof Timestamp) {\n        return timestamp.toDate();\n    }\n    if (timestamp instanceof Date) {\n        return timestamp;\n    }\n    try {\n        const date = new Date(timestamp as any);\n        if (!isNaN(date.getTime())) {\n            return date;\n        }\n    } catch (e) {\n        // ignore\n    }\n    return null;\n};\n\n\nexport function StoryViewer({ \n    isOpen, \n    onOpenChange, \n    user, \n    stories, \n    currentUser,\n    onMarkAsViewed,\n    onDeleteStory,\n    onReply,\n    onReact,\n    usersCache,\n}: StoryViewerProps) {\n    const [currentStoryIndex, setCurrentStoryIndex] = useState(0);\n    const [replyText, setReplyText] = useState('');\n    const [isPaused, setIsPaused] = useState(false);\n    \n    const [reactionAnimation, setReactionAnimation] = useState<{ emoji: string, key: number } | null>(null);\n    const { toast } = useToast();\n    \n    const videoRef = useRef<HTMLVideoElement | null>(null);\n    const progressWrapperRef = useRef<HTMLDivElement>(null);\n\n    const currentStory = stories[currentStoryIndex];\n    const isOwner = currentUser?.uid === user.uid;\n\n    const goToNextStory = useCallback(() => {\n        if (currentStoryIndex < stories.length - 1) {\n            setCurrentStoryIndex(prev => prev + 1);\n        } else {\n            onOpenChange(false);\n        }\n    }, [stories.length, onOpenChange, currentStoryIndex]);\n\n    const goToPreviousStory = useCallback(() => {\n        setCurrentStoryIndex(prev => Math.max(0, prev - 1));\n    }, []);\n    \n    // Reset state when story data changes\n    useEffect(() => {\n        setCurrentStoryIndex(0);\n    }, [user.id, stories]);\n\n\n    const playStory = useCallback(() => setIsPaused(false), []);\n    const pauseStory = useCallback(() => setIsPaused(true), []);\n\n    // Effect for handling story progression and marking as viewed\n    useEffect(() => {\n        if (!isOpen || !currentStory) return;\n\n        if (currentUser && !currentStory.viewedBy.includes(currentUser.uid)) {\n            onMarkAsViewed(currentStory.id);\n        }\n\n        const video = videoRef.current;\n        if (currentStory.mediaType === 'video' && video) {\n            video.currentTime = 0;\n            video.play().catch(console.error);\n        }\n    }, [isOpen, currentStory, currentUser, onMarkAsViewed]);\n    \n    // Effect to handle pausing/playing animations and video\n    useEffect(() => {\n        const video = videoRef.current;\n        const progressWrappers = progressWrapperRef.current?.children;\n        if (!progressWrappers) return;\n        \n        const currentProgressBar = progressWrappers[currentStoryIndex]?.firstElementChild as HTMLDivElement | undefined;\n        \n        if (isPaused) {\n            video?.pause();\n            if (currentProgressBar) currentProgressBar.style.animationPlayState = 'paused';\n        } else {\n            video?.play().catch(console.error);\n             if (currentProgressBar) currentProgressBar.style.animationPlayState = 'running';\n        }\n    }, [isPaused, currentStoryIndex]);\n    \n    useEffect(() => {\n        if (!isOpen) {\n            setCurrentStoryIndex(0);\n            setIsPaused(false);\n        }\n    }, [isOpen]);\n\n    const handleVideoEnd = () => {\n        goToNextStory();\n    };\n    \n    const handleReaction = (emoji: string) => {\n        if (!isOwner) {\n            onReact(currentStory.id, emoji);\n            setReactionAnimation({ emoji, key: Date.now() });\n             toast({\n                title: `You reacted with ${emoji}`,\n                duration: 2000,\n             });\n        }\n    };\n    \n    const handleReply = () => {\n        if (!replyText.trim()) return;\n        onReply(currentStory, replyText);\n        setReplyText('');\n    };\n\n    if (!isOpen || !currentStory) return null;\n\n    const storyMediaSrc = currentStory.mediaUrl;\n    const createdAtDate = toDate(currentStory.createdAt);\n    const viewers = currentStory.viewedBy.map(uid => usersCache.get(uid)).filter(Boolean).filter(u => u!.uid !== user.uid) as User[];\n    \n    const getReactionForUser = (userId: string): string | undefined => {\n        return currentStory.reactions?.find(r => r.userId === userId)?.emoji;\n    }\n\n    return (\n        <Dialog open={isOpen} onOpenChange={onOpenChange}>\n            <DialogContent \n                className=\"bg-black/90 border-0 p-0 m-0 max-w-full w-full h-full sm:max-w-md sm:h-[90vh] sm:rounded-lg\"\n            >\n                <DialogTitle className=\"sr-only\">Story from {user.name}</DialogTitle>\n\n                <div \n                    className=\"relative h-full w-full flex flex-col items-center justify-center overflow-hidden rounded-lg\"\n                    onMouseDown={pauseStory}\n                    onMouseUp={playStory}\n                    onMouseLeave={playStory}\n                    onTouchStart={pauseStory}\n                    onTouchEnd={playStory}\n                >\n                    {/* Story Media */}\n                    {storyMediaSrc && (\n                        currentStory.mediaType === 'video' ? (\n                             <video\n                                ref={videoRef}\n                                key={currentStory.id}\n                                src={storyMediaSrc}\n                                className=\"object-contain w-full h-full\"\n                                playsInline\n                                autoPlay\n                                onEnded={handleVideoEnd}\n                            />\n                        ) : (\n                             <Image\n                                src={storyMediaSrc}\n                                alt={currentStory.caption || 'Story'}\n                                fill\n                                style={{objectFit:\"contain\"}}\n                                unoptimized\n                                priority\n                            />\n                        )\n                    )}\n                    \n                    {/* Navigation zones */}\n                    <div className=\"absolute inset-0 z-10 flex justify-between\">\n                        <div className=\"h-full w-1/3\" onClick={(e) => { e.stopPropagation(); goToPreviousStory(); }} />\n                        <div className=\"h-full w-1/3\" />\n                        <div className=\"h-full w-1/3\" onClick={(e) => { e.stopPropagation(); goToNextStory(); }} />\n                    </div>\n                    \n                    {reactionAnimation && (\n                        <div className=\"absolute inset-0 pointer-events-none z-30\">\n                            <EmojiReactionAnimation\n                                key={reactionAnimation.key}\n                                emoji={reactionAnimation.emoji}\n                            />\n                        </div>\n                    )}\n\n\n                    {/* Overlay with Header, Footer */}\n                    <div className=\"absolute inset-0 flex flex-col z-20 pointer-events-none\">\n                        {/* Progress bars */}\n                        <div ref={progressWrapperRef} className=\"flex gap-1 p-2\">\n                            {stories.map((s, index) => (\n                                <div key={s.id} className=\"flex-1 bg-white/30 rounded-full h-1 overflow-hidden\">\n                                     <div \n                                        className={cn(\n                                            \"bg-white h-full w-full origin-left\",\n                                            index === currentStoryIndex && 'animate-progress-bar'\n                                        )} \n                                        style={{ \n                                            transform: `scaleX(${index < currentStoryIndex ? 1 : 0})`,\n                                            animationDuration: index === currentStoryIndex ? (\n                                                currentStory.mediaType === 'video' \n                                                ? `${currentStory.duration || 5}s` \n                                                : `${DEFAULT_STORY_DURATION / 1000}s`\n                                            ) : '0s',\n                                            animationPlayState: isPaused ? 'paused' : 'running'\n                                        }}\n                                        onAnimationEnd={index === currentStoryIndex ? goToNextStory : undefined}\n                                     />\n                                </div>\n                            ))}\n                        </div>\n\n                        {/* Header */}\n                        <div className=\"flex items-center justify-between p-2 pointer-events-auto\">\n                            <div className=\"flex items-center gap-2\">\n                                <UserAvatar user={user} className=\"h-10 w-10\" />\n                                <div>\n                                    <p className=\"font-semibold text-white\">{user.name}</p>\n                                    <p className=\"text-xs text-neutral-300\">\n                                        {createdAtDate ? formatDistanceToNow(createdAtDate, { addSuffix: true }) : ''}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className=\"flex items-center\">\n                                <DropdownMenu>\n                                    <DropdownMenuTrigger asChild>\n                                        <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-white/10\">\n                                            <MoreVertical />\n                                        </Button>\n                                    </DropdownMenuTrigger>\n                                    <DropdownMenuContent className=\"mr-4 bg-background/80 backdrop-blur-lg border-white/20 text-foreground\">\n                                        {isOwner && (\n                                            <DropdownMenuItem\n                                                className=\"text-destructive\"\n                                                onClick={() => onDeleteStory(currentStory.id)}\n                                            >\n                                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                                <span>Delete Story</span>\n                                            </DropdownMenuItem>\n                                        )}\n                                    </DropdownMenuContent>\n                                </DropdownMenu>\n\n                                <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-white/10\" onClick={() => onOpenChange(false)}>\n                                    <X />\n                                </Button>\n                            </div>\n                        </div>\n\n                        {/* Spacer */}\n                        <div className=\"flex-1\" />\n\n                        {/* Footer */}\n                         <div className=\"p-4 w-full bg-gradient-to-t from-black/60 to-transparent pointer-events-auto\">\n                            {currentStory.caption && <p className=\"text-white text-center text-sm mb-2 p-2 bg-black/30 rounded-lg\">{currentStory.caption}</p>}\n                            \n                            {isOwner ? (\n                                <Sheet>\n                                    <SheetTrigger asChild>\n                                        <div className=\"flex justify-center mb-2\">\n                                            <Button variant=\"ghost\" className=\"text-white h-auto p-1\">\n                                                <Eye className=\"h-4 w-4 mr-1\" />\n                                                <span className=\"text-xs\">{viewers.length} {viewers.length === 1 ? 'view' : 'views'}</span>\n                                            </Button>\n                                        </div>\n                                    </SheetTrigger>\n                                    <SheetContent side=\"bottom\" className=\"bg-background/80 backdrop-blur-lg text-foreground h-1/2 rounded-t-2xl border-t\">\n                                        <SheetHeader>\n                                            <SheetTitle>Viewed by</SheetTitle>\n                                        </SheetHeader>\n                                        <ScrollArea className=\"h-[calc(100%-4rem)]\">\n                                            <div className=\"py-4\">\n                                                {viewers.length > 0 ? viewers.map(viewer => (\n                                                    <div key={viewer.uid} className=\"flex items-center justify-between p-2\">\n                                                        <div className=\"flex items-center gap-3\">\n                                                            <UserAvatar user={viewer} className=\"h-10 w-10\" />\n                                                            <p className=\"font-semibold\">{viewer.name}</p>\n                                                        </div>\n                                                        <span className=\"text-2xl\">{getReactionForUser(viewer.uid)}</span>\n                                                    </div>\n                                                )) : (\n                                                    <p className=\"text-center text-muted-foreground pt-8\">No views yet.</p>\n                                                )}\n                                            </div>\n                                        </ScrollArea>\n                                    </SheetContent>\n                                </Sheet>\n                            ) : (\n                                <div className=\"flex items-center gap-2\">\n                                    <Input\n                                        placeholder={`Reply to ${user.name}...`}\n                                        className=\"bg-black/50 border-white/30 text-white placeholder:text-neutral-300\"\n                                        value={replyText}\n                                        onChange={(e) => setReplyText(e.target.value)}\n                                        onFocus={pauseStory}\n                                        onBlur={playStory}\n                                        onKeyDown={(e) => {\n                                            if (e.key === 'Enter') {\n                                                e.preventDefault();\n                                                handleReply();\n                                            }\n                                        }}\n                                    />\n                                    <div className=\"flex\">\n                                    {defaultReactions.map(emoji => (\n                                        <Button key={emoji} size=\"icon\" variant=\"ghost\" className=\"text-white text-2xl hover:scale-125 transition-transform\" onClick={() => handleReaction(emoji)}>\n                                            {emoji}\n                                        </Button>\n                                    ))}\n                                    </div>\n                                    <Button size=\"icon\" variant=\"ghost\" className=\"text-white\" onClick={handleReply} disabled={!replyText.trim()}>\n                                        <Send />\n                                    </Button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","size_bytes":17214},"src/components/theme-toggle.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\n\nimport { Button } from \"@/components/ui/button\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      aria-label=\"Toggle theme\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":729},"src/components/upload-progress.tsx":{"content":"\n'use client';\nimport { X } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Progress } from './ui/progress';\n\ninterface UploadProgressProps {\n  progress?: number;\n  onCancel: () => void;\n}\n\nexport function UploadProgress({ progress, onCancel }: UploadProgressProps) {\n  const p = progress || 0;\n  return (\n    <div className=\"absolute inset-0 flex items-center justify-center bg-black/60 rounded-lg p-4\">\n      <div className=\"w-full flex items-center gap-2 text-white\">\n        <div className=\"flex-1\">\n          <p className=\"text-xs mb-1\">{p < 100 ? `Uploading... ${p.toFixed(0)}%` : 'Processing...'}</p>\n          <Progress value={p} className=\"h-1.5\" />\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-7 w-7 rounded-full bg-white/20 hover:bg-white/30\"\n          onClick={onCancel}\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n    ","size_bytes":960},"src/components/user-avatar.tsx":{"content":"\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport type { User } from '@/lib/types';\nimport type { User as FirebaseUser } from 'firebase/auth';\n\ntype UserLike = Partial<User> | (FirebaseUser | null);\n\ntype UserAvatarProps = {\n  user?: UserLike;\n  className?: string;\n  isFriend?: boolean;\n};\n\nexport function UserAvatar({ user, className, isFriend }: UserAvatarProps) {\n  if (!user) {\n    return <Avatar className={cn('border-2 border-background bg-muted', className)} />;\n  }\n\n  const getInitials = (name: string) => {\n    const names = name.split(' ');\n    const initials = names.map(n => n[0]).join('');\n    return initials.slice(0, 2).toUpperCase();\n  }\n\n  const name = 'name' in user ? user.name : ('displayName' in user ? user.displayName : null);\n  const photoURL = 'photoURL' in user ? user.photoURL : user.photoURL;\n  const status = 'status' in user ? user.status : undefined;\n  \n  const fallback = name ? getInitials(name) : 'U';\n  \n  const canDisplayImage = photoURL && (photoURL.startsWith('data:image') || photoURL.startsWith('http'));\n\n  return (\n    <div className=\"relative\">\n      <Avatar className={cn(\n        'border-2 border-background', \n        isFriend && 'border-green-500',\n        className\n      )}>\n        {canDisplayImage ? (\n          // --- Avatar Centering and Cropping Logic ---\n          // Instead of using <AvatarImage> with object-fit, which can be unreliable for non-square images,\n          // we use a div with a background image.\n          // - `backgroundSize: 'cover'` scales the image to be as large as possible without stretching,\n          //   ensuring it completely fills the circular container.\n          // - `backgroundPosition: 'center'` ensures the image is centered within the container.\n          // This combination effectively creates a perfect, centered circular crop of the image.\n          <div\n            className=\"w-full h-full rounded-full bg-cover bg-center\"\n            style={{ backgroundImage: `url(${photoURL})` }}\n          />\n        ) : (\n          <AvatarFallback>{fallback}</AvatarFallback>\n        )}\n      </Avatar>\n      {status === 'online' && (\n        <span className=\"absolute bottom-0 right-0 block h-3 w-3 rounded-full bg-green-500 border-2 border-card\" />\n      )}\n    </div>\n  );\n}\n","size_bytes":2339},"src/components/user-profile-sheet.tsx":{"content":"\n'use client';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet';\nimport { User } from '@/lib/types';\nimport { UserAvatar } from './user-avatar';\nimport { Button } from './ui/button';\nimport { Separator } from './ui/separator';\nimport { BellOff, Ban, Bell, MessageSquareText, Shield, UserPlus, Check, UserCheck, X, UserX } from 'lucide-react';\nimport Image from 'next/image';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';\nimport React, from 'react';\n\ninterface UserProfileSheetProps {\n  user: User;\n  currentUser: User;\n  chatId: string;\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  onFriendAction: (targetUserId: string, action: 'sendRequest' | 'acceptRequest' | 'declineRequest' | 'removeFriend') => void;\n  onBlockUser: (targetUserId: string, isBlocked: boolean) => void;\n  onMuteToggle: (conversationId: string) => void;\n}\n\nconst AI_USER_ID = 'gemini-ai-chat-bot-7a4b9c1d-f2e3-4d56-a1b2-c3d4e5f6a7b8';\n\nexport function UserProfileSheet({\n  user,\n  currentUser,\n  chatId,\n  isOpen,\n  onOpenChange,\n  onFriendAction,\n  onBlockUser,\n  onMuteToggle,\n}: UserProfileSheetProps) {\n  const isBlockConfirmOpen = false;\n  const isAiUser = user.id === AI_USER_ID;\n  \n  const isFriend = currentUser?.friends?.includes(user.uid);\n  const hasSentRequest = currentUser?.friendRequestsSent?.includes(user.uid);\n  const hasReceivedRequest = currentUser?.friendRequestsReceived?.includes(user.uid);\n  const isBlocked = currentUser?.blockedUsers?.includes(user.uid);\n  const isMuted = currentUser?.mutedConversations?.includes(chatId);\n\n  const handleFriendAction = (action: 'sendRequest' | 'acceptRequest' | 'declineRequest' | 'removeFriend') => {\n    onFriendAction(user.uid, action);\n  }\n  \n  const handleBlockAction = () => {\n    onBlockUser(user.uid, !!isBlocked);\n    onOpenChange(false);\n  }\n\n  const renderFriendButton = () => {\n    if (isFriend) {\n        return (\n            <div className=\"space-y-2\">\n                 <Button variant=\"secondary\" className=\"w-full justify-start\">\n                    <UserCheck className=\"mr-3 h-5 w-5\"/> Friends\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" onClick={() => handleFriendAction('removeFriend')}>\n                    <UserX className=\"mr-3 h-5 w-5\"/> Remove Friend\n                </Button>\n            </div>\n        )\n    }\n    if (hasSentRequest) {\n        return (\n             <Button variant=\"outline\" disabled className=\"w-full justify-start\">\n                <UserPlus className=\"mr-3 h-5 w-5\"/> Request Sent\n            </Button>\n        )\n    }\n    if (hasReceivedRequest) {\n        return (\n            <div className=\"space-y-2\">\n                 <Button variant=\"default\" className=\"w-full justify-start\" onClick={() => handleFriendAction('acceptRequest')}>\n                    <Check className=\"mr-3 h-5 w-5\"/> Accept Request\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" onClick={() => handleFriendAction('declineRequest')}>\n                    <X className=\"mr-3 h-5 w-5\"/> Decline Request\n                </Button>\n            </div>\n        )\n    }\n    return (\n         <Button variant=\"outline\" className=\"w-full justify-start\" onClick={() => handleFriendAction('sendRequest')}>\n            <UserPlus className=\"mr-3 h-5 w-5\"/> Add Friend\n        </Button>\n    )\n  }\n  \n  return (\n    <Sheet open={isOpen} onOpenChange={onOpenChange}>\n      <SheetContent className=\"w-full max-w-md bg-background/90 backdrop-blur-lg p-0 flex flex-col\">\n        <SheetHeader className=\"p-6 pb-0 text-left\">\n          <SheetTitle>Contact Info</SheetTitle>\n        </SheetHeader>\n        <div className=\"flex-1 overflow-y-auto\">\n          <div className=\"flex flex-col items-center justify-center p-6 space-y-4 border-b\">\n            <Dialog>\n              <DialogTrigger asChild>\n                <div className=\"relative cursor-pointer\">\n                    <UserAvatar user={user} isFriend={isFriend} className=\"w-32 h-32 text-4xl\" />\n                </div>\n              </DialogTrigger>\n              {user.photoURL && (\n                <DialogContent className=\"p-0 bg-transparent border-0 max-w-screen-md w-auto h-auto\">\n                    <DialogTitle className=\"sr-only\">Full-size avatar for {user.name}</DialogTitle>\n                    <Image\n                    src={user.photoURL}\n                    alt={user.name}\n                    width={800}\n                    height={800}\n                    className=\"rounded-lg h-full w-full\"\n                    style={{objectFit: \"contain\"}}\n                    />\n                </DialogContent>\n              )}\n            </Dialog>\n            <div className=\"text-center\">\n              <div className=\"flex items-center gap-2 justify-center\">\n                <h2 className=\"text-2xl font-bold\">{user.name}</h2>\n                {user.isPrivate && <Shield className=\"h-5 w-5 text-muted-foreground\" title=\"This account is private\" />}\n              </div>\n              <p className=\"text-muted-foreground\">{user.email}</p>\n            </div>\n            {!isAiUser && (\n                 <div className=\"flex gap-2 pt-2\">\n                    <Button variant=\"outline\" size=\"icon\"><MessageSquareText className=\"h-5 w-5\" /></Button>\n                </div>\n            )}\n          </div>\n          \n          <div className=\"p-6 space-y-4\">\n            <h3 className=\"font-semibold text-card-foreground\">About</h3>\n            <p className=\"text-sm text-muted-foreground\">\n                {user.about || 'No bio yet.'}\n            </p>\n          </div>\n\n          {!isAiUser && (\n              <div className=\"p-6 space-y-6\">\n                <Separator />\n                <div className=\"space-y-2\">\n                    {!isBlocked && renderFriendButton()}\n                    <Button \n                        variant=\"ghost\" \n                        className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n                        onClick={() => onMuteToggle(chatId)}\n                    >\n                        {isMuted ? <Bell className=\"mr-3 h-5 w-5 text-primary\" /> : <BellOff className=\"mr-3 h-5 w-5\" />}\n                        {isMuted ? 'Unmute Notifications' : 'Mute Notifications'}\n                    </Button>\n                    <Dialog>\n                        <DialogTrigger asChild>\n                            <Button variant=\"ghost\" className=\"w-full justify-start text-destructive hover:text-destructive\">\n                                <Ban className=\"mr-3 h-5 w-5\"/> {isBlocked ? 'Unblock' : 'Block'} {user.name}\n                            </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                            <DialogHeader>\n                                <DialogTitle>Are you sure?</DialogTitle>\n                                <DialogDescription>\n                                    {isBlocked \n                                        ? `If you unblock ${user.name}, they will be able to message you and see your profile.`\n                                        : `You will no longer see messages or chats from ${user.name}. They will not be notified.`\n                                    }\n                                </DialogDescription>\n                            </DialogHeader>\n                            <DialogFooter>\n                                <Button variant=\"outline\">Cancel</Button>\n                                <Button variant=\"destructive\" onClick={handleBlockAction}>{isBlocked ? 'Unblock' : 'Block'}</Button>\n                            </DialogFooter>\n                        </DialogContent>\n                    </Dialog>\n                </div>\n              </div>\n          )}\n\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":7930},"src/components/vibez-logo.tsx":{"content":"\nimport Link from 'next/link';\nimport { MessagesSquare } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport function VibezLogo({ className }: { className?: string }) {\n  return (\n    <Link href=\"/\" className={cn(\"flex items-center gap-2\", className)}>\n      <h1 className=\"text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-gradient-from to-gradient-to animated-gradient\">\n        Vibez\n      </h1>\n    </Link>\n  );\n}\n","size_bytes":449},"src/components/weather-widget.tsx":{"content":"\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button } from './ui/button';\nimport { Sun, Cloud, CloudRain, Wind, Zap, Snowflake, Loader2, MapPin, CloudFog, CloudSun } from 'lucide-react';\nimport { getWeather, GetWeatherOutput } from '@/ai/flows/weather-flow';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAppearance } from './providers/appearance-provider';\nimport { useRouter } from 'next/navigation';\n\nconst weatherIcons: Record<GetWeatherOutput['condition'], React.ReactNode> = {\n    Sunny: <Sun className=\"w-5 h-5 text-yellow-400\" />,\n    Clear: <Sun className=\"w-5 h-5 text-yellow-400\" />,\n    Cloudy: <Cloud className=\"w-5 h-5 text-gray-400\" />,\n    Rainy: <CloudRain className=\"w-5 h-5 text-blue-400\" />,\n    Windy: <Wind className=\"w-5 h-5 text-gray-300\" />,\n    Stormy: <Zap className=\"w-5 h-5 text-yellow-500\" />,\n    Snowy: <Snowflake className=\"w-5 h-5 text-white\" />,\n    Mist: <CloudFog className=\"w-5 h-5 text-gray-400\" />,\n    Haze: <CloudSun className=\"w-5 h-5 text-gray-400\" />,\n    Fog: <CloudFog className=\"w-5 h-5 text-gray-400\" />,\n};\n\nasync function getCityFromCoords(latitude: number, longitude: number): Promise<string | null> {\n    try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);\n        if (!response.ok) throw new Error(\"Failed to fetch city from coordinates\");\n        const data = await response.json();\n        return data.address.city || data.address.town || data.address.village || null;\n    } catch (error) {\n        console.error('Error fetching city from coordinates:', error);\n        return null;\n    }\n}\n\n\nexport function WeatherWidget() {\n    const [weather, setWeather] = useState<GetWeatherOutput | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const { toast } = useToast();\n    const router = useRouter();\n    const { weatherLocation, setWeatherLocation, weatherUnit } = useAppearance();\n    \n    const fetchWeather = useCallback(async (loc: string, unit: 'Celsius' | 'Fahrenheit') => {\n        if (!loc) {\n            setIsLoading(false);\n            setWeather(null);\n            return;\n        };\n        setIsLoading(true);\n        try {\n            const result = await getWeather({ location: loc, unit });\n            setWeather(result);\n        } catch (error) {\n            console.error(\"Error fetching weather:\", error);\n            setWeather(null);\n            toast({\n                title: 'Could not fetch weather',\n                description: 'The location might not be recognized. Please try a different city in settings.',\n                variant: 'destructive',\n            });\n        } finally {\n            setIsLoading(false);\n        }\n    }, [toast]);\n    \n    useEffect(() => {\n        if (weatherLocation) {\n            fetchWeather(weatherLocation, weatherUnit);\n        } else {\n            // Only try to geolocate if location is not set\n            navigator.geolocation.getCurrentPosition(\n                async (position) => {\n                    const city = await getCityFromCoords(position.coords.latitude, position.coords.longitude);\n                    if (city) {\n                        setWeatherLocation(city); // This will trigger the other effect\n                    } else {\n                        setIsLoading(false);\n                    }\n                },\n                (error) => {\n                    console.warn(\"Geolocation error:\", error);\n                    setIsLoading(false); \n                },\n                { timeout: 5000 }\n            );\n        }\n    }, [weatherLocation, weatherUnit, fetchWeather, setWeatherLocation]);\n\n\n    if (isLoading) {\n        return (\n            <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-2 text-muted-foreground\" disabled>\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span className=\"hidden sm:inline\">Loading Weather...</span>\n            </Button>\n        );\n    }\n    \n    if (!weather || !weatherLocation) {\n        return (\n             <Button variant=\"ghost\" size=\"sm\" onClick={() => router.push('/settings/weather')} className=\"flex items-center gap-2\">\n                <MapPin className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Set Weather Location</span>\n            </Button>\n        );\n    }\n\n    return (\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => router.push('/settings/weather')} className=\"flex items-center gap-2\">\n            {weatherIcons[weather.condition] || <Cloud className=\"w-5 h-5 text-gray-400\" />}\n            <span className=\"font-medium\">{Math.round(weather.temperature)}°{weather.unit === 'Celsius' ? 'C' : 'F'}</span>\n            <span className=\"text-muted-foreground hidden sm:inline\">{weatherLocation}</span>\n        </Button>\n    );\n}\n","size_bytes":4872},"src/dataconnect-generated/README.md":{"content":"# Generated TypeScript README\nThis README will guide you through the process of using the generated JavaScript SDK package for the connector `example`. It will also provide examples on how to use your generated SDK to call your Data Connect queries and mutations.\n\n**If you're looking for the `React README`, you can find it at [`dataconnect-generated/react/README.md`](./react/README.md)**\n\n***NOTE:** This README is generated alongside the generated SDK. If you make changes to this file, they will be overwritten when the SDK is regenerated.*\n\n# Table of Contents\n- [**Overview**](#generated-javascript-readme)\n- [**Accessing the connector**](#accessing-the-connector)\n  - [*Connecting to the local Emulator*](#connecting-to-the-local-emulator)\n- [**Queries**](#queries)\n  - [*ListSurveys*](#listsurveys)\n  - [*GetSurvey*](#getsurvey)\n- [**Mutations**](#mutations)\n  - [*CreateUser*](#createuser)\n  - [*UpdateSurveyStatus*](#updatesurveystatus)\n\n# Accessing the connector\nA connector is a collection of Queries and Mutations. One SDK is generated for each connector - this SDK is generated for the connector `example`. You can find more information about connectors in the [Data Connect documentation](https://firebase.google.com/docs/data-connect#how-does).\n\nYou can use this generated SDK by importing from the package `@dataconnect/generated` as shown below. Both CommonJS and ESM imports are supported.\n\nYou can also follow the instructions from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#set-client).\n\n```typescript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\n\nconst dataConnect = getDataConnect(connectorConfig);\n```\n\n## Connecting to the local Emulator\nBy default, the connector will connect to the production service.\n\nTo connect to the emulator, you can use the following code.\nYou can also follow the emulator instructions from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#instrument-clients).\n\n```typescript\nimport { connectDataConnectEmulator, getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\n\nconst dataConnect = getDataConnect(connectorConfig);\nconnectDataConnectEmulator(dataConnect, 'localhost', 9399);\n```\n\nAfter it's initialized, you can call your Data Connect [queries](#queries) and [mutations](#mutations) from your generated SDK.\n\n# Queries\n\nThere are two ways to execute a Data Connect Query using the generated Web SDK:\n- Using a Query Reference function, which returns a `QueryRef`\n  - The `QueryRef` can be used as an argument to `executeQuery()`, which will execute the Query and return a `QueryPromise`\n- Using an action shortcut function, which returns a `QueryPromise`\n  - Calling the action shortcut function will execute the Query and return a `QueryPromise`\n\nThe following is true for both the action shortcut function and the `QueryRef` function:\n- The `QueryPromise` returned will resolve to the result of the Query once it has finished executing\n- If the Query accepts arguments, both the action shortcut function and the `QueryRef` function accept a single argument: an object that contains all the required variables (and the optional variables) for the Query\n- Both functions can be called with or without passing in a `DataConnect` instance as an argument. If no `DataConnect` argument is passed in, then the generated SDK will call `getDataConnect(connectorConfig)` behind the scenes for you.\n\nBelow are examples of how to use the `example` connector's generated functions to execute each query. You can also follow the examples from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#using-queries).\n\n## ListSurveys\nYou can execute the `ListSurveys` query using the following action shortcut function, or by calling `executeQuery()` after calling the following `QueryRef` function, both of which are defined in [dataconnect-generated/index.d.ts](./index.d.ts):\n```typescript\nlistSurveys(): QueryPromise<ListSurveysData, undefined>;\n\ninterface ListSurveysRef {\n  ...\n  /* Allow users to create refs without passing in DataConnect */\n  (): QueryRef<ListSurveysData, undefined>;\n}\nexport const listSurveysRef: ListSurveysRef;\n```\nYou can also pass in a `DataConnect` instance to the action shortcut function or `QueryRef` function.\n```typescript\nlistSurveys(dc: DataConnect): QueryPromise<ListSurveysData, undefined>;\n\ninterface ListSurveysRef {\n  ...\n  (dc: DataConnect): QueryRef<ListSurveysData, undefined>;\n}\nexport const listSurveysRef: ListSurveysRef;\n```\n\nIf you need the name of the operation without creating a ref, you can retrieve the operation name by calling the `operationName` property on the listSurveysRef:\n```typescript\nconst name = listSurveysRef.operationName;\nconsole.log(name);\n```\n\n### Variables\nThe `ListSurveys` query has no variables.\n### Return Type\nRecall that executing the `ListSurveys` query returns a `QueryPromise` that resolves to an object with a `data` property.\n\nThe `data` property is an object of type `ListSurveysData`, which is defined in [dataconnect-generated/index.d.ts](./index.d.ts). It has the following fields:\n```typescript\nexport interface ListSurveysData {\n  surveys: ({\n    id: UUIDString;\n    title: string;\n    description?: string | null;\n  } & Survey_Key)[];\n}\n```\n### Using `ListSurveys`'s action shortcut function\n\n```typescript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig, listSurveys } from '@dataconnect/generated';\n\n\n// Call the `listSurveys()` function to execute the query.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await listSurveys();\n\n// You can also pass in a `DataConnect` instance to the action shortcut function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst { data } = await listSurveys(dataConnect);\n\nconsole.log(data.surveys);\n\n// Or, you can use the `Promise` API.\nlistSurveys().then((response) => {\n  const data = response.data;\n  console.log(data.surveys);\n});\n```\n\n### Using `ListSurveys`'s `QueryRef` function\n\n```typescript\nimport { getDataConnect, executeQuery } from 'firebase/data-connect';\nimport { connectorConfig, listSurveysRef } from '@dataconnect/generated';\n\n\n// Call the `listSurveysRef()` function to get a reference to the query.\nconst ref = listSurveysRef();\n\n// You can also pass in a `DataConnect` instance to the `QueryRef` function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst ref = listSurveysRef(dataConnect);\n\n// Call `executeQuery()` on the reference to execute the query.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await executeQuery(ref);\n\nconsole.log(data.surveys);\n\n// Or, you can use the `Promise` API.\nexecuteQuery(ref).then((response) => {\n  const data = response.data;\n  console.log(data.surveys);\n});\n```\n\n## GetSurvey\nYou can execute the `GetSurvey` query using the following action shortcut function, or by calling `executeQuery()` after calling the following `QueryRef` function, both of which are defined in [dataconnect-generated/index.d.ts](./index.d.ts):\n```typescript\ngetSurvey(): QueryPromise<GetSurveyData, undefined>;\n\ninterface GetSurveyRef {\n  ...\n  /* Allow users to create refs without passing in DataConnect */\n  (): QueryRef<GetSurveyData, undefined>;\n}\nexport const getSurveyRef: GetSurveyRef;\n```\nYou can also pass in a `DataConnect` instance to the action shortcut function or `QueryRef` function.\n```typescript\ngetSurvey(dc: DataConnect): QueryPromise<GetSurveyData, undefined>;\n\ninterface GetSurveyRef {\n  ...\n  (dc: DataConnect): QueryRef<GetSurveyData, undefined>;\n}\nexport const getSurveyRef: GetSurveyRef;\n```\n\nIf you need the name of the operation without creating a ref, you can retrieve the operation name by calling the `operationName` property on the getSurveyRef:\n```typescript\nconst name = getSurveyRef.operationName;\nconsole.log(name);\n```\n\n### Variables\nThe `GetSurvey` query has no variables.\n### Return Type\nRecall that executing the `GetSurvey` query returns a `QueryPromise` that resolves to an object with a `data` property.\n\nThe `data` property is an object of type `GetSurveyData`, which is defined in [dataconnect-generated/index.d.ts](./index.d.ts). It has the following fields:\n```typescript\nexport interface GetSurveyData {\n  survey?: {\n    id: UUIDString;\n    title: string;\n    description?: string | null;\n    questions_on_survey: ({\n      id: UUIDString;\n      text: string;\n      order: number;\n    } & Question_Key)[];\n  } & Survey_Key;\n}\n```\n### Using `GetSurvey`'s action shortcut function\n\n```typescript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig, getSurvey } from '@dataconnect/generated';\n\n\n// Call the `getSurvey()` function to execute the query.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await getSurvey();\n\n// You can also pass in a `DataConnect` instance to the action shortcut function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst { data } = await getSurvey(dataConnect);\n\nconsole.log(data.survey);\n\n// Or, you can use the `Promise` API.\ngetSurvey().then((response) => {\n  const data = response.data;\n  console.log(data.survey);\n});\n```\n\n### Using `GetSurvey`'s `QueryRef` function\n\n```typescript\nimport { getDataConnect, executeQuery } from 'firebase/data-connect';\nimport { connectorConfig, getSurveyRef } from '@dataconnect/generated';\n\n\n// Call the `getSurveyRef()` function to get a reference to the query.\nconst ref = getSurveyRef();\n\n// You can also pass in a `DataConnect` instance to the `QueryRef` function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst ref = getSurveyRef(dataConnect);\n\n// Call `executeQuery()` on the reference to execute the query.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await executeQuery(ref);\n\nconsole.log(data.survey);\n\n// Or, you can use the `Promise` API.\nexecuteQuery(ref).then((response) => {\n  const data = response.data;\n  console.log(data.survey);\n});\n```\n\n# Mutations\n\nThere are two ways to execute a Data Connect Mutation using the generated Web SDK:\n- Using a Mutation Reference function, which returns a `MutationRef`\n  - The `MutationRef` can be used as an argument to `executeMutation()`, which will execute the Mutation and return a `MutationPromise`\n- Using an action shortcut function, which returns a `MutationPromise`\n  - Calling the action shortcut function will execute the Mutation and return a `MutationPromise`\n\nThe following is true for both the action shortcut function and the `MutationRef` function:\n- The `MutationPromise` returned will resolve to the result of the Mutation once it has finished executing\n- If the Mutation accepts arguments, both the action shortcut function and the `MutationRef` function accept a single argument: an object that contains all the required variables (and the optional variables) for the Mutation\n- Both functions can be called with or without passing in a `DataConnect` instance as an argument. If no `DataConnect` argument is passed in, then the generated SDK will call `getDataConnect(connectorConfig)` behind the scenes for you.\n\nBelow are examples of how to use the `example` connector's generated functions to execute each mutation. You can also follow the examples from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#using-mutations).\n\n## CreateUser\nYou can execute the `CreateUser` mutation using the following action shortcut function, or by calling `executeMutation()` after calling the following `MutationRef` function, both of which are defined in [dataconnect-generated/index.d.ts](./index.d.ts):\n```typescript\ncreateUser(): MutationPromise<CreateUserData, undefined>;\n\ninterface CreateUserRef {\n  ...\n  /* Allow users to create refs without passing in DataConnect */\n  (): MutationRef<CreateUserData, undefined>;\n}\nexport const createUserRef: CreateUserRef;\n```\nYou can also pass in a `DataConnect` instance to the action shortcut function or `MutationRef` function.\n```typescript\ncreateUser(dc: DataConnect): MutationPromise<CreateUserData, undefined>;\n\ninterface CreateUserRef {\n  ...\n  (dc: DataConnect): MutationRef<CreateUserData, undefined>;\n}\nexport const createUserRef: CreateUserRef;\n```\n\nIf you need the name of the operation without creating a ref, you can retrieve the operation name by calling the `operationName` property on the createUserRef:\n```typescript\nconst name = createUserRef.operationName;\nconsole.log(name);\n```\n\n### Variables\nThe `CreateUser` mutation has no variables.\n### Return Type\nRecall that executing the `CreateUser` mutation returns a `MutationPromise` that resolves to an object with a `data` property.\n\nThe `data` property is an object of type `CreateUserData`, which is defined in [dataconnect-generated/index.d.ts](./index.d.ts). It has the following fields:\n```typescript\nexport interface CreateUserData {\n  user_insert: User_Key;\n}\n```\n### Using `CreateUser`'s action shortcut function\n\n```typescript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig, createUser } from '@dataconnect/generated';\n\n\n// Call the `createUser()` function to execute the mutation.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await createUser();\n\n// You can also pass in a `DataConnect` instance to the action shortcut function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst { data } = await createUser(dataConnect);\n\nconsole.log(data.user_insert);\n\n// Or, you can use the `Promise` API.\ncreateUser().then((response) => {\n  const data = response.data;\n  console.log(data.user_insert);\n});\n```\n\n### Using `CreateUser`'s `MutationRef` function\n\n```typescript\nimport { getDataConnect, executeMutation } from 'firebase/data-connect';\nimport { connectorConfig, createUserRef } from '@dataconnect/generated';\n\n\n// Call the `createUserRef()` function to get a reference to the mutation.\nconst ref = createUserRef();\n\n// You can also pass in a `DataConnect` instance to the `MutationRef` function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst ref = createUserRef(dataConnect);\n\n// Call `executeMutation()` on the reference to execute the mutation.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await executeMutation(ref);\n\nconsole.log(data.user_insert);\n\n// Or, you can use the `Promise` API.\nexecuteMutation(ref).then((response) => {\n  const data = response.data;\n  console.log(data.user_insert);\n});\n```\n\n## UpdateSurveyStatus\nYou can execute the `UpdateSurveyStatus` mutation using the following action shortcut function, or by calling `executeMutation()` after calling the following `MutationRef` function, both of which are defined in [dataconnect-generated/index.d.ts](./index.d.ts):\n```typescript\nupdateSurveyStatus(): MutationPromise<UpdateSurveyStatusData, undefined>;\n\ninterface UpdateSurveyStatusRef {\n  ...\n  /* Allow users to create refs without passing in DataConnect */\n  (): MutationRef<UpdateSurveyStatusData, undefined>;\n}\nexport const updateSurveyStatusRef: UpdateSurveyStatusRef;\n```\nYou can also pass in a `DataConnect` instance to the action shortcut function or `MutationRef` function.\n```typescript\nupdateSurveyStatus(dc: DataConnect): MutationPromise<UpdateSurveyStatusData, undefined>;\n\ninterface UpdateSurveyStatusRef {\n  ...\n  (dc: DataConnect): MutationRef<UpdateSurveyStatusData, undefined>;\n}\nexport const updateSurveyStatusRef: UpdateSurveyStatusRef;\n```\n\nIf you need the name of the operation without creating a ref, you can retrieve the operation name by calling the `operationName` property on the updateSurveyStatusRef:\n```typescript\nconst name = updateSurveyStatusRef.operationName;\nconsole.log(name);\n```\n\n### Variables\nThe `UpdateSurveyStatus` mutation has no variables.\n### Return Type\nRecall that executing the `UpdateSurveyStatus` mutation returns a `MutationPromise` that resolves to an object with a `data` property.\n\nThe `data` property is an object of type `UpdateSurveyStatusData`, which is defined in [dataconnect-generated/index.d.ts](./index.d.ts). It has the following fields:\n```typescript\nexport interface UpdateSurveyStatusData {\n  survey_update?: Survey_Key | null;\n}\n```\n### Using `UpdateSurveyStatus`'s action shortcut function\n\n```typescript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig, updateSurveyStatus } from '@dataconnect/generated';\n\n\n// Call the `updateSurveyStatus()` function to execute the mutation.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await updateSurveyStatus();\n\n// You can also pass in a `DataConnect` instance to the action shortcut function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst { data } = await updateSurveyStatus(dataConnect);\n\nconsole.log(data.survey_update);\n\n// Or, you can use the `Promise` API.\nupdateSurveyStatus().then((response) => {\n  const data = response.data;\n  console.log(data.survey_update);\n});\n```\n\n### Using `UpdateSurveyStatus`'s `MutationRef` function\n\n```typescript\nimport { getDataConnect, executeMutation } from 'firebase/data-connect';\nimport { connectorConfig, updateSurveyStatusRef } from '@dataconnect/generated';\n\n\n// Call the `updateSurveyStatusRef()` function to get a reference to the mutation.\nconst ref = updateSurveyStatusRef();\n\n// You can also pass in a `DataConnect` instance to the `MutationRef` function.\nconst dataConnect = getDataConnect(connectorConfig);\nconst ref = updateSurveyStatusRef(dataConnect);\n\n// Call `executeMutation()` on the reference to execute the mutation.\n// You can use the `await` keyword to wait for the promise to resolve.\nconst { data } = await executeMutation(ref);\n\nconsole.log(data.survey_update);\n\n// Or, you can use the `Promise` API.\nexecuteMutation(ref).then((response) => {\n  const data = response.data;\n  console.log(data.survey_update);\n});\n```\n\n","size_bytes":18091},"src/dataconnect-generated/index.cjs.js":{"content":"const { queryRef, executeQuery, mutationRef, executeMutation, validateArgs } = require('firebase/data-connect');\n\nconst connectorConfig = {\n  connector: 'example',\n  service: 'invincible476-patch-1',\n  location: 'us-central1'\n};\nexports.connectorConfig = connectorConfig;\n\nconst createUserRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return mutationRef(dcInstance, 'CreateUser');\n}\ncreateUserRef.operationName = 'CreateUser';\nexports.createUserRef = createUserRef;\n\nexports.createUser = function createUser(dc) {\n  return executeMutation(createUserRef(dc));\n};\n\nconst listSurveysRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return queryRef(dcInstance, 'ListSurveys');\n}\nlistSurveysRef.operationName = 'ListSurveys';\nexports.listSurveysRef = listSurveysRef;\n\nexports.listSurveys = function listSurveys(dc) {\n  return executeQuery(listSurveysRef(dc));\n};\n\nconst updateSurveyStatusRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return mutationRef(dcInstance, 'UpdateSurveyStatus');\n}\nupdateSurveyStatusRef.operationName = 'UpdateSurveyStatus';\nexports.updateSurveyStatusRef = updateSurveyStatusRef;\n\nexports.updateSurveyStatus = function updateSurveyStatus(dc) {\n  return executeMutation(updateSurveyStatusRef(dc));\n};\n\nconst getSurveyRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return queryRef(dcInstance, 'GetSurvey');\n}\ngetSurveyRef.operationName = 'GetSurvey';\nexports.getSurveyRef = getSurveyRef;\n\nexports.getSurvey = function getSurvey(dc) {\n  return executeQuery(getSurveyRef(dc));\n};\n","size_bytes":1808},"src/dataconnect-generated/index.d.ts":{"content":"import { ConnectorConfig, DataConnect, QueryRef, QueryPromise, MutationRef, MutationPromise } from 'firebase/data-connect';\n\nexport const connectorConfig: ConnectorConfig;\n\nexport type TimestampString = string;\nexport type UUIDString = string;\nexport type Int64String = string;\nexport type DateString = string;\n\n\n\n\nexport interface Answer_Key {\n  id: UUIDString;\n  __typename?: 'Answer_Key';\n}\n\nexport interface CreateUserData {\n  user_insert: User_Key;\n}\n\nexport interface GetSurveyData {\n  survey?: {\n    id: UUIDString;\n    title: string;\n    description?: string | null;\n    questions_on_survey: ({\n      id: UUIDString;\n      text: string;\n      order: number;\n    } & Question_Key)[];\n  } & Survey_Key;\n}\n\nexport interface ListSurveysData {\n  surveys: ({\n    id: UUIDString;\n    title: string;\n    description?: string | null;\n  } & Survey_Key)[];\n}\n\nexport interface Question_Key {\n  id: UUIDString;\n  __typename?: 'Question_Key';\n}\n\nexport interface Response_Key {\n  id: UUIDString;\n  __typename?: 'Response_Key';\n}\n\nexport interface Survey_Key {\n  id: UUIDString;\n  __typename?: 'Survey_Key';\n}\n\nexport interface UpdateSurveyStatusData {\n  survey_update?: Survey_Key | null;\n}\n\nexport interface User_Key {\n  id: UUIDString;\n  __typename?: 'User_Key';\n}\n\ninterface CreateUserRef {\n  /* Allow users to create refs without passing in DataConnect */\n  (): MutationRef<CreateUserData, undefined>;\n  /* Allow users to pass in custom DataConnect instances */\n  (dc: DataConnect): MutationRef<CreateUserData, undefined>;\n  operationName: string;\n}\nexport const createUserRef: CreateUserRef;\n\nexport function createUser(): MutationPromise<CreateUserData, undefined>;\nexport function createUser(dc: DataConnect): MutationPromise<CreateUserData, undefined>;\n\ninterface ListSurveysRef {\n  /* Allow users to create refs without passing in DataConnect */\n  (): QueryRef<ListSurveysData, undefined>;\n  /* Allow users to pass in custom DataConnect instances */\n  (dc: DataConnect): QueryRef<ListSurveysData, undefined>;\n  operationName: string;\n}\nexport const listSurveysRef: ListSurveysRef;\n\nexport function listSurveys(): QueryPromise<ListSurveysData, undefined>;\nexport function listSurveys(dc: DataConnect): QueryPromise<ListSurveysData, undefined>;\n\ninterface UpdateSurveyStatusRef {\n  /* Allow users to create refs without passing in DataConnect */\n  (): MutationRef<UpdateSurveyStatusData, undefined>;\n  /* Allow users to pass in custom DataConnect instances */\n  (dc: DataConnect): MutationRef<UpdateSurveyStatusData, undefined>;\n  operationName: string;\n}\nexport const updateSurveyStatusRef: UpdateSurveyStatusRef;\n\nexport function updateSurveyStatus(): MutationPromise<UpdateSurveyStatusData, undefined>;\nexport function updateSurveyStatus(dc: DataConnect): MutationPromise<UpdateSurveyStatusData, undefined>;\n\ninterface GetSurveyRef {\n  /* Allow users to create refs without passing in DataConnect */\n  (): QueryRef<GetSurveyData, undefined>;\n  /* Allow users to pass in custom DataConnect instances */\n  (dc: DataConnect): QueryRef<GetSurveyData, undefined>;\n  operationName: string;\n}\nexport const getSurveyRef: GetSurveyRef;\n\nexport function getSurvey(): QueryPromise<GetSurveyData, undefined>;\nexport function getSurvey(dc: DataConnect): QueryPromise<GetSurveyData, undefined>;\n\n","size_bytes":3287},"src/hooks/use-auth.ts":{"content":"'use client';\n\nimport { AuthContext } from '@/components/providers/auth-provider';\nimport { useContext } from 'react';\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","size_bytes":318},"src/hooks/use-debounce.ts":{"content":"\n'use client';\nimport { useState, useEffect } from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","size_bytes":401},"src/hooks/use-is-mobile.ts":{"content":"\nimport * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":566},"src/hooks/use-mobile-keyboard-height.ts":{"content":"import { useEffect, useState } from 'react';\n\n/**\n * Detects the visible viewport height on mobile, accounting for the on-screen keyboard.\n * Returns the current viewport height and whether the keyboard is open.\n */\nexport function useMobileKeyboardHeight() {\n  const [viewportHeight, setViewportHeight] = useState<number>(typeof window !== 'undefined' ? window.innerHeight : 0);\n  const [keyboardOpen, setKeyboardOpen] = useState(false);\n\n  useEffect(() => {\n    const updateHeight = () => {\n      if (window.visualViewport) {\n        setViewportHeight(window.visualViewport.height);\n        // Heuristic: keyboard is open if visualViewport height is much less than window.innerHeight\n        setKeyboardOpen(window.visualViewport.height < window.innerHeight - 100);\n      } else {\n        setViewportHeight(window.innerHeight);\n        setKeyboardOpen(false);\n      }\n    };\n    updateHeight();\n    window.visualViewport?.addEventListener('resize', updateHeight);\n    window.addEventListener('resize', updateHeight);\n    return () => {\n      window.visualViewport?.removeEventListener('resize', updateHeight);\n      window.removeEventListener('resize', updateHeight);\n    };\n  }, []);\n\n  return { viewportHeight, keyboardOpen };\n}\n","size_bytes":1233},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-notifications.ts":{"content":"\n'use client';\nimport { useEffect, useRef, useCallback } from 'react';\nimport { Conversation, User } from '@/lib/types';\nimport { useAppearance } from '@/components/providers/appearance-provider';\nimport { createToneAudio } from '@/lib/sound';\n\ninterface UseNotificationsProps {\n  conversations: Conversation[];\n  usersCache: Map<string, User>;\n  currentUser?: User;\n  activeChatId?: string;\n}\n\nexport function useNotifications({\n  conversations,\n  usersCache,\n  currentUser,\n  activeChatId,\n}: UseNotificationsProps): void {\n  const { notificationSound, areNotificationsMuted } = useAppearance();\n  const previousConversations = useRef<Map<string, number>>(new Map());\n  const isFirstRun = useRef(true);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'Notification' in window && Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  const playSound = useCallback(() => {\n    if (areNotificationsMuted || typeof window === 'undefined') return;\n    \n    try {\n        if (notificationSound === 'default') {\n            const { audio, source } = createToneAudio();\n            audio.start(0);\n            setTimeout(() => {\n                source.stop();\n            }, 200); // Stop the tone after 200ms\n        } else if (notificationSound.startsWith('data:audio')) {\n            const audio = new Audio(notificationSound);\n            audio.play().catch(error => {\n                console.error(\"Error playing custom notification sound:\", error);\n            });\n        }\n    } catch (error) {\n        console.error(\"Error handling notification sound:\", error);\n    }\n  }, [areNotificationsMuted, notificationSound]);\n\n  const showNotification = useCallback((sender: User, messageText: string, conversationId: string) => {\n    const isMuted = currentUser?.mutedConversations?.includes(conversationId);\n    \n    // Do not show notification or play sound if the tab is visible AND the active chat is the one receiving the message\n    if (document.visibilityState === 'visible' && activeChatId === conversationId) return;\n    if (isMuted) return;\n    \n    playSound();\n\n    if (\n      typeof window === 'undefined' ||\n      !('Notification' in window) ||\n      Notification.permission !== 'granted'\n    ) {\n      return;\n    }\n\n    const title = `New message from ${sender.name}`;\n    const options: NotificationOptions = {\n      body: messageText,\n      icon: sender.photoURL || '/icons/icon-192x192.png',\n      tag: `vibez-message-${conversationId}`,\n      renotify: true,\n    };\n    \n    new Notification(title, options);\n\n  }, [playSound, currentUser, activeChatId]);\n\n\n  useEffect(() => {\n    if (!currentUser || conversations.length === 0) {\n        return;\n    }\n\n    const currentConvoState = new Map<string, number>();\n    conversations.forEach((convo) => {\n        if(convo.lastMessage?.timestamp) {\n            const timestamp = convo.lastMessage.timestamp?.toMillis?.() || (convo.lastMessage.timestamp instanceof Date ? convo.lastMessage.timestamp.getTime() : 0);\n            currentConvoState.set(convo.id, timestamp);\n        }\n    });\n\n    // On the first run, just populate the previous state and do nothing.\n    if (isFirstRun.current) {\n        previousConversations.current = currentConvoState;\n        isFirstRun.current = false;\n        return;\n    }\n\n    conversations.forEach((convo) => {\n        const newTimestamp = currentConvoState.get(convo.id) || 0;\n        const oldTimestamp = previousConversations.current.get(convo.id); // Can be undefined\n\n        // A notification should only trigger if the message is new and wasn't there on the previous check.\n        if (newTimestamp > 0 && oldTimestamp !== undefined && newTimestamp > oldTimestamp && convo.lastMessage?.senderId !== currentUser.uid) {\n            const sender = usersCache.get(convo.lastMessage.senderId);\n            if (sender) {\n                showNotification(sender, convo.lastMessage.text, convo.id);\n            }\n        }\n    });\n\n    previousConversations.current = currentConvoState;\n\n  }, [conversations, currentUser, usersCache, showNotification]);\n}\n","size_bytes":4116},"src/hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"src/lib/data.ts":{"content":"\nimport { User, Conversation, Story } from './types';\n\n// This file is now mostly deprecated in favor of Firestore,\n// but we'll keep it for structure reference and potential offline support later.\n\nexport const users: User[] = [\n  // Users will be fetched from Firestore\n];\n\nexport const conversations: Conversation[] = [\n  // Conversations will be fetched from Firestore\n];\n\nexport const stories: Story[] = [\n    // Stories will be fetched from Firestore\n];\n","size_bytes":460},"src/lib/firebase.ts":{"content":"// Import the functions you need from the SDKs you need\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore, setDoc } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n\n// Your web app's Firebase configuration\n// Fallback values for Replit environment\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY || \"AIzaSyDemoKey1234567890abcdefghijklmnop\",\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN || `${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || \"vibez-demo\"}.firebaseapp.com`,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || \"vibez-demo\",\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || `${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || \"vibez-demo\"}.appspot.com`,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || \"123456789012\",\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID || \"1:123456789012:web:abcdef1234567890abcdef\",\n  measurementId: process.env.NEXT_PUBLIC_MEASUREMENT_ID || \"G-DEMO123456\",\n};\n\n// Validate required Firebase config\nconst requiredConfig = ['apiKey', 'authDomain', 'projectId', 'appId'];\nconst missingConfig = requiredConfig.filter(key => !firebaseConfig[key as keyof typeof firebaseConfig]);\n\nif (missingConfig.length > 0) {\n  console.error('Missing Firebase configuration:', missingConfig);\n  console.error('Current config values:', {\n    apiKey: firebaseConfig.apiKey ? 'SET' : 'MISSING',\n    authDomain: firebaseConfig.authDomain ? 'SET' : 'MISSING',\n    projectId: firebaseConfig.projectId ? 'SET' : 'MISSING',\n    appId: firebaseConfig.appId ? 'SET' : 'MISSING',\n  });\n  throw new Error(`Missing Firebase configuration: ${missingConfig.join(', ')}. Please check your environment variables.`);\n}\n\n// Debug configuration loading\nconsole.log('Firebase config loading:', {\n  hasApiKey: !!firebaseConfig.apiKey,\n  hasAuthDomain: !!firebaseConfig.authDomain,\n  hasProjectId: !!firebaseConfig.projectId,\n  authDomain: firebaseConfig.authDomain,\n  currentDomain: typeof window !== 'undefined' ? window.location.hostname : 'server',\n  apiKeyPrefix: firebaseConfig.apiKey?.substring(0, 5),\n});\n\n// Validate API key format\nif (firebaseConfig.apiKey && !firebaseConfig.apiKey.startsWith('AIza')) {\n  console.error('Invalid Firebase API key format. API key should start with \"AIza\"');\n  throw new Error('Invalid Firebase API key format');\n}\n\n// Log current domain for debugging\nif (typeof window !== 'undefined') {\n  console.log('Current domain:', window.location.hostname);\n  console.log('Current origin:', window.location.origin);\n}\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconsole.log('Firebase app initialized successfully');\n\n// Initialize Firebase Auth with better domain handling\nexport const auth = getAuth(app);\n\n// Configure auth for Replit domains\nif (typeof window !== 'undefined') {\n  const currentDomain = window.location.hostname;\n  console.log('Current domain:', currentDomain);\n  console.log('Current origin:', window.location.origin);\n\n  // Add current domain to authorized domains for development\n  if (currentDomain.includes('.replit.dev') || currentDomain.includes('.repl.co')) {\n    // Replit domains are automatically handled by Firebase\n    console.log('Running on Replit domain, auth should work automatically');\n  }\n}\n\n// Initialize Firestore\nexport const db = getFirestore(app);\n\n// Initialize Firebase Storage\nexport const storage = getStorage(app);\n\n// Export Firestore functions\nexport { setDoc };","size_bytes":3602},"src/lib/placeholder-images.ts":{"content":"import data from './placeholder-images.json';\n\nexport type ImagePlaceholder = {\n  id: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n};\n\nexport const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;\n","size_bytes":239},"src/lib/sound.ts":{"content":"\n'use client';\n\nexport function createToneAudio() {\n  if (typeof window === 'undefined') {\n    // Return a dummy object for SSR\n    return { \n        audio: { start: () => {}, stop: () => {} }, \n        source: { stop: () => {} } \n    } as any;\n  }\n  \n  const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n  \n  const oscillator = audioContext.createOscillator();\n  const gainNode = audioContext.createGain();\n\n  oscillator.connect(gainNode);\n  gainNode.connect(audioContext.destination);\n\n  // High-pitched, short \"bip\" sound\n  oscillator.type = 'sine';\n  oscillator.frequency.setValueAtTime(880, audioContext.currentTime); // A5 note\n  \n  // Fade out quickly\n  gainNode.gain.setValueAtTime(1, audioContext.currentTime);\n  gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.2);\n\n  return { audio: oscillator, source: oscillator };\n}\n","size_bytes":897},"src/lib/types.ts":{"content":"\nimport { Timestamp } from \"firebase/firestore\";\n\ntype Device = {\n    id: string;\n    type: 'web' | 'mobile';\n    loggedInAt: Timestamp;\n};\n\nexport type User = {\n  id: string;\n  uid: string;\n  name: string;\n  photoURL?: string | null;\n  status: 'online' | 'offline';\n  email?: string;\n  isPrivate?: boolean;\n  friends?: string[];\n  friendRequestsSent?: string[];\n  friendRequestsReceived?: string[];\n  blockedUsers?: string[];\n  stories?: string[]; // array of story ids\n  isVerified?: boolean;\n  background?: string;\n  useCustomBackground?: boolean;\n  mutedConversations?: string[];\n  devices?: Device[];\n  about?: string;\n};\n\nexport type MessageReaction = {\n  emoji: string;\n  users: string[]; // array of user uids\n  count: number;\n};\n\nexport type Message = {\n  id:string;\n  senderId: string;\n  text: string;\n  timestamp: any;\n  status: 'sent' | 'delivered' | 'read' | 'sending' | 'error';\n  reactions?: MessageReaction[];\n  file?: {\n    url: string;\n    type: string;\n    name: string;\n    duration?: number;\n  };\n  replyTo?: {\n    messageId?: string;\n    storyId?: string;\n    storyMedia?: string;\n    messageText: string;\n    messageSender: string;\n  };\n  deleted?: boolean;\n  clientTempId?: string;\n};\n\nexport type Conversation = {\n  id: string;\n  type: 'private' | 'group';\n  participants: string[]; // user ids\n  participantsDetails?: User[];\n  name?: string; // for group chats or to be derived for private chats\n  avatar?: string | null; // for group chats or to be derived for private chats\n  description?: string; // for group chats\n  messages: Message[];\n  unreadCount?: number;\n  pinned?: boolean;\n  lastMessage?: {\n    text: string;\n    senderId: string;\n    timestamp: Timestamp;\n  },\n  lastRead?: {\n    [userId: string]: Timestamp;\n  },\n  otherParticipantLastRead?: Timestamp; // Added for convenience\n  createdBy?: string;\n  isFavorite?: boolean;\n  isArchived?: boolean;\n  typing?: string[];\n};\n\nexport type StoryReaction = {\n  emoji: string;\n  userId: string;\n};\n\nexport type Story = {\n    id: string;\n    ownerId: string;\n    mediaUrl?: string;\n    mediaType: 'image' | 'video';\n    createdAt: Timestamp | Date;\n    expiresAt: Timestamp | Date;\n    caption?: string;\n    viewedBy: string[]; // array of user uids who have viewed the story\n    duration?: number;\n    reactions?: StoryReaction[];\n};\n","size_bytes":2319},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/styles/animation-specs.ts":{"content":"\nimport { Variants } from 'framer-motion';\n\nexport const cardAnimationVariants: Variants = {\n  hidden: {\n    opacity: 0,\n    y: 6,\n  },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      type: 'spring',\n      damping: 18,\n      stiffness: 120,\n      duration: 0.42,\n    },\n  },\n};\n\nexport const hoverAnimation = {\n  scale: 1.01,\n  transition: {\n    type: 'spring',\n    duration: 0.2,\n  },\n};\n\nexport const tapAnimation = {\n  scale: 0.995,\n};\n","size_bytes":454},"src/styles/glass-theme.css":{"content":"\n:root {\n  --glass-blur: 10px;\n  --glass-bg-light: rgba(255, 255, 255, 0.6);\n  --glass-border-light: rgba(0, 0, 0, 0.06);\n  --text-on-glass-light: rgba(0, 0, 0, 0.8);\n\n  --glass-bg-dark: rgba(30, 30, 30, 0.5);\n  --glass-border-dark: rgba(255, 255, 255, 0.1);\n  --text-on-glass-dark: rgba(255, 255, 255, 0.95);\n  \n  --accent-rgb: 124, 92, 255;\n  --radius-lg: 14px;\n}\n\nbody.glass-lite .backdrop-blur-var {\n    backdrop-filter: none;\n}\n","size_bytes":433},"my-app/src/app/layout.tsx":{"content":"\nimport type { Metadata, Viewport } from 'next';\nimport { ThemeProvider } from '@/components/providers/theme-provider';\nimport './globals.css';\nimport { Poppins, PT_Sans } from 'next/font/google';\nimport { cn } from '@/lib/utils';\nimport { AuthProvider } from '@/components/providers/auth-provider';\nimport { Toaster } from '@/components/ui/toaster';\nimport { AppearanceProvider } from '@/components/providers/appearance-provider';\nimport { MobileProvider } from '@/components/providers/mobile-provider';\nimport './mobile.css';\nimport { FriendsProvider } from '@/components/providers/friends-provider';\n\nconst fontPoppins = Poppins({\n  subsets: ['latin'],\n  variable: '--font-poppins',\n  weight: ['400', '500', '600', '700'],\n});\n\nconst fontPtSans = PT_Sans({\n  subsets: ['latin'],\n  variable: '--font-pt-sans',\n  weight: ['400', '700'],\n});\n\nexport const metadata: Metadata = {\n  title: 'Vibez',\n  description: 'A next-generation messaging app.',\n  manifest: '/manifest.json',\n};\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  viewportFit: 'cover',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          'min-h-screen bg-background font-sans antialiased',\n          fontPoppins.variable,\n          fontPtSans.variable\n        )}\n      >\n        <AuthProvider>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"dark\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            <AppearanceProvider>\n              <FriendsProvider>\n                <MobileProvider>\n                  <main className=\"relative flex-1 z-10\">{children}</main>\n                  <Toaster />\n                </MobileProvider>\n              </FriendsProvider>\n            </AppearanceProvider>\n          </ThemeProvider>\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}\n","size_bytes":2038},"my-app/src/app/page.tsx":{"content":"\n'use client';\n\nimport { AppShell } from '@/components/app-shell';\nimport { ChatLayout } from '@/components/chat-layout';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  if (!user) {\n    // AuthProvider will handle redirection, this is a fallback.\n    return null;\n  }\n\n  return (\n    <AppShell>\n      <ChatLayout />\n    </AppShell>\n  );\n}\n","size_bytes":403},"my-app/src/components/message-list.tsx":{"content":"","size_bytes":0},"my-app/src/components/mobile-chat-layout.tsx":{"content":"\n'use client';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { ChatView } from './chat-view';\nimport { useAppShell } from './app-shell';\nimport { ChatList } from './chat-list';\nimport React from 'react';\nimport { useMobileDesign } from './providers/mobile-provider';\n\nexport function MobileChatLayout() {\n  const {\n    selectedChat,\n    isAiReplying,\n    currentUser,\n    handleBack,\n    messages,\n    loadMoreMessages,\n    hasMoreMessages,\n    isLoadingMore,\n  } = useAppShell();\n  const { height } = useMobileDesign();\n\n  // Use the JS-calculated height. Fallback to 100dvh only if height is 0.\n  const layoutStyle = {\n    height: height ? `${height}px` : '100dvh',\n  };\n\n  return (\n    <div className=\"relative w-full overflow-hidden z-10\" style={layoutStyle}>\n      <motion.div\n        className=\"absolute inset-0\"\n        animate={{ x: selectedChat ? '-100%' : '0%' }}\n        transition={{ duration: 0.3, ease: 'easeInOut' }}\n      >\n        <ChatList />\n      </motion.div>\n      \n      <AnimatePresence>\n        {selectedChat && (\n          <motion.div\n            key=\"view\"\n            className=\"absolute inset-0\"\n            initial={{ x: '100%' }}\n            animate={{ x: '0%' }}\n            exit={{ x: '100%' }}\n            transition={{ duration: 0.3, ease: 'easeInOut' }}\n          >\n            <ChatView\n              chat={selectedChat}\n              isAiReplying={isAiReplying}\n              currentUser={currentUser}\n              onBack={handleBack}\n              messages={messages}\n              loadMoreMessages={loadMoreMessages}\n              hasMoreMessages={hasMoreMessages}\n              isLoadingMore={isLoadingMore}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","size_bytes":1761},"src/ai/flows/ai-chat-flow.ts":{"content":"\"use server\";\n/**\n * @fileOverview A flow for having a conversation with an AI.\n *\n * - continueConversation - A function that continues a conversation with an AI.\n * - AiChatInput - The input type for the continueConversation function.\n * - AiChatOutput - The return type for the continueConversation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AiChatInputSchema = z.object({\n  message: z.string().describe('The user\\'s message.'),\n  history: z.array(z.object({\n    user: z.string().optional(),\n    model: z.string().optional(),\n  })).describe('The history of the conversation.'),\n});\nexport type AiChatInput = z.infer<typeof AiChatInputSchema>;\n\nconst AiChatOutputSchema = z.object({\n  reply: z.string().describe('The AI\\'s reply.'),\n});\nexport type AiChatOutput = z.infer<typeof AiChatOutputSchema>;\n\nexport async function continueConversation(input: AiChatInput): Promise<AiChatOutput> {\n  return continueConversationFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'aiChatPrompt',\n  input: {schema: AiChatInputSchema},\n  output: {schema: AiChatOutputSchema},\n  prompt: `You are a helpful AI assistant. Continue the conversation with the user.\n\n  Conversation History:\n  {{#each history}}\n    {{#if this.user}}User: {{{this.user}}}{{/if}}\n    {{#if this.model}}AI: {{{this.model}}}{{/if}}\n  {{/each}}\n\n  User: {{{message}}}\n  AI:`,\n});\n\nconst continueConversationFlow = ai.defineFlow(\n  {\n    name: 'continueConversationFlow',\n    inputSchema: AiChatInputSchema,\n    outputSchema: AiChatOutputSchema,\n  },\n  async input => {\n    try {\n        const {output} = await prompt(input);\n        if (!output) {\n            throw new Error(\"No output from AI prompt.\");\n        }\n        return output;\n    } catch (error: any) {\n        console.error(\"Error in continueConversationFlow:\", error);\n        // Check for specific rate limit error message\n        if (error.message && error.message.includes('429')) {\n             return { reply: \"I've been talking a lot today and need a little break. Please try again later. You may need to check your API plan and billing details.\" };\n        }\n        return { reply: \"Sorry, I'm having trouble connecting right now. Please try again in a moment.\" };\n    }\n  }\n);\n","size_bytes":2255},"src/ai/flows/summarize-long-messages.ts":{"content":"'use server';\n\n/**\n * @fileOverview A flow that summarizes long messages.\n *\n * - summarizeLongMessage - A function that summarizes a long message.\n * - SummarizeLongMessageInput - The input type for the summarizeLongMessage function.\n * - SummarizeLongMessageOutput - The return type for the summarizeLongMessage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SummarizeLongMessageInputSchema = z.object({\n  message: z.string().describe('The long message to summarize.'),\n});\n\nexport type SummarizeLongMessageInput = z.infer<\n  typeof SummarizeLongMessageInputSchema\n>;\n\nconst SummarizeLongMessageOutputSchema = z.object({\n  summary: z.string().describe('The summary of the long message.'),\n});\n\nexport type SummarizeLongMessageOutput = z.infer<\n  typeof SummarizeLongMessageOutputSchema\n>;\n\nexport async function summarizeLongMessage(\n  input: SummarizeLongMessageInput\n): Promise<SummarizeLongMessageOutput> {\n  return summarizeLongMessageFlow(input);\n}\n\nconst summarizeLongMessagePrompt = ai.definePrompt({\n  name: 'summarizeLongMessagePrompt',\n  input: {schema: SummarizeLongMessageInputSchema},\n  output: {schema: SummarizeLongMessageOutputSchema},\n  prompt: `Summarize the following message in a concise manner:\\n\\n{{{message}}}`,\n});\n\nconst summarizeLongMessageFlow = ai.defineFlow(\n  {\n    name: 'summarizeLongMessageFlow',\n    inputSchema: SummarizeLongMessageInputSchema,\n    outputSchema: SummarizeLongMessageOutputSchema,\n  },\n  async input => {\n    const {output} = await summarizeLongMessagePrompt(input);\n    return output!;\n  }\n);\n","size_bytes":1580},"src/ai/flows/weather-flow.ts":{"content":"\n'use server';\n/**\n * @fileOverview A flow for getting the current weather.\n *\n * - getWeather - A function that gets the weather for a given location.\n * - GetWeatherInput - The input type for the getWeather function.\n * - GetWeatherOutput - The return type for the getWeather function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\n\nconst GetWeatherInputSchema = z.object({\n  location: z.string().describe('The location to get the weather for.'),\n  unit: z.enum(['Celsius', 'Fahrenheit']).optional().describe('The unit for the temperature. Defaults to Celsius.')\n});\nexport type GetWeatherInput = z.infer<typeof GetWeatherInputSchema>;\n\nconst GetWeatherOutputSchema = z.object({\n  temperature: z.number().describe('The current temperature in the requested unit.'),\n  condition: z.enum(['Sunny', 'Cloudy', 'Rainy', 'Windy', 'Stormy', 'Snowy', 'Clear', 'Mist', 'Haze', 'Fog']).describe('The current weather condition.'),\n  unit: z.enum(['Celsius', 'Fahrenheit']).describe('The unit of the provided temperature.'),\n});\nexport type GetWeatherOutput = z.infer<typeof GetWeatherOutputSchema>;\n\n\nconst weatherPrompt = ai.definePrompt({\n    name: 'weatherPrompt',\n    input: { schema: GetWeatherInputSchema },\n    output: { schema: GetWeatherOutputSchema },\n    prompt: `You are a weather service. The user will provide a location.\n    Return the current temperature in the specified unit (default to Celsius if not provided) and the current weather condition for that location.\n    \n    Location: {{{location}}}\n    Unit: {{{unit}}}\n    \n    Please provide the weather information in the specified JSON format. If the condition is not in the provided enum, choose the closest match.\n    For example, for \"Partly Cloudy\", use \"Cloudy\". For \"Clear sky\", use \"Clear\" if available, otherwise \"Sunny\".\n    `,\n});\n\n\nconst getWeatherFlow = ai.defineFlow(\n  {\n    name: 'getWeatherFlow',\n    inputSchema: GetWeatherInputSchema,\n    outputSchema: GetWeatherOutputSchema,\n  },\n  async (input) => {\n    try {\n      const { output } = await weatherPrompt(input);\n      if (!output) {\n        throw new Error('Unable to get weather information.');\n      }\n      \n      const validConditions = GetWeatherOutputSchema.shape.condition.options;\n      if (!validConditions.includes(output.condition)) {\n        console.warn(`Model returned an invalid condition: \"${output.condition}\". Falling back to \"Cloudy\".`);\n        output.condition = 'Cloudy'; \n      }\n      return output;\n    } catch (error) {\n        console.warn(\"AI weather call failed, returning mock data. Error:\", error);\n        // This is a fallback for when the API limit is hit or another error occurs.\n        return {\n            temperature: input.unit === 'Fahrenheit' ? 68 : 20,\n            condition: 'Sunny',\n            unit: input.unit || 'Celsius',\n        };\n    }\n  }\n);\n\n\nexport async function getWeather(input: GetWeatherInput): Promise<GetWeatherOutput> {\n  return getWeatherFlow(input);\n}\n","size_bytes":2969},"src/app/(auth)/auth-background.css":{"content":"/* Static background for reduced motion or fallback */\n.auth-bg {\n    background-color: #0c0a1e; /* Deep indigo base */\n    background-image: radial-gradient(at 20% 80%, hsla(255, 60%, 30%, 0.3) 0px, transparent 50%),\n                      radial-gradient(at 80% 10%, hsla(280, 50%, 40%, 0.25) 0px, transparent 50%);\n    overflow: hidden;\n    position: relative;\n}\n\n.blob-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    z-index: 0;\n}\n\n/* Base styles for all blobs */\n.blob-container::before,\n.blob-container::after,\n.blob-container > div::before,\n.blob-container > div::after {\n    content: '';\n    position: absolute;\n    border-radius: 50%;\n    will-change: transform;\n    opacity: 0;\n    mix-blend-mode: screen; /* Soft additive blending */\n    filter: blur(80px); /* Increased blur for softer edges */\n}\n\n/* Blob 1 (Violet) */\n.blob-container::before {\n    width: 550px; /* Increased size */\n    height: 550px;\n    background: hsla(283, 60%, 55%, 0.25); /* Increased opacity and vibrancy */\n    animation: blob-float 15s infinite cubic-bezier(0.68, -0.55, 0.27, 1.55);\n}\n\n/* Blob 2 (Cyan Accent) */\n.blob-container::after {\n    width: 450px; /* Increased size */\n    height: 450px;\n    background: hsla(180, 80%, 50%, 0.2); /* Increased opacity */\n    animation: blob-float 20s infinite cubic-bezier(0.68, -0.55, 0.27, 1.55) 3s;\n}\n\n/* Blob 3 (Indigo) */\n.blob-container > div::before {\n    width: 500px; /* Increased size */\n    height: 500px;\n    background: hsla(260, 80%, 65%, 0.28); /* Increased opacity */\n    animation: blob-float 18s infinite cubic-bezier(0.68, -0.55, 0.27, 1.55) 1.5s;\n}\n\n/* Blob 4 (Deeper Violet) */\n.blob-container > div::after {\n    width: 400px; /* Increased size */\n    height: 400px;\n    background: hsla(275, 50%, 45%, 0.22); /* Increased opacity */\n    animation: blob-float 25s infinite cubic-bezier(0.68, -0.55, 0.27, 1.55) 5s;\n}\n\n\n@keyframes blob-float {\n    0% {\n        transform: translate(0, 0) scale(1);\n        opacity: 0.15;\n    }\n    33% {\n        transform: translate(calc(60vw - 40%), calc(70vh - 60%)) scale(1.3);\n        opacity: 0.3;\n    }\n    66% {\n        transform: translate(calc(25vw - 50%), calc(40vh - 50%)) scale(0.9);\n        opacity: 0.25;\n    }\n    100% {\n        transform: translate(0, 0) scale(1);\n        opacity: 0.15;\n    }\n}\n\n/* Apply different initial positions and delays */\n.blob-container::after {\n    animation-delay: -5s;\n}\n.blob-container > div::before {\n    animation-delay: -10s;\n}\n.blob-container > div::after {\n    animation-delay: -2.5s;\n    animation-direction: alternate-reverse;\n}\n\n\n/* Accessibility: Disable animations if the user prefers reduced motion */\n@media (prefers-reduced-motion: reduce) {\n    .blob-container::before,\n    .blob-container::after,\n    .blob-container > div::before,\n    .blob-container > div::after {\n        animation: none;\n        opacity: 0; /* Hide the animated blobs completely */\n    }\n}\n","size_bytes":2981},"src/app/(auth)/layout.tsx":{"content":"import { AnimatedAuthBackground } from '@/components/animated-auth-background';\nimport { VibezLogo } from '@/components/vibez-logo';\nimport './auth-background.css';\n\nexport default function AuthLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <main className=\"flex min-h-screen w-full flex-col items-center justify-center p-4 auth-bg\">\n      <AnimatedAuthBackground />\n      <div className=\"relative z-10 w-full max-w-md\">\n        <div className=\"mb-8 flex justify-center\">\n          <VibezLogo />\n        </div>\n        <div className=\"bg-background/60 backdrop-blur-sm border border-border/50 rounded-lg\">\n          {children}\n        </div>\n      </div>\n    </main>\n  );\n}\n","size_bytes":702},"src/app/friends/layout.tsx":{"content":"\n'use client';\nimport { ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { useRouter } from 'next/navigation';\n\nexport default function FriendsLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const router = useRouter();\n  return (\n    <div className=\"flex flex-col h-dvh w-full\">\n      <header className=\"flex items-center gap-3 border-b border-border/50 bg-card/80 backdrop-blur-xl p-2 sm:p-4 shrink-0 z-10\">\n        <Button variant=\"ghost\" size=\"icon\" className=\"h-10 w-10\" onClick={() => router.back()}>\n            <ArrowLeft className=\"h-6 w-6\" />\n        </Button>\n        <h1 className=\"text-xl font-bold font-heading\">Friends</h1>\n      </header>\n      <main className=\"flex-1 overflow-y-auto\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":837},"src/app/friends/page.tsx":{"content":"\n'use client';\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { doc, onSnapshot, collection, query, where, getDocs, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { User } from '@/lib/types';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { UserAvatar } from '@/components/user-avatar';\nimport { Button } from '@/components/ui/button';\nimport { Check, X, UserX, Send, Ban } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { motion } from 'framer-motion';\nimport { useToast } from '@/hooks/use-toast';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nfunction FriendsPageSkeleton() {\n    return (\n        <div className=\"p-4 sm:p-6 lg:p-8 space-y-8\">\n             <Card>\n                <CardContent className=\"p-4\">\n                    <div className=\"h-10 bg-muted rounded-md animate-pulse w-full max-w-md mx-auto\" />\n                    <div className=\"mt-6 space-y-4\">\n                        {[...Array(3)].map((_, i) => (\n                            <div key={i} className=\"flex items-center justify-between p-2 rounded-lg bg-muted/50 animate-pulse\">\n                                <div className=\"flex items-center gap-3\">\n                                    <div className=\"h-12 w-12 rounded-full bg-muted\" />\n                                    <div>\n                                        <div className=\"h-5 w-24 bg-muted rounded-md\"/>\n                                        <div className=\"h-4 w-32 bg-muted rounded-md mt-1\"/>\n                                    </div>\n                                </div>\n                                <div className=\"h-8 w-20 bg-muted rounded-md\"/>\n                            </div>\n                        ))}\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default function FriendsPage() {\n    const { user: authUser, loading: authLoading } = useAuth();\n    const router = useRouter();\n    const { toast } = useToast();\n    const [currentUser, setCurrentUser] = useState<User | null>(null);\n    const [friends, setFriends] = useState<User[]>([]);\n    const [requests, setRequests] = useState<User[]>([]);\n    const [sentRequests, setSentRequests] = useState<User[]>([]);\n    const [loading, setLoading] = useState(true);\n\n    const handleFriendAction = async (targetUserId: string, action: 'acceptRequest' | 'declineRequest' | 'removeFriend' | 'cancelRequest') => {\n        if (!authUser || !currentUser) {\n            toast({ title: 'Error', description: 'You must be logged in.', variant: 'destructive' });\n            return;\n        };\n\n        const currentUserRef = doc(db, 'users', authUser.uid);\n        const targetUserRef = doc(db, 'users', targetUserId);\n        \n        try {\n            if (action === 'acceptRequest') {\n                await updateDoc(currentUserRef, { \n                    friends: arrayUnion(targetUserId),\n                    friendRequestsReceived: arrayRemove(targetUserId)\n                });\n                await updateDoc(targetUserRef, {\n                    friends: arrayUnion(authUser.uid),\n                    friendRequestsSent: arrayRemove(currentUser.uid)\n                });\n                toast({ title: 'Friend Added', description: 'You are now friends!' });\n            } else if (action === 'declineRequest') {\n                await updateDoc(currentUserRef, { friendRequestsReceived: arrayRemove(targetUserId) });\n                await updateDoc(targetUserRef, { friendRequestsSent: arrayRemove(currentUser.uid) });\n                toast({ title: 'Request Declined' });\n            } else if (action === 'removeFriend') {\n                await updateDoc(currentUserRef, { friends: arrayRemove(targetUserId) });\n                await updateDoc(targetUserRef, { friends: arrayRemove(currentUser.uid) });\n                toast({ title: 'Friend Removed' });\n            } else if (action === 'cancelRequest') {\n                await updateDoc(currentUserRef, { friendRequestsSent: arrayRemove(targetUserId) });\n                await updateDoc(targetUserRef, { friendRequestsReceived: arrayRemove(currentUser.uid) });\n                toast({ title: 'Request Canceled' });\n            }\n        } catch(e: any) {\n            console.error(\"Error handling friend action:\", e);\n            toast({ title: 'Error', description: e.message || \"Something went wrong.\", variant: \"destructive\" });\n        }\n    };\n\n    useEffect(() => {\n        if (!authLoading && !authUser) {\n            router.push('/login');\n            return;\n        }\n        if (!authUser) return;\n\n        const unsub = onSnapshot(doc(db, 'users', authUser.uid), (doc) => {\n            if (doc.exists()) {\n                const userData = { id: doc.id, ...doc.data() } as User;\n                setCurrentUser(userData);\n            }\n        });\n        return () => unsub();\n    }, [authUser, authLoading, router]);\n\n    useEffect(() => {\n        if (!currentUser) return;\n        \n        setLoading(true);\n\n        const fetchUsers = async (userIds: string[], setState: React.Dispatch<React.SetStateAction<User[]>>) => {\n            if (userIds.length === 0) {\n                setState([]);\n                return Promise.resolve();\n            };\n            const usersRef = collection(db, 'users');\n            const q = query(usersRef, where('uid', 'in', userIds));\n            const querySnapshot = await getDocs(q);\n            const userList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as User));\n            setState(userList);\n        };\n\n        const friendIds = currentUser.friends || [];\n        const requestIds = currentUser.friendRequestsReceived || [];\n        const sentRequestIds = currentUser.friendRequestsSent || [];\n\n        Promise.all([\n            fetchUsers(friendIds, setFriends),\n            fetchUsers(requestIds, setRequests),\n            fetchUsers(sentRequestIds, setSentRequests)\n        ]).finally(() => {\n            setLoading(false);\n        });\n\n    }, [currentUser]);\n\n    if (authLoading || loading) {\n        return <FriendsPageSkeleton />;\n    }\n\n    return (\n        <motion.div \n          className=\"p-4 sm:p-6 lg:p-8 space-y-8\"\n          initial=\"initial\"\n          animate=\"animate\"\n          variants={{ animate: { transition: { staggerChildren: 0.1 } }}}\n        >\n            <motion.div variants={cardVariants}>\n            <Tabs defaultValue=\"friends\">\n                <TabsList className=\"grid w-full grid-cols-3 max-w-md mx-auto\">\n                    <TabsTrigger value=\"friends\">My Friends</TabsTrigger>\n                    <TabsTrigger value=\"requests\">\n                        Requests {requests.length > 0 && `(${requests.length})`}\n                    </TabsTrigger>\n                    <TabsTrigger value=\"sent\">Sent</TabsTrigger>\n                </TabsList>\n                <TabsContent value=\"friends\">\n                    <Card>\n                        <CardContent className=\"p-4\">\n                            {friends.length > 0 ? (\n                                <div className=\"space-y-2\">\n                                    {friends.map(friend => (\n                                        <div key={friend.uid} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/50\">\n                                            <div className=\"flex items-center gap-3\">\n                                                <UserAvatar user={friend} isFriend={true} className=\"h-12 w-12\"/>\n                                                <div>\n                                                    <p className=\"font-semibold\">{friend.name}</p>\n                                                    <p className=\"text-sm text-muted-foreground\">{friend.email}</p>\n                                                </div>\n                                            </div>\n                                            <Button variant=\"outline\" size=\"icon\" onClick={() => handleFriendAction(friend.uid, 'removeFriend')}>\n                                                <UserX className=\"h-5 w-5\"/>\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </div>\n                            ) : <p className=\"text-center text-muted-foreground py-8\">You haven't added any friends yet.</p>}\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n                <TabsContent value=\"requests\">\n                     <Card>\n                        <CardContent className=\"p-4\">\n                             {requests.length > 0 ? (\n                                <div className=\"space-y-2\">\n                                    {requests.map(requestUser => (\n                                        <div key={requestUser.uid} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/50\">\n                                            <div className=\"flex items-center gap-3\">\n                                                <UserAvatar user={requestUser} className=\"h-12 w-12\"/>\n                                                <div>\n                                                    <p className=\"font-semibold\">{requestUser.name}</p>\n                                                    <p className=\"text-sm text-muted-foreground\">{requestUser.email}</p>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex gap-2\">\n                                                <Button variant=\"default\" size=\"icon\" onClick={() => handleFriendAction(requestUser.uid, 'acceptRequest')}>\n                                                    <Check className=\"h-5 w-5\"/>\n                                                </Button>\n                                                <Button variant=\"destructive\" size=\"icon\" onClick={() => handleFriendAction(requestUser.uid, 'declineRequest')}>\n                                                    <X className=\"h-5 w-5\"/>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                            ) : <p className=\"text-center text-muted-foreground py-8\">No new friend requests.</p>}\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n                <TabsContent value=\"sent\">\n                    <Card>\n                        <CardContent className=\"p-4\">\n                            {sentRequests.length > 0 ? (\n                                <div className=\"space-y-2\">\n                                    {sentRequests.map(sentRequestUser => (\n                                        <div key={sentRequestUser.uid} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/50\">\n                                            <div className=\"flex items-center gap-3\">\n                                                <UserAvatar user={sentRequestUser} className=\"h-12 w-12\"/>\n                                                <div>\n                                                    <p className=\"font-semibold\">{sentRequestUser.name}</p>\n                                                    <p className=\"text-sm text-muted-foreground\">{sentRequestUser.email}</p>\n                                                </div>\n                                            </div>\n                                            <Button variant=\"outline\" onClick={() => handleFriendAction(sentRequestUser.uid, 'cancelRequest')}>\n                                                <Ban className=\"mr-2 h-4 w-4\" />\n                                                Cancel Request\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </div>\n                            ) : <p className=\"text-center text-muted-foreground py-8\">You haven't sent any friend requests.</p>}\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n            </Tabs>\n            </motion.div>\n        </motion.div>\n    );\n}\n","size_bytes":12660},"src/app/settings/layout.tsx":{"content":"\n'use client';\nimport { Sidebar, SidebarProvider, SidebarInset, SidebarHeader, SidebarTrigger, SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar';\nimport { Home, User, Shield, Palette, ArrowLeft, Bell, Mail, Image as ImageIcon, CloudSun } from 'lucide-react';\nimport Link from 'next/link';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport React from 'react';\nimport { useMobileDesign } from '@/components/providers/mobile-provider';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Button } from '@/components/ui/button';\n\nfunction SettingsSkeleton() {\n    return (\n        <div className=\"flex min-h-screen\">\n            <div className=\"w-16 md:w-64 p-4 border-r bg-background/70 backdrop-blur-xl\">\n                <div className=\"space-y-4\">\n                    <Skeleton className=\"h-8 w-8\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                </div>\n            </div>\n            <main className=\"p-4 sm:p-6 lg:p-8 w-full\">\n                <Skeleton className=\"h-96 w-full\" />\n            </main>\n        </div>\n    )\n}\n\nconst getTitleFromPath = (path: string) => {\n    if (path.includes('appearance')) return 'Appearance';\n    if (path.includes('account')) return 'Account';\n    if (path.includes('profile')) return 'Profile';\n    if (path.includes('notifications')) return 'Notifications';\n    if (path.includes('feedback')) return 'Feedback';\n    if (path.includes('backgrounds')) return 'Backgrounds';\n    if (path.includes('weather')) return 'Weather';\n    return 'Settings';\n}\n\nfunction MobileSettingsLayout({ children }: { children: React.ReactNode }) {\n    const router = useRouter();\n    const pathname = usePathname();\n    const title = getTitleFromPath(pathname);\n    const isRootSettings = pathname === '/settings';\n\n    return (\n        <div className=\"flex flex-col h-full w-full\">\n            <header className=\"flex items-center gap-2 border-b border-border/50 bg-card/80 backdrop-blur-xl p-2 shrink-0 z-10\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-10 w-10 shrink-0\" onClick={() => isRootSettings ? router.push('/') : router.back()}>\n                    <ArrowLeft className=\"h-6 w-6\" />\n                </Button>\n                <h1 className=\"text-lg font-semibold\">{title}</h1>\n            </header>\n            <main className=\"flex-1 overflow-y-auto\">\n                {children}\n            </main>\n        </div>\n    )\n}\n\n\nexport default function SettingsLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const pathname = usePathname();\n  const { user, loading } = useAuth();\n  const { isMobileView } = useMobileDesign();\n\n\n  if (loading || !user) {\n      return <SettingsSkeleton />\n  }\n  \n  if (isMobileView) {\n    return (\n      <MobileSettingsLayout>\n        {children}\n      </MobileSettingsLayout>\n    )\n  }\n\n  return (\n    <SidebarProvider>\n        <div className=\"flex h-screen\">\n            <Sidebar collapsible=\"icon\" className=\"bg-background/70 backdrop-blur-xl border-r-white/5\">\n                <SidebarHeader>\n                    <SidebarTrigger />\n                </SidebarHeader>\n                 <div className=\"p-2\">\n                    <div className=\"bg-card/50 rounded-lg p-2\">\n                        <SidebarMenu>\n                            <SidebarMenuItem>\n                                <SidebarMenuButton asChild isActive={pathname.startsWith('/settings/profile')}>\n                                    <Link href=\"/settings/profile\">\n                                        <User />\n                                        <span>Profile</span>\n                                    </Link>\n                                </SidebarMenuButton>\n                            </SidebarMenuItem>\n                            <SidebarMenuItem>\n                                <SidebarMenuButton asChild isActive={pathname.startsWith('/settings/account')}>\n                                    <Link href=\"/settings/account\">\n                                        <Shield />\n                                        <span>Account</span>\n                                    </Link>\n                                </SidebarMenuButton>\n                            </SidebarMenuItem>\n                             <SidebarMenuItem>\n                                <SidebarMenuButton asChild isActive={pathname.startsWith('/settings/notifications')}>\n                                    <Link href=\"/settings/notifications\">\n                                        <Bell />\n                                        <span>Notifications</span>\n                                    </Link>\n                                </SidebarMenuButton>\n                            </SidebarMenuItem>\n                            <SidebarMenuItem>\n                                <SidebarMenuButton asChild isActive={pathname.startsWith('/settings/appearance')}>\n                                    <Link href=\"/settings/appearance\">\n                                        <Palette />\n                                        <span>Appearance</span>\n                                    </Link>\n                                </SidebarMenuButton>\n                            </SidebarMenuItem>\n                             <SidebarMenuItem>\n                                <SidebarMenuButton asChild isActive={pathname.startsWith('/settings/backgrounds')}>\n                                    <Link href=\"/settings/backgrounds\">\n                                        <ImageIcon />\n                                        <span>Backgrounds</span>\n                                    </Link>\n                                </SidebarMenuButton>\n                            </SidebarMenuItem>\n                            <SidebarMenuItem>\n                                <SidebarMenuButton asChild isActive={pathname.startsWith('/settings/weather')}>\n                                    <Link href=\"/settings/weather\">\n                                        <CloudSun />\n                                        <span>Weather</span>\n                                    </Link>\n                                </SidebarMenuButton>\n                            </SidebarMenuItem>\n                             <SidebarMenuItem>\n                                <SidebarMenuButton asChild isActive={pathname.startsWith('/settings/feedback')}>\n                                    <Link href=\"/settings/feedback\">\n                                        <Mail />\n                                        <span>Feedback</span>\n                                    </Link>\n                                </SidebarMenuButton>\n                            </SidebarMenuItem>\n                        </SidebarMenu>\n                    </div>\n                </div>\n                <div className=\"mt-auto p-2\">\n                     <SidebarMenu>\n                        <SidebarMenuItem>\n                            <SidebarMenuButton asChild>\n                                <Link href=\"/\">\n                                    <Home />\n                                    <span>Back to Chat</span>\n                                </Link>\n                            </SidebarMenuButton>\n                        </SidebarMenuItem>\n                    </SidebarMenu>\n                </div>\n            </Sidebar>\n            <SidebarInset>\n                <ScrollArea className=\"h-full\">\n                    <main className=\"p-4 sm:p-8 lg:p-12 w-full\">\n                        {children}\n                    </main>\n                </ScrollArea>\n            </SidebarInset>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":7915},"src/app/settings/page.tsx":{"content":"\n'use client'\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useMobileDesign } from '@/components/providers/mobile-provider';\nimport Link from 'next/link';\nimport { ChevronRight, User, Shield, Palette, Bell, Mail, Image as ImageIcon, CloudSun } from 'lucide-react';\n\nconst settingsItems = [\n    {\n        href: '/settings/profile',\n        icon: User,\n        title: 'Profile',\n        description: 'Manage your public profile information.'\n    },\n    {\n        href: '/settings/account',\n        icon: Shield,\n        title: 'Account',\n        description: 'Manage your account security and data.'\n    },\n    {\n        href: '/settings/notifications',\n        icon: Bell,\n        title: 'Notifications',\n        description: 'Manage how you get notified.'\n    },\n    {\n        href: '/settings/appearance',\n        icon: Palette,\n        title: 'Appearance',\n        description: 'Customize the look and feel of the app.'\n    },\n    {\n        href: '/settings/backgrounds',\n        icon: ImageIcon,\n        title: 'Backgrounds',\n        description: 'Choose your app background.'\n    },\n    {\n        href: '/settings/weather',\n        icon: CloudSun,\n        title: 'Weather',\n        description: 'Customize the weather widget.'\n    },\n    {\n        href: '/settings/feedback',\n        icon: Mail,\n        title: 'Feedback',\n        description: 'Send us your thoughts and suggestions.'\n    }\n]\n\nfunction MobileSettingsMenu() {\n    return (\n        <div className=\"p-2 space-y-2\">\n            {settingsItems.map(item => (\n                <Link href={item.href} key={item.href} className=\"flex items-center justify-between p-4 rounded-lg bg-card/50 hover:bg-card/80 transition-colors\">\n                    <div className=\"flex items-center gap-4\">\n                        <item.icon className=\"h-6 w-6 text-primary\" />\n                        <div className=\"flex flex-col\">\n                            <span className=\"font-semibold\">{item.title}</span>\n                            <span className=\"text-sm text-muted-foreground\">{item.description}</span>\n                        </div>\n                    </div>\n                    <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n                </Link>\n            ))}\n        </div>\n    )\n}\n\nexport default function SettingsPage() {\n    const router = useRouter();\n    const { isMobileView } = useMobileDesign();\n\n    useEffect(() => {\n        if (!isMobileView) {\n            router.replace('/settings/profile');\n        }\n    }, [isMobileView, router]);\n\n    if (!isMobileView) {\n        // Render nothing on desktop while redirecting\n        return null;\n    }\n\n    return <MobileSettingsMenu />;\n}\n","size_bytes":2712},"src/app/stories/layout.tsx":{"content":"\n'use client';\nimport { ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\n\nexport default function StoriesLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"flex flex-col h-dvh w-full bg-background\">\n      <header className=\"flex items-center justify-between border-b border-border/50 bg-card/80 backdrop-blur-xl p-2 sm:p-4 shrink-0 z-10\">\n        <div className=\"flex items-center gap-3\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-10 w-10\" asChild>\n                <Link href=\"/\">\n                    <ArrowLeft className=\"h-6 w-6\" />\n                </Link>\n            </Button>\n            <h1 className=\"text-xl font-bold font-heading\">Stories</h1>\n        </div>\n      </header>\n      <main className=\"flex-1 overflow-y-auto\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":905},"src/app/stories/page.tsx":{"content":"\n'use client';\n\nimport { useMemo, useState, useEffect, useRef } from 'react';\nimport { useStories } from '@/components/providers/stories-provider';\nimport { UserAvatar } from '@/components/user-avatar';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\nimport type { Story } from '@/lib/types';\nimport { useRouter } from 'next/navigation';\nimport { Timestamp } from 'firebase/firestore';\n\nfunction StoryGridSkeleton() {\n    return (\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 p-4 sm:p-6 lg:p-8\">\n            {[...Array(12)].map((_, i) => (\n                <div key={i} className=\"aspect-[9/16] bg-muted rounded-lg animate-pulse\" />\n            ))}\n        </div>\n    )\n}\n\nconst getMillis = (timestamp: Timestamp | Date): number => {\n    if (timestamp instanceof Timestamp) {\n        return timestamp.toMillis();\n    }\n    if (timestamp instanceof Date) {\n        return timestamp.getTime();\n    }\n    // Fallback for potentially malformed data, though it should be one of the above.\n    // Try to parse if it's a string representation of a date.\n    if(typeof timestamp === 'string') {\n        const date = new Date(timestamp);\n        if (!isNaN(date.getTime())) {\n            return date.getTime();\n        }\n    }\n    return 0;\n}\n\n\nexport default function StoriesPage() {\n    const { stories, usersWithStories, currentUser, onViewStory, onCreateStory, usersCache } = useStories();\n    const router = useRouter();\n    const [loading, setLoading] = useState(true);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    \n    useEffect(() => {\n        // Assume loading is finished when currentUser and usersWithStories are populated\n        if (currentUser && usersWithStories) {\n            setLoading(false);\n        }\n    }, [currentUser, usersWithStories]);\n\n\n    const storiesByUser = useMemo(() => {\n        const userStoryMap = new Map<string, Story[]>();\n        stories.forEach(story => {\n            if (!userStoryMap.has(story.ownerId)) {\n                userStoryMap.set(story.ownerId, []);\n            }\n            userStoryMap.get(story.ownerId)!.push(story);\n        });\n        userStoryMap.forEach(userStories => {\n            userStories.sort((a, b) => getMillis(b.createdAt) - getMillis(a.createdAt));\n        });\n        return userStoryMap;\n    }, [stories]);\n\n    if (loading) {\n        return <StoryGridSkeleton />;\n    }\n    \n    if (!currentUser) {\n        // This case should ideally not be hit if auth provider redirects correctly\n        // but it's a good fallback.\n        return <StoryGridSkeleton />;\n    }\n    \n    const myStories = storiesByUser.get(currentUser.uid) || [];\n    const hasMyStories = myStories.length > 0;\n\n    const handleCreateStoryClick = () => {\n        fileInputRef.current?.click();\n    };\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            onCreateStory(file);\n        }\n    };\n\n    const hasUnreadStory = (userStories: Story[]) => {\n        return userStories.some(story => !story.viewedBy.includes(currentUser?.uid || ''));\n    };\n    \n    const friendsWithStories = usersWithStories.filter(u => u.uid !== currentUser.uid);\n\n    return (\n        <motion.div\n            className=\"p-4 sm:p-6 lg:p-8\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n        >\n            <input\n                type=\"file\"\n                ref={fileInputRef}\n                onChange={handleFileChange}\n                className=\"hidden\"\n                accept=\"image/*,video/*\"\n            />\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4\">\n                {/* Current User's Story */}\n                 <motion.div \n                    className=\"aspect-[9/16] rounded-lg overflow-hidden relative group\"\n                    whileHover={{ scale: 1.05 }}\n                    transition={{ duration: 0.2 }}\n                >\n                    <button \n                        onClick={hasMyStories ? () => onViewStory(currentUser, myStories) : undefined}\n                        disabled={!hasMyStories}\n                        className=\"w-full h-full bg-card flex flex-col items-center justify-center text-center disabled:cursor-default\"\n                    >\n                        <div className={cn(\n                            \"rounded-full p-1 border-2\",\n                            hasMyStories && hasUnreadStory(myStories) ? \"border-primary\" : \"border-transparent\"\n                        )}>\n                            <UserAvatar user={currentUser} className=\"h-20 w-20 text-2xl\" />\n                        </div>\n                        <p className=\"font-semibold mt-2\">Your Story</p>\n                        <p className=\"text-xs text-muted-foreground\">{hasMyStories ? 'View your story' : 'No stories yet'}</p>\n                    </button>\n                    \n                    <button \n                        onClick={handleCreateStoryClick}\n                        className=\"absolute bottom-4 right-4 bg-primary text-primary-foreground rounded-full p-2 border-2 border-background hover:scale-110 transition-transform\"\n                        aria-label=\"Add to your story\"\n                    >\n                        <Plus className=\"h-5 w-5\" />\n                    </button>\n                </motion.div>\n\n                {/* Friends' Stories */}\n                {friendsWithStories.map(user => {\n                    const userStories = storiesByUser.get(user.uid) || [];\n                    if (userStories.length === 0) return null;\n                    const hasUnread = hasUnreadStory(userStories);\n                    const latestStory = userStories[0];\n\n                    return (\n                        <motion.div \n                            key={user.uid}\n                            className=\"aspect-[9/16] rounded-lg overflow-hidden relative group cursor-pointer\"\n                            whileHover={{ scale: 1.05 }}\n                            transition={{ duration: 0.2 }}\n                            onClick={() => onViewStory(user, userStories)}\n                        >\n                            {latestStory.mediaType === 'video' ? (\n                                <video src={latestStory.mediaUrl} className=\"w-full h-full object-cover blur-md scale-110\" muted loop/>\n                            ) : (\n                                <img src={latestStory.mediaUrl} className=\"w-full h-full object-cover blur-md scale-110\" alt={`${user.name}'s story`}/>\n                            )}\n                            <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n                            <div className=\"absolute top-2 left-2\">\n                                 <div className={cn(\n                                    \"rounded-full p-0.5 border-2\",\n                                    hasUnread ? \"border-primary\" : \"border-transparent\"\n                                )}>\n                                    <UserAvatar user={user} className=\"h-10 w-10\" />\n                                </div>\n                            </div>\n                            <p className=\"absolute bottom-2 left-2 right-2 text-white font-semibold text-sm truncate\">{user.name}</p>\n                        </motion.div>\n                    )\n                })}\n            </div>\n\n            {friendsWithStories.length === 0 && myStories.length === 0 && (\n                <div className=\"text-center py-20\">\n                    <h2 className=\"text-2xl font-bold\">No Stories Yet</h2>\n                    <p className=\"text-muted-foreground mt-2\">Be the first to share a moment!</p>\n                    <Button className=\"mt-4\" onClick={handleCreateStoryClick}>\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Create Story\n                    </Button>\n                </div>\n            )}\n        </motion.div>\n    );\n}\n","size_bytes":8205},"src/components/contacts/ContactCard.tsx":{"content":"\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport { GlassCard } from '@/components/ui/cards/GlassCard';\nimport { UserAvatar } from '@/components/user-avatar';\nimport { cn } from '@/lib/utils';\nimport type { User, Conversation } from '@/lib/types';\nimport { cardAnimationVariants, hoverAnimation, tapAnimation } from '@/styles/animation-specs';\n\ninterface ContactCardProps {\n  contact: User;\n  conversation?: Conversation;\n  onClick: () => void;\n  isSelected?: boolean;\n}\n\nconst ContactCard: React.FC<ContactCardProps> = ({ contact, conversation, onClick, isSelected }) => {\n  const lastMessage = conversation?.lastMessage;\n  const unreadCount = conversation?.unreadCount || 0;\n\n  const hasUnreadStory = false; \n  const storyRingClass = hasUnreadStory \n    ? 'ring-2 ring-offset-2 ring-offset-transparent ring-primary'\n    : '';\n\n  return (\n    <motion.div\n      onClick={onClick}\n      className=\"w-full cursor-pointer\"\n      variants={cardAnimationVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      whileHover={hoverAnimation}\n      whileTap={tapAnimation}\n      layout\n    >\n      <GlassCard\n        className={cn(\n            \"flex items-center p-3 gap-4 transition-all duration-300\",\n            isSelected && \"bg-primary/10 border-primary/50\"\n        )}\n      >\n        <div className={cn('relative', storyRingClass, 'rounded-full')}>\n          <UserAvatar user={contact} className=\"h-12 w-12\" />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex justify-between items-center\">\n            <p className=\"font-bold truncate text-sm\">{contact.name}</p>\n            {lastMessage?.timestamp && (\n              <p className=\"text-xs text-muted-foreground\">\n                {new Date(lastMessage.timestamp.seconds * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n              </p>\n            )}\n          </div>\n          <div className=\"flex justify-between items-start gap-2\">\n            <p className=\"text-xs text-muted-foreground truncate mt-1\">\n              {lastMessage?.text || 'No messages yet'}\n            </p>\n            {unreadCount > 0 && (\n              <span className=\"bg-primary text-primary-foreground text-xs font-bold rounded-full px-2 py-0.5 mt-1\">\n                {unreadCount}\n              </span>\n            )}\n          </div>\n        </div>\n      </GlassCard>\n    </motion.div>\n  );\n};\n\nexport { ContactCard };\n","size_bytes":2440},"src/components/providers/appearance-provider.tsx":{"content":"\n'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useTheme } from 'next-themes';\n\ntype WeatherUnit = 'Celsius' | 'Fahrenheit';\n\ninterface AppearanceContextType {\n  accentColor: string;\n  setAccentColor: (color: string) => void;\n  gradientFrom: string;\n  setGradientFrom: (color: string) => void;\n  gradientTo: string;\n  setGradientTo: (color: string) => void;\n  chatBackground: string;\n  setChatBackground: (background: string) => void;\n  appBackground: string;\n  setAppBackground: (background: string) => void;\n  useCustomBackground: boolean;\n  setUseCustomBackground: (use: boolean) => void;\n  isAmoled: boolean;\n  setIsAmoled: (isAmoled: boolean) => void;\n  notificationSound: string;\n  setNotificationSound: (soundUrl: string) => void;\n  areNotificationsMuted: boolean;\n  setAreNotificationsMuted: (muted: boolean) => void;\n  isWeatherVisible: boolean;\n  setIsWeatherVisible: (visible: boolean) => void;\n  weatherLocation: string;\n  setWeatherLocation: (location: string) => void;\n  weatherUnit: WeatherUnit;\n  setWeatherUnit: (unit: WeatherUnit) => void;\n  chatListOpacity: number;\n  setChatListOpacity: (opacity: number) => void;\n}\n\nconst AppearanceContext = createContext<AppearanceContextType | undefined>(undefined);\n\nexport function AppearanceProvider({ children }: { children: ReactNode }) {\n  const { theme } = useTheme();\n  const [accentColor, setAccentColorState] = useState('');\n  const [gradientFrom, setGradientFromState] = useState('');\n  const [gradientTo, setGradientToState] = useState('');\n  const [chatBackground, setChatBackgroundState] = useState('');\n  const [appBackground, setAppBackgroundState] = useState('');\n  const [useCustomBackground, setUseCustomBackgroundState] = useState(true);\n  const [isAmoled, setAmoledState] = useState(false);\n  const [notificationSound, setNotificationSoundState] = useState('');\n  const [areNotificationsMuted, setAreNotificationsMutedState] = useState(false);\n  \n  const [isWeatherVisible, setIsWeatherVisibleState] = useState(true);\n  const [weatherLocation, setWeatherLocationState] = useState('');\n  const [weatherUnit, setWeatherUnitState] = useState<WeatherUnit>('Celsius');\n  const [chatListOpacity, setChatListOpacityState] = useState(80);\n\n\n  useEffect(() => {\n    const savedAccent = localStorage.getItem('accentColor') || '283 51% 53%';\n    const savedGradientFrom = localStorage.getItem('gradientFrom') || '330 85% 60%';\n    const savedGradientTo = localStorage.getItem('gradientTo') || '210 90% 55%';\n    const savedChatBg = localStorage.getItem('chatBackground') || 'https://picsum.photos/seed/bg-default/600/1000';\n    const savedAppBg = localStorage.getItem('appBackground') || 'galaxy';\n    const savedUseCustomBg = localStorage.getItem('useCustomBackground') !== 'false';\n    const savedAmoled = localStorage.getItem('isAmoled') === 'true';\n    const savedSound = localStorage.getItem('notificationSound') || 'default';\n    const savedMuted = localStorage.getItem('areNotificationsMuted') === 'true';\n    \n    const savedWeatherVisible = localStorage.getItem('isWeatherVisible') !== 'false';\n    const savedWeatherLocation = localStorage.getItem('weatherLocation') || '';\n    const savedWeatherUnit = (localStorage.getItem('weatherUnit') as WeatherUnit) || 'Celsius';\n    const savedChatListOpacity = localStorage.getItem('chatListOpacity');\n\n\n    setAccentColorState(savedAccent);\n    setGradientFromState(savedGradientFrom);\n    setGradientToState(savedGradientTo);\n    setChatBackgroundState(savedChatBg);\n    setAppBackgroundState(savedAppBg);\n    setUseCustomBackgroundState(savedUseCustomBg);\n    setAmoledState(savedAmoled);\n    setNotificationSoundState(savedSound);\n    setAreNotificationsMutedState(savedMuted);\n    \n    setIsWeatherVisibleState(savedWeatherVisible);\n    setWeatherLocationState(savedWeatherLocation);\n    setWeatherUnitState(savedWeatherUnit);\n    setChatListOpacityState(savedChatListOpacity ? parseInt(savedChatListOpacity, 10) : 80);\n\n    document.documentElement.style.setProperty('--primary', savedAccent);\n    document.documentElement.style.setProperty('--gradient-from', savedGradientFrom);\n    document.documentElement.style.setProperty('--gradient-to', savedGradientTo);\n\n    if (savedAmoled) {\n        document.body.classList.add('amoled');\n    } else {\n        document.body.classList.remove('amoled');\n    }\n\n  }, []);\n\n  const setAccentColor = (color: string) => {\n    setAccentColorState(color);\n    localStorage.setItem('accentColor', color);\n    document.documentElement.style.setProperty('--primary', color);\n  };\n  \n  const setGradientFrom = (color: string) => {\n    setGradientFromState(color);\n    localStorage.setItem('gradientFrom', color);\n    document.documentElement.style.setProperty('--gradient-from', color);\n  };\n\n  const setGradientTo = (color: string) => {\n    setGradientToState(color);\n    localStorage.setItem('gradientTo', color);\n    document.documentElement.style.setProperty('--gradient-to', color);\n  };\n\n  const setChatBackground = (background: string) => {\n    setChatBackgroundState(background);\n    localStorage.setItem('chatBackground', background);\n  };\n  \n  const setAppBackground = (background: string) => {\n    setAppBackgroundState(background);\n    localStorage.setItem('appBackground', background);\n  };\n\n  const setUseCustomBackground = (use: boolean) => {\n    setUseCustomBackgroundState(use);\n    localStorage.setItem('useCustomBackground', String(use));\n  };\n\n  const setIsAmoled = (enabled: boolean) => {\n    setAmoledState(enabled);\n    localStorage.setItem('isAmoled', String(enabled));\n    if (enabled) {\n        document.body.classList.add('amoled');\n    } else {\n        document.body.classList.remove('amoled');\n    }\n  }\n\n  const setNotificationSound = (soundUrl: string) => {\n    setNotificationSoundState(soundUrl);\n    localStorage.setItem('notificationSound', soundUrl);\n  };\n\n  const setAreNotificationsMuted = (muted: boolean) => {\n    setAreNotificationsMutedState(muted);\n    localStorage.setItem('areNotificationsMuted', String(muted));\n  };\n\n  const setIsWeatherVisible = (visible: boolean) => {\n    setIsWeatherVisibleState(visible);\n    localStorage.setItem('isWeatherVisible', String(visible));\n  }\n\n  const setWeatherLocation = (location: string) => {\n    setWeatherLocationState(location);\n    localStorage.setItem('weatherLocation', location);\n  }\n\n  const setWeatherUnit = (unit: WeatherUnit) => {\n    setWeatherUnitState(unit);\n    localStorage.setItem('weatherUnit', unit);\n  }\n\n  const setChatListOpacity = (opacity: number) => {\n    setChatListOpacityState(opacity);\n    localStorage.setItem('chatListOpacity', String(opacity));\n  };\n\n  return (\n    <AppearanceContext.Provider value={{ \n        accentColor, setAccentColor, \n        gradientFrom, setGradientFrom,\n        gradientTo, setGradientTo,\n        chatBackground, setChatBackground, \n        appBackground, setAppBackground,\n        useCustomBackground, setUseCustomBackground,\n        isAmoled, setIsAmoled, \n        notificationSound, setNotificationSound, \n        areNotificationsMuted, setAreNotificationsMuted,\n        isWeatherVisible, setIsWeatherVisible,\n        weatherLocation, setWeatherLocation,\n        weatherUnit, setWeatherUnit,\n        chatListOpacity, setChatListOpacity,\n    }}>\n      {children}\n    </AppearanceContext.Provider>\n  );\n}\n\nexport function useAppearance() {\n  const context = useContext(AppearanceContext);\n  if (context === undefined) {\n    throw new Error('useAppearance must be used within an AppearanceProvider');\n  }\n  return context;\n}\n","size_bytes":7593},"src/components/providers/auth-provider.tsx":{"content":"'use client';\nimport { auth } from '@/lib/firebase';\nimport { signOut as firebaseSignOut, Auth, getRedirectResult } from 'firebase/auth';\nimport React, { createContext, ReactNode, useEffect, useState } from 'react';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { VibezLogo } from '../vibez-logo';\nimport { GalaxyBackground } from '../galaxy-background';\nimport { getDoc, doc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\n\ninterface AuthContextType {\n  user: any;\n  loading: boolean;\n  error?: Error;\n  signOut: () => Promise<void>;\n  auth: Auth;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst AUTH_ROUTES = ['/login', '/signup', '/verify-email'];\n\nfunction LoadingScreen() {\n    return (\n        <div className=\"flex items-center justify-center min-h-screen bg-black relative\">\n            <GalaxyBackground />\n            <div className=\"relative z-10\">\n              <VibezLogo />\n            </div>\n        </div>\n    )\n}\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, authLoading, error] = useAuthState(auth);\n  const [isProcessingRedirect, setIsProcessingRedirect] = useState(true);\n  const pathname = usePathname();\n  const router = useRouter();\n\n  useEffect(() => {\n    // Check for redirect result on initial load\n    getRedirectResult(auth)\n      .finally(() => {\n        setIsProcessingRedirect(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    const isAuthRoute = AUTH_ROUTES.includes(pathname);\n    const isLoading = authLoading || isProcessingRedirect;\n\n    const handleAuth = async () => {\n      if (!isLoading) {\n        if (user && isAuthRoute) {\n          router.replace('/');\n        } else if (!user && !isAuthRoute) {\n          router.replace('/login');\n        } else if (user && !isAuthRoute) {\n          // Only enforce email verification for users who are definitively unverified\n          // Check Firebase auth user emailVerified flag first\n          if (user.emailVerified === false) {\n            try {\n              // Double check with user document to avoid false positives\n              const userDoc = await getDoc(doc(db, 'users', user.uid));\n              \n              // Only sign out if BOTH Firebase auth AND document confirm unverified status\n              // AND the document explicitly has emailVerified set to false (not undefined/missing)\n              if (userDoc.exists()) {\n                const userData = userDoc.data();\n                // Only enforce if document explicitly says emailVerified is false\n                // If field is missing or true, allow the user through\n                if (userData.emailVerified === false) {\n                  await signOut();\n                  router.push('/login?message=Please verify your email before logging in.');\n                  return;\n                }\n              }\n              // If document doesn't exist or emailVerified is not explicitly false, let user continue\n            } catch (error) {\n              console.error('Error checking email verification:', error);\n              // Don't sign out on errors - let user continue to avoid loops\n            }\n          }\n          // If Firebase auth says emailVerified is true, always let user through\n        }\n      }\n    };\n\n    handleAuth();\n  }, [user, authLoading, isProcessingRedirect, pathname, router]);\n\n  const signOut = async () => {\n    await firebaseSignOut(auth);\n    // Don't push here, let the useEffect handle it.\n  };\n\n  const isLoading = authLoading || isProcessingRedirect;\n  const isAuthRoute = AUTH_ROUTES.includes(pathname);\n\n  // Show loading screen if we're still loading or if we're about to redirect.\n  if (isLoading || (!user && !isAuthRoute) || (user && isAuthRoute)) {\n    return <LoadingScreen />\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading: authLoading, error, signOut, auth }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":4029},"src/components/providers/friends-provider.tsx":{"content":"\n'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { doc, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport type { User } from '@/lib/types';\n\n\ninterface FriendsContextType {\n    friends: User[];\n    friendRequests: User[];\n    handleFriendAction: (targetUserId: string, action: 'acceptRequest' | 'declineRequest' | 'removeFriend') => Promise<void>;\n}\n\nconst FriendsContext = createContext<FriendsContextType | undefined>(undefined);\n\nexport function FriendsProvider({ children }: { children: ReactNode }) {\n  const { user: authUser } = useAuth();\n  const { toast } = useToast();\n  const [friends, setFriends] = useState<User[]>([]);\n  const [friendRequests, setFriendRequests] = useState<User[]>([]);\n\n  // Note: This provider does not fetch user data directly. It relies on the user object passed to it.\n  // The FriendsPage will be responsible for fetching the full user objects.\n  \n  const handleFriendAction = useCallback(async (targetUserId: string, action: 'acceptRequest' | 'declineRequest' | 'removeFriend') => {\n    if (!authUser) {\n        toast({ title: 'Error', description: 'You must be logged in.', variant: 'destructive' });\n        return;\n    };\n\n    const currentUserRef = doc(db, 'users', authUser.uid);\n    const targetUserRef = doc(db, 'users', targetUserId);\n    \n    try {\n        if (action === 'acceptRequest') {\n            await updateDoc(currentUserRef, { \n                friends: arrayUnion(targetUserId),\n                friendRequestsReceived: arrayRemove(targetUserId)\n            });\n            await updateDoc(targetUserRef, {\n                friends: arrayUnion(authUser.uid),\n                friendRequestsSent: arrayRemove(authUser.uid)\n            });\n            toast({ title: 'Friend Added', description: 'You are now friends!' });\n        } else if (action === 'declineRequest') {\n            await updateDoc(currentUserRef, { friendRequestsReceived: arrayRemove(targetUserId) });\n            await updateDoc(targetUserRef, { friendRequestsSent: arrayRemove(authUser.uid) });\n            toast({ title: 'Request Declined' });\n        } else if (action === 'removeFriend') {\n            await updateDoc(currentUserRef, { friends: arrayRemove(targetUserId) });\n            await updateDoc(targetUserRef, { friends: arrayRemove(currentUser.uid) });\n            toast({ title: 'Friend Removed' });\n        }\n    } catch(e: any) {\n        console.error(\"Error handling friend action:\", e);\n        toast({ title: 'Error', description: e.message || \"Something went wrong.\", variant: \"destructive\" });\n    }\n  }, [authUser, toast]);\n\n\n  return (\n    <FriendsContext.Provider value={{ friends, friendRequests, handleFriendAction }}>\n      {children}\n    </FriendsContext.Provider>\n  );\n}\n\nexport function useFriends() {\n  const context = useContext(FriendsContext);\n  if (context === undefined) {\n    throw new Error('useFriends must be used within a FriendsProvider');\n  }\n  return context;\n}\n","size_bytes":3154},"src/components/providers/mobile-provider.tsx":{"content":"\n'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// Use a more generic name for the hook\nfunction useMediaQuery(query: string) {\n  const [matches, setMatches] = useState(false);\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const listener = () => setMatches(media.matches);\n    window.addEventListener('resize', listener);\n    return () => window.removeEventListener('resize', listener);\n  }, [matches, query]);\n  return matches;\n}\n\ninterface MobileDesignContextType {\n  isMobileDesign: boolean;\n  setIsMobileDesign: (isMobile: boolean) => void;\n  isMobileView: boolean;\n  width: number;\n  height: number;\n}\n\nconst MobileDesignContext = createContext<MobileDesignContextType | undefined>(undefined);\n\nexport function MobileProvider({ children }: { children: ReactNode }) {\n  const [isMobileDesign, setMobileDesignState] = useState(true);\n  const isMobile = useMediaQuery('(max-width: 768px)');\n  \n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const savedMobileDesign = localStorage.getItem('mobile_redesign');\n    const isEnabled = savedMobileDesign !== null ? savedMobileDesign === 'true' : true;\n    \n    setMobileDesignState(isEnabled);\n    document.body.dataset.mobile = isEnabled ? \"true\" : \"false\";\n\n    const handleResize = () => {\n        setDimensions({ width: window.innerWidth, height: window.innerHeight });\n    }\n    window.addEventListener('resize', handleResize);\n    handleResize(); // Initial call\n    \n    return () => window.removeEventListener('resize', handleResize);\n\n  }, []);\n\n  const setIsMobileDesign = (enabled: boolean) => {\n    setMobileDesignState(enabled);\n    localStorage.setItem('mobile_redesign', String(enabled));\n    document.body.dataset.mobile = enabled ? \"true\" : \"false\";\n  };\n\n  const isMobileView = isMobile && isMobileDesign;\n\n  return (\n    <MobileDesignContext.Provider value={{ isMobileDesign, setIsMobileDesign, isMobileView, ...dimensions }}>\n      {children}\n    </MobileDesignContext.Provider>\n  );\n}\n\nexport function useMobileDesign() {\n  const context = useContext(MobileDesignContext);\n  if (context === undefined) {\n    throw new Error('useMobileDesign must be used within a MobileProvider');\n  }\n  return context;\n}\n","size_bytes":2380},"src/components/providers/stories-provider.tsx":{"content":"\n'use client';\n\nimport React, { createContext, useContext } from 'react';\nimport type { Story, User } from '@/lib/types';\n\ninterface StoriesContextType {\n    stories: Story[];\n    usersWithStories: User[];\n    currentUser?: User;\n    onViewStory: (user: User, stories: Story[]) => void;\n    onCreateStory: (file: File) => void;\n    usersCache: Map<string, User>;\n}\n\nexport const StoriesContext = createContext<StoriesContextType | undefined>(undefined);\n\nexport function useStories() {\n    const context = useContext(StoriesContext);\n    if (!context) {\n        throw new Error('useStories must be used within a StoriesContext.Provider');\n    }\n    return context;\n}\n","size_bytes":667},"src/components/providers/theme-provider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":327},"src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1991},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4434},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/button.tsx":{"content":"\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&>svg]:pointer-events-none [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10 shrink-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1911},"src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2709},"src/components/ui/card.tsx":{"content":"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-2xl border bg-card text-card-foreground shadow-lg\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1879},"src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10479},"src/components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1070},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"src/components/ui/dialog.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7433},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":778},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":724},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8505},"src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1244},"src/components/ui/progress.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & { asChild?: boolean }\n>(({ className, value, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? ProgressPrimitive.Root : \"div\";\n  return (\n    <ProgressPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        className=\"h-full w-full flex-1 bg-primary transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n})\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":931},"src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1481},"src/components/ui/scroll-area.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> & {\n    viewportRef?: React.Ref<HTMLDivElement>\n  }\n>(({ className, children, viewportRef, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport ref={viewportRef} className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1740},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5629},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":770},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"src/components/ui/sidebar.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH_VAR = \"--sidebar-width\"\nconst SIDEBAR_WIDTH_ICON_VAR = \"--sidebar-width-icon\"\nconst SIDEBAR_WIDTH = \"22rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"20rem\"\nconst SIDEBAR_WIDTH_ICON = \"3.5rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                [SIDEBAR_WIDTH_VAR]: SIDEBAR_WIDTH,\n                [SIDEBAR_WIDTH_ICON_VAR]: SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\"group/sidebar-wrapper\", className)}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n    const context = useSidebar()\n    Object.assign(context, { collapsible })\n    \n    if (collapsible === \"none\") {\n      return (\n        <aside\n          className={cn(\n            \"flex h-screen w-[var(--sidebar-width)] flex-col group/sidebar\",\n            className\n          )}\n          data-sidebar-state={state}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </aside>\n      )\n    }\n\n    if (isMobile && collapsible === 'offcanvas') {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile}>\n          <SheetContent\n            className=\"w-[var(--sidebar-width)] bg-background p-0 [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n          >\n            <aside className=\"flex h-full w-full flex-col group/sidebar\" data-sidebar-state=\"expanded\">\n                {children}\n            </aside>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n    \n    return (\n        <aside\n          ref={ref}\n          className={cn(\n            'group/sidebar hidden h-screen shrink-0 md:flex flex-col',\n            'transition-[width] duration-300 ease-in-out',\n            state === 'expanded' && 'w-[var(--sidebar-width)]',\n            state === 'collapsed' && 'w-[var(--sidebar-width-icon)]',\n            className\n          )}\n          data-sidebar-state={state}\n          {...props}\n        >\n            {children}\n        </aside>\n      )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  const { collapsible, isMobile } = useSidebar();\n  if (isMobile && collapsible === 'offcanvas') {\n    return (\n         <main\n            ref={ref}\n            className={cn(\n                \"flex min-h-screen flex-1 flex-col\",\n                className\n            )}\n            {...props}\n        />\n    )\n  }\n\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"flex min-h-screen flex-1 flex-col\",\n        'md:transition-[margin-left] md:duration-300 md:ease-in-out',\n        'group-data-[sidebar-state=expanded]/sidebar-wrapper:md:ml-[var(--sidebar-width)]',\n        'group-data-[sidebar-state=collapsed]/sidebar-wrapper:md:ml-[var(--sidebar-width-icon)]',\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      className={cn(\"mx-2 w-auto bg-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n    const { collapsible, state } = useSidebar()\n    return (\n        <div\n        ref={ref}\n        className={cn(\n            \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto\",\n            collapsible === 'icon' && state === 'collapsed' && \"overflow-hidden\",\n            className\n        )}\n        {...props}\n        />\n    )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n    const { collapsible, state } = useSidebar()\n    const Comp = asChild ? Slot : \"div\"\n\n    if (collapsible === 'icon' && state === 'collapsed') {\n        return null;\n    }\n\n    return (\n        <Comp\n        ref={ref}\n        className={cn(\n            \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-muted-foreground/70 outline-none ring-ring transition-[margin,opacity] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n            className\n        )}\n        {...props}\n        />\n    )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n    const { collapsible, state } = useSidebar()\n    const Comp = asChild ? Slot : \"button\"\n\n    if (collapsible === 'icon' && state === 'collapsed') {\n        return null;\n    }\n\n    return (\n        <Comp\n        ref={ref}\n        className={cn(\n            \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-foreground outline-none ring-ring transition-transform hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n            // Increases the hit area of the button on mobile.\n            \"after:absolute after:-inset-2 after:md:hidden\",\n            className\n        )}\n        {...props}\n        />\n    )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-ring transition-[width,height,padding] hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 active:bg-accent active:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-accent-foreground data-[state=open]:hover:bg-accent data-[state=open]:hover:text-accent-foreground [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-accent hover:text-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--border))] hover:bg-accent hover:text-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state, collapsible } = useSidebar()\n    \n    const isCollapsed = state === 'collapsed' && collapsible === 'icon';\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-size={size}\n        data-active={isActive}\n        className={cn(\n            sidebarMenuButtonVariants({ variant, size }), \n            isCollapsed && 'size-8 p-2',\n            className\n        )}\n        {...props}\n      >\n        {children}\n      </Comp>\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n    const { collapsible, state } = useSidebar()\n    const Comp = asChild ? Slot : \"button\"\n    if (collapsible === 'icon' && state === 'collapsed') {\n        return null;\n    }\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-foreground outline-none ring-ring transition-transform hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n    const { collapsible, state } = useSidebar()\n\n    if(collapsible === 'icon' && state === 'collapsed') {\n        return null;\n    }\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-foreground select-none pointer-events-none\",\n        \"peer-hover/menu-button:text-accent-foreground peer-data-[active=true]/menu-button:text-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        className\n      )}\n      {...props}\n    />\n    )\n})\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => {\n    const { collapsible, state } = useSidebar()\n\n    if(collapsible === 'icon' && state === 'collapsed') {\n        return null;\n    }\n  return (\n    <ul\n      ref={ref}\n      className={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-border px-2.5 py-0.5\",\n        className\n      )}\n      {...props}\n    />\n    )\n})\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n    const { collapsible, state } = useSidebar()\n  const Comp = asChild ? Slot : \"a\"\n    if(collapsible === 'icon' && state === 'collapsed') {\n        return null;\n    }\n\n  return (\n    <Comp\n      ref={ref}\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-foreground outline-none ring-ring hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 active:bg-accent active:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-accent-foreground\",\n        \"data-[active=true]:bg-accent data-[active=true]:text-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarTrigger,\n  useSidebar,\n}\n\n    ","size_bytes":20313},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1091},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1153},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n\n    ","size_bytes":1898},"src/components/ui/textarea.tsx":{"content":"import * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { useLayoutEffect, useRef } from 'react';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({ className, value, ...props }, ref) => {\n    const localRef = useRef<HTMLTextAreaElement>(null);\n    const combinedRef = (el: HTMLTextAreaElement) => {\n      localRef.current = el;\n      if (typeof ref === 'function') {\n        ref(el);\n      } else if (ref) {\n        ref.current = el;\n      }\n    };\n    \n    useLayoutEffect(() => {\n        const textarea = localRef.current;\n        if(textarea) {\n            // Reset height to shrink on delete\n            textarea.style.height = 'auto';\n            // Set height to scrollHeight\n            textarea.style.height = `${textarea.scrollHeight}px`;\n        }\n    }, [value]);\n\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[40px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 overflow-y-hidden',\n          className\n        )}\n        ref={combinedRef}\n        value={value}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n","size_bytes":1393},"src/components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4859},"src/components/ui/toaster.tsx":{"content":"\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1159},"src/dataconnect-generated/esm/index.esm.js":{"content":"import { queryRef, executeQuery, mutationRef, executeMutation, validateArgs } from 'firebase/data-connect';\n\nexport const connectorConfig = {\n  connector: 'example',\n  service: 'invincible476-patch-1',\n  location: 'us-central1'\n};\n\nexport const createUserRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return mutationRef(dcInstance, 'CreateUser');\n}\ncreateUserRef.operationName = 'CreateUser';\n\nexport function createUser(dc) {\n  return executeMutation(createUserRef(dc));\n}\n\nexport const listSurveysRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return queryRef(dcInstance, 'ListSurveys');\n}\nlistSurveysRef.operationName = 'ListSurveys';\n\nexport function listSurveys(dc) {\n  return executeQuery(listSurveysRef(dc));\n}\n\nexport const updateSurveyStatusRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return mutationRef(dcInstance, 'UpdateSurveyStatus');\n}\nupdateSurveyStatusRef.operationName = 'UpdateSurveyStatus';\n\nexport function updateSurveyStatus(dc) {\n  return executeMutation(updateSurveyStatusRef(dc));\n}\n\nexport const getSurveyRef = (dc) => {\n  const { dc: dcInstance} = validateArgs(connectorConfig, dc, undefined);\n  dcInstance._useGeneratedSdk();\n  return queryRef(dcInstance, 'GetSurvey');\n}\ngetSurveyRef.operationName = 'GetSurvey';\n\nexport function getSurvey(dc) {\n  return executeQuery(getSurveyRef(dc));\n}\n\n","size_bytes":1556},"src/dataconnect-generated/react/README.md":{"content":"# Generated React README\nThis README will guide you through the process of using the generated React SDK package for the connector `example`. It will also provide examples on how to use your generated SDK to call your Data Connect queries and mutations.\n\n**If you're looking for the `JavaScript README`, you can find it at [`dataconnect-generated/README.md`](../README.md)**\n\n***NOTE:** This README is generated alongside the generated SDK. If you make changes to this file, they will be overwritten when the SDK is regenerated.*\n\nYou can use this generated SDK by importing from the package `@dataconnect/generated/react` as shown below. Both CommonJS and ESM imports are supported.\n\nYou can also follow the instructions from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#react).\n\n# Table of Contents\n- [**Overview**](#generated-react-readme)\n- [**TanStack Query Firebase & TanStack React Query**](#tanstack-query-firebase-tanstack-react-query)\n  - [*Package Installation*](#installing-tanstack-query-firebase-and-tanstack-react-query-packages)\n  - [*Configuring TanStack Query*](#configuring-tanstack-query)\n- [**Accessing the connector**](#accessing-the-connector)\n  - [*Connecting to the local Emulator*](#connecting-to-the-local-emulator)\n- [**Queries**](#queries)\n  - [*ListSurveys*](#listsurveys)\n  - [*GetSurvey*](#getsurvey)\n- [**Mutations**](#mutations)\n  - [*CreateUser*](#createuser)\n  - [*UpdateSurveyStatus*](#updatesurveystatus)\n\n# TanStack Query Firebase & TanStack React Query\nThis SDK provides [React](https://react.dev/) hooks generated specific to your application, for the operations found in the connector `example`. These hooks are generated using [TanStack Query Firebase](https://react-query-firebase.invertase.dev/) by our partners at Invertase, a library built on top of [TanStack React Query v5](https://tanstack.com/query/v5/docs/framework/react/overview).\n\n***You do not need to be familiar with Tanstack Query or Tanstack Query Firebase to use this SDK.*** However, you may find it useful to learn more about them, as they will empower you as a user of this Generated React SDK.\n\n## Installing TanStack Query Firebase and TanStack React Query Packages\nIn order to use the React generated SDK, you must install the `TanStack React Query` and `TanStack Query Firebase` packages.\n```bash\nnpm i --save @tanstack/react-query @tanstack-query-firebase/react\n```\n```bash\nnpm i --save firebase@latest # Note: React has a peer dependency on ^11.3.0\n```\n\nYou can also follow the installation instructions from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#tanstack-install), or the [TanStack Query Firebase documentation](https://react-query-firebase.invertase.dev/react) and [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/installation).\n\n## Configuring TanStack Query\nIn order to use the React generated SDK in your application, you must wrap your application's component tree in a `QueryClientProvider` component from TanStack React Query. None of your generated React SDK hooks will work without this provider.\n\n```javascript\nimport { QueryClientProvider } from '@tanstack/react-query';\n\n// Create a TanStack Query client instance\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    // Provide the client to your App\n    <QueryClientProvider client={queryClient}>\n      <MyApplication />\n    </QueryClientProvider>\n  )\n}\n```\n\nTo learn more about `QueryClientProvider`, see the [TanStack React Query documentation](https://tanstack.com/query/latest/docs/framework/react/quick-start) and the [TanStack Query Firebase documentation](https://invertase.docs.page/tanstack-query-firebase/react#usage).\n\n# Accessing the connector\nA connector is a collection of Queries and Mutations. One SDK is generated for each connector - this SDK is generated for the connector `example`.\n\nYou can find more information about connectors in the [Data Connect documentation](https://firebase.google.com/docs/data-connect#how-does).\n\n```javascript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\n\nconst dataConnect = getDataConnect(connectorConfig);\n```\n\n## Connecting to the local Emulator\nBy default, the connector will connect to the production service.\n\nTo connect to the emulator, you can use the following code.\nYou can also follow the emulator instructions from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#emulator-react-angular).\n\n```javascript\nimport { connectDataConnectEmulator, getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\n\nconst dataConnect = getDataConnect(connectorConfig);\nconnectDataConnectEmulator(dataConnect, 'localhost', 9399);\n```\n\nAfter it's initialized, you can call your Data Connect [queries](#queries) and [mutations](#mutations) using the hooks provided from your generated React SDK.\n\n# Queries\n\nThe React generated SDK provides Query hook functions that call and return [`useDataConnectQuery`](https://react-query-firebase.invertase.dev/react/data-connect/querying) hooks from TanStack Query Firebase.\n\nCalling these hook functions will return a `UseQueryResult` object. This object holds the state of your Query, including whether the Query is loading, has completed, or has succeeded/failed, and the most recent data returned by the Query, among other things. To learn more about these hooks and how to use them, see the [TanStack Query Firebase documentation](https://react-query-firebase.invertase.dev/react/data-connect/querying).\n\nTanStack React Query caches the results of your Queries, so using the same Query hook function in multiple places in your application allows the entire application to automatically see updates to that Query's data.\n\nQuery hooks execute their Queries automatically when called, and periodically refresh, unless you change the `queryOptions` for the Query. To learn how to stop a Query from automatically executing, including how to make a query \"lazy\", see the [TanStack React Query documentation](https://tanstack.com/query/latest/docs/framework/react/guides/disabling-queries).\n\nTo learn more about TanStack React Query's Queries, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/guides/queries).\n\n## Using Query Hooks\nHere's a general overview of how to use the generated Query hooks in your code:\n\n- If the Query has no variables, the Query hook function does not require arguments.\n- If the Query has any required variables, the Query hook function will require at least one argument: an object that contains all the required variables for the Query.\n- If the Query has some required and some optional variables, only required variables are necessary in the variables argument object, and optional variables may be provided as well.\n- If all of the Query's variables are optional, the Query hook function does not require any arguments.\n- Query hook functions can be called with or without passing in a `DataConnect` instance as an argument. If no `DataConnect` argument is passed in, then the generated SDK will call `getDataConnect(connectorConfig)` behind the scenes for you.\n- Query hooks functions can be called with or without passing in an `options` argument of type `useDataConnectQueryOptions`. To learn more about the `options` argument, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/guides/query-options).\n  - ***Special case:***  If the Query has all optional variables and you would like to provide an `options` argument to the Query hook function without providing any variables, you must pass `undefined` where you would normally pass the Query's variables, and then may provide the `options` argument.\n\nBelow are examples of how to use the `example` connector's generated Query hook functions to execute each Query. You can also follow the examples from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#operations-react-angular).\n\n## ListSurveys\nYou can execute the `ListSurveys` Query using the following Query hook function, which is defined in [dataconnect-generated/react/index.d.ts](./index.d.ts):\n\n```javascript\nuseListSurveys(dc: DataConnect, options?: useDataConnectQueryOptions<ListSurveysData>): UseDataConnectQueryResult<ListSurveysData, undefined>;\n```\nYou can also pass in a `DataConnect` instance to the Query hook function.\n```javascript\nuseListSurveys(options?: useDataConnectQueryOptions<ListSurveysData>): UseDataConnectQueryResult<ListSurveysData, undefined>;\n```\n\n### Variables\nThe `ListSurveys` Query has no variables.\n### Return Type\nRecall that calling the `ListSurveys` Query hook function returns a `UseQueryResult` object. This object holds the state of your Query, including whether the Query is loading, has completed, or has succeeded/failed, and any data returned by the Query, among other things.\n\nTo check the status of a Query, use the `UseQueryResult.status` field. You can also check for pending / success / error status using the `UseQueryResult.isPending`, `UseQueryResult.isSuccess`, and `UseQueryResult.isError` fields.\n\nTo access the data returned by a Query, use the `UseQueryResult.data` field. The data for the `ListSurveys` Query is of type `ListSurveysData`, which is defined in [dataconnect-generated/index.d.ts](../index.d.ts). It has the following fields:\n```javascript\nexport interface ListSurveysData {\n  surveys: ({\n    id: UUIDString;\n    title: string;\n    description?: string | null;\n  } & Survey_Key)[];\n}\n```\n\nTo learn more about the `UseQueryResult` object, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/reference/useQuery).\n\n### Using `ListSurveys`'s Query hook function\n\n```javascript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\nimport { useListSurveys } from '@dataconnect/generated/react'\n\nexport default function ListSurveysComponent() {\n  // You don't have to do anything to \"execute\" the Query.\n  // Call the Query hook function to get a `UseQueryResult` object which holds the state of your Query.\n  const query = useListSurveys();\n\n  // You can also pass in a `DataConnect` instance to the Query hook function.\n  const dataConnect = getDataConnect(connectorConfig);\n  const query = useListSurveys(dataConnect);\n\n  // You can also pass in a `useDataConnectQueryOptions` object to the Query hook function.\n  const options = { staleTime: 5 * 1000 };\n  const query = useListSurveys(options);\n\n  // You can also pass both a `DataConnect` instance and a `useDataConnectQueryOptions` object.\n  const dataConnect = getDataConnect(connectorConfig);\n  const options = { staleTime: 5 * 1000 };\n  const query = useListSurveys(dataConnect, options);\n\n  // Then, you can render your component dynamically based on the status of the Query.\n  if (query.isPending) {\n    return <div>Loading...</div>;\n  }\n\n  if (query.isError) {\n    return <div>Error: {query.error.message}</div>;\n  }\n\n  // If the Query is successful, you can access the data returned using the `UseQueryResult.data` field.\n  if (query.isSuccess) {\n    console.log(query.data.surveys);\n  }\n  return <div>Query execution {query.isSuccess ? 'successful' : 'failed'}!</div>;\n}\n```\n\n## GetSurvey\nYou can execute the `GetSurvey` Query using the following Query hook function, which is defined in [dataconnect-generated/react/index.d.ts](./index.d.ts):\n\n```javascript\nuseGetSurvey(dc: DataConnect, options?: useDataConnectQueryOptions<GetSurveyData>): UseDataConnectQueryResult<GetSurveyData, undefined>;\n```\nYou can also pass in a `DataConnect` instance to the Query hook function.\n```javascript\nuseGetSurvey(options?: useDataConnectQueryOptions<GetSurveyData>): UseDataConnectQueryResult<GetSurveyData, undefined>;\n```\n\n### Variables\nThe `GetSurvey` Query has no variables.\n### Return Type\nRecall that calling the `GetSurvey` Query hook function returns a `UseQueryResult` object. This object holds the state of your Query, including whether the Query is loading, has completed, or has succeeded/failed, and any data returned by the Query, among other things.\n\nTo check the status of a Query, use the `UseQueryResult.status` field. You can also check for pending / success / error status using the `UseQueryResult.isPending`, `UseQueryResult.isSuccess`, and `UseQueryResult.isError` fields.\n\nTo access the data returned by a Query, use the `UseQueryResult.data` field. The data for the `GetSurvey` Query is of type `GetSurveyData`, which is defined in [dataconnect-generated/index.d.ts](../index.d.ts). It has the following fields:\n```javascript\nexport interface GetSurveyData {\n  survey?: {\n    id: UUIDString;\n    title: string;\n    description?: string | null;\n    questions_on_survey: ({\n      id: UUIDString;\n      text: string;\n      order: number;\n    } & Question_Key)[];\n  } & Survey_Key;\n}\n```\n\nTo learn more about the `UseQueryResult` object, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/reference/useQuery).\n\n### Using `GetSurvey`'s Query hook function\n\n```javascript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\nimport { useGetSurvey } from '@dataconnect/generated/react'\n\nexport default function GetSurveyComponent() {\n  // You don't have to do anything to \"execute\" the Query.\n  // Call the Query hook function to get a `UseQueryResult` object which holds the state of your Query.\n  const query = useGetSurvey();\n\n  // You can also pass in a `DataConnect` instance to the Query hook function.\n  const dataConnect = getDataConnect(connectorConfig);\n  const query = useGetSurvey(dataConnect);\n\n  // You can also pass in a `useDataConnectQueryOptions` object to the Query hook function.\n  const options = { staleTime: 5 * 1000 };\n  const query = useGetSurvey(options);\n\n  // You can also pass both a `DataConnect` instance and a `useDataConnectQueryOptions` object.\n  const dataConnect = getDataConnect(connectorConfig);\n  const options = { staleTime: 5 * 1000 };\n  const query = useGetSurvey(dataConnect, options);\n\n  // Then, you can render your component dynamically based on the status of the Query.\n  if (query.isPending) {\n    return <div>Loading...</div>;\n  }\n\n  if (query.isError) {\n    return <div>Error: {query.error.message}</div>;\n  }\n\n  // If the Query is successful, you can access the data returned using the `UseQueryResult.data` field.\n  if (query.isSuccess) {\n    console.log(query.data.survey);\n  }\n  return <div>Query execution {query.isSuccess ? 'successful' : 'failed'}!</div>;\n}\n```\n\n# Mutations\n\nThe React generated SDK provides Mutations hook functions that call and return [`useDataConnectMutation`](https://react-query-firebase.invertase.dev/react/data-connect/mutations) hooks from TanStack Query Firebase.\n\nCalling these hook functions will return a `UseMutationResult` object. This object holds the state of your Mutation, including whether the Mutation is loading, has completed, or has succeeded/failed, and the most recent data returned by the Mutation, among other things. To learn more about these hooks and how to use them, see the [TanStack Query Firebase documentation](https://react-query-firebase.invertase.dev/react/data-connect/mutations).\n\nMutation hooks do not execute their Mutations automatically when called. Rather, after calling the Mutation hook function and getting a `UseMutationResult` object, you must call the `UseMutationResult.mutate()` function to execute the Mutation.\n\nTo learn more about TanStack React Query's Mutations, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/guides/mutations).\n\n## Using Mutation Hooks\nHere's a general overview of how to use the generated Mutation hooks in your code:\n\n- Mutation hook functions are not called with the arguments to the Mutation. Instead, arguments are passed to `UseMutationResult.mutate()`.\n- If the Mutation has no variables, the `mutate()` function does not require arguments.\n- If the Mutation has any required variables, the `mutate()` function will require at least one argument: an object that contains all the required variables for the Mutation.\n- If the Mutation has some required and some optional variables, only required variables are necessary in the variables argument object, and optional variables may be provided as well.\n- If all of the Mutation's variables are optional, the Mutation hook function does not require any arguments.\n- Mutation hook functions can be called with or without passing in a `DataConnect` instance as an argument. If no `DataConnect` argument is passed in, then the generated SDK will call `getDataConnect(connectorConfig)` behind the scenes for you.\n- Mutation hooks also accept an `options` argument of type `useDataConnectMutationOptions`. To learn more about the `options` argument, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/guides/mutations#mutation-side-effects).\n  - `UseMutationResult.mutate()` also accepts an `options` argument of type `useDataConnectMutationOptions`.\n  - ***Special case:*** If the Mutation has no arguments (or all optional arguments and you wish to provide none), and you want to pass `options` to `UseMutationResult.mutate()`, you must pass `undefined` where you would normally pass the Mutation's arguments, and then may provide the options argument.\n\nBelow are examples of how to use the `example` connector's generated Mutation hook functions to execute each Mutation. You can also follow the examples from the [Data Connect documentation](https://firebase.google.com/docs/data-connect/web-sdk#operations-react-angular).\n\n## CreateUser\nYou can execute the `CreateUser` Mutation using the `UseMutationResult` object returned by the following Mutation hook function (which is defined in [dataconnect-generated/react/index.d.ts](./index.d.ts)):\n```javascript\nuseCreateUser(options?: useDataConnectMutationOptions<CreateUserData, FirebaseError, void>): UseDataConnectMutationResult<CreateUserData, undefined>;\n```\nYou can also pass in a `DataConnect` instance to the Mutation hook function.\n```javascript\nuseCreateUser(dc: DataConnect, options?: useDataConnectMutationOptions<CreateUserData, FirebaseError, void>): UseDataConnectMutationResult<CreateUserData, undefined>;\n```\n\n### Variables\nThe `CreateUser` Mutation has no variables.\n### Return Type\nRecall that calling the `CreateUser` Mutation hook function returns a `UseMutationResult` object. This object holds the state of your Mutation, including whether the Mutation is loading, has completed, or has succeeded/failed, among other things.\n\nTo check the status of a Mutation, use the `UseMutationResult.status` field. You can also check for pending / success / error status using the `UseMutationResult.isPending`, `UseMutationResult.isSuccess`, and `UseMutationResult.isError` fields.\n\nTo execute the Mutation, call `UseMutationResult.mutate()`. This function executes the Mutation, but does not return the data from the Mutation.\n\nTo access the data returned by a Mutation, use the `UseMutationResult.data` field. The data for the `CreateUser` Mutation is of type `CreateUserData`, which is defined in [dataconnect-generated/index.d.ts](../index.d.ts). It has the following fields:\n```javascript\nexport interface CreateUserData {\n  user_insert: User_Key;\n}\n```\n\nTo learn more about the `UseMutationResult` object, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/reference/useMutation).\n\n### Using `CreateUser`'s Mutation hook function\n\n```javascript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\nimport { useCreateUser } from '@dataconnect/generated/react'\n\nexport default function CreateUserComponent() {\n  // Call the Mutation hook function to get a `UseMutationResult` object which holds the state of your Mutation.\n  const mutation = useCreateUser();\n\n  // You can also pass in a `DataConnect` instance to the Mutation hook function.\n  const dataConnect = getDataConnect(connectorConfig);\n  const mutation = useCreateUser(dataConnect);\n\n  // You can also pass in a `useDataConnectMutationOptions` object to the Mutation hook function.\n  const options = {\n    onSuccess: () => { console.log('Mutation succeeded!'); }\n  };\n  const mutation = useCreateUser(options);\n\n  // You can also pass both a `DataConnect` instance and a `useDataConnectMutationOptions` object.\n  const dataConnect = getDataConnect(connectorConfig);\n  const options = {\n    onSuccess: () => { console.log('Mutation succeeded!'); }\n  };\n  const mutation = useCreateUser(dataConnect, options);\n\n  // After calling the Mutation hook function, you must call `UseMutationResult.mutate()` to execute the Mutation.\n  mutation.mutate();\n\n  // You can also pass in a `useDataConnectMutationOptions` object to `UseMutationResult.mutate()`.\n  // Since this Mutation accepts no variables, you must pass `undefined` where you would normally pass the variables.\n  const options = {\n    onSuccess: () => { console.log('Mutation succeeded!'); }\n  };\n  mutation.mutate(undefined, options);\n\n  // Then, you can render your component dynamically based on the status of the Mutation.\n  if (mutation.isPending) {\n    return <div>Loading...</div>;\n  }\n\n  if (mutation.isError) {\n    return <div>Error: {mutation.error.message}</div>;\n  }\n\n  // If the Mutation is successful, you can access the data returned using the `UseMutationResult.data` field.\n  if (mutation.isSuccess) {\n    console.log(mutation.data.user_insert);\n  }\n  return <div>Mutation execution {mutation.isSuccess ? 'successful' : 'failed'}!</div>;\n}\n```\n\n## UpdateSurveyStatus\nYou can execute the `UpdateSurveyStatus` Mutation using the `UseMutationResult` object returned by the following Mutation hook function (which is defined in [dataconnect-generated/react/index.d.ts](./index.d.ts)):\n```javascript\nuseUpdateSurveyStatus(options?: useDataConnectMutationOptions<UpdateSurveyStatusData, FirebaseError, void>): UseDataConnectMutationResult<UpdateSurveyStatusData, undefined>;\n```\nYou can also pass in a `DataConnect` instance to the Mutation hook function.\n```javascript\nuseUpdateSurveyStatus(dc: DataConnect, options?: useDataConnectMutationOptions<UpdateSurveyStatusData, FirebaseError, void>): UseDataConnectMutationResult<UpdateSurveyStatusData, undefined>;\n```\n\n### Variables\nThe `UpdateSurveyStatus` Mutation has no variables.\n### Return Type\nRecall that calling the `UpdateSurveyStatus` Mutation hook function returns a `UseMutationResult` object. This object holds the state of your Mutation, including whether the Mutation is loading, has completed, or has succeeded/failed, among other things.\n\nTo check the status of a Mutation, use the `UseMutationResult.status` field. You can also check for pending / success / error status using the `UseMutationResult.isPending`, `UseMutationResult.isSuccess`, and `UseMutationResult.isError` fields.\n\nTo execute the Mutation, call `UseMutationResult.mutate()`. This function executes the Mutation, but does not return the data from the Mutation.\n\nTo access the data returned by a Mutation, use the `UseMutationResult.data` field. The data for the `UpdateSurveyStatus` Mutation is of type `UpdateSurveyStatusData`, which is defined in [dataconnect-generated/index.d.ts](../index.d.ts). It has the following fields:\n```javascript\nexport interface UpdateSurveyStatusData {\n  survey_update?: Survey_Key | null;\n}\n```\n\nTo learn more about the `UseMutationResult` object, see the [TanStack React Query documentation](https://tanstack.com/query/v5/docs/framework/react/reference/useMutation).\n\n### Using `UpdateSurveyStatus`'s Mutation hook function\n\n```javascript\nimport { getDataConnect } from 'firebase/data-connect';\nimport { connectorConfig } from '@dataconnect/generated';\nimport { useUpdateSurveyStatus } from '@dataconnect/generated/react'\n\nexport default function UpdateSurveyStatusComponent() {\n  // Call the Mutation hook function to get a `UseMutationResult` object which holds the state of your Mutation.\n  const mutation = useUpdateSurveyStatus();\n\n  // You can also pass in a `DataConnect` instance to the Mutation hook function.\n  const dataConnect = getDataConnect(connectorConfig);\n  const mutation = useUpdateSurveyStatus(dataConnect);\n\n  // You can also pass in a `useDataConnectMutationOptions` object to the Mutation hook function.\n  const options = {\n    onSuccess: () => { console.log('Mutation succeeded!'); }\n  };\n  const mutation = useUpdateSurveyStatus(options);\n\n  // You can also pass both a `DataConnect` instance and a `useDataConnectMutationOptions` object.\n  const dataConnect = getDataConnect(connectorConfig);\n  const options = {\n    onSuccess: () => { console.log('Mutation succeeded!'); }\n  };\n  const mutation = useUpdateSurveyStatus(dataConnect, options);\n\n  // After calling the Mutation hook function, you must call `UseMutationResult.mutate()` to execute the Mutation.\n  mutation.mutate();\n\n  // You can also pass in a `useDataConnectMutationOptions` object to `UseMutationResult.mutate()`.\n  // Since this Mutation accepts no variables, you must pass `undefined` where you would normally pass the variables.\n  const options = {\n    onSuccess: () => { console.log('Mutation succeeded!'); }\n  };\n  mutation.mutate(undefined, options);\n\n  // Then, you can render your component dynamically based on the status of the Mutation.\n  if (mutation.isPending) {\n    return <div>Loading...</div>;\n  }\n\n  if (mutation.isError) {\n    return <div>Error: {mutation.error.message}</div>;\n  }\n\n  // If the Mutation is successful, you can access the data returned using the `UseMutationResult.data` field.\n  if (mutation.isSuccess) {\n    console.log(mutation.data.survey_update);\n  }\n  return <div>Mutation execution {mutation.isSuccess ? 'successful' : 'failed'}!</div>;\n}\n```\n\n","size_bytes":26126},"src/dataconnect-generated/react/index.cjs.js":{"content":"const { createUserRef, listSurveysRef, updateSurveyStatusRef, getSurveyRef, connectorConfig } = require('../index.cjs.js');\nconst { validateArgs, CallerSdkTypeEnum } = require('firebase/data-connect');\nconst { useDataConnectQuery, useDataConnectMutation, validateReactArgs } = require('@tanstack-query-firebase/react/data-connect');\n\nexports.useCreateUser = function useCreateUser(dcOrOptions, options) {\n  const { dc: dcInstance, vars: inputOpts } = validateArgs(connectorConfig, dcOrOptions, options);\n  function refFactory() {\n    return createUserRef(dcInstance);\n  }\n  return useDataConnectMutation(refFactory, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}\n\n\nexports.useListSurveys = function useListSurveys(dcOrOptions, options) {\n  const { dc: dcInstance, options: inputOpts } = validateReactArgs(connectorConfig, dcOrOptions, options);\n  const ref = listSurveysRef(dcInstance);\n  return useDataConnectQuery(ref, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}\nexports.useUpdateSurveyStatus = function useUpdateSurveyStatus(dcOrOptions, options) {\n  const { dc: dcInstance, vars: inputOpts } = validateArgs(connectorConfig, dcOrOptions, options);\n  function refFactory() {\n    return updateSurveyStatusRef(dcInstance);\n  }\n  return useDataConnectMutation(refFactory, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}\n\n\nexports.useGetSurvey = function useGetSurvey(dcOrOptions, options) {\n  const { dc: dcInstance, options: inputOpts } = validateReactArgs(connectorConfig, dcOrOptions, options);\n  const ref = getSurveyRef(dcInstance);\n  return useDataConnectQuery(ref, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}","size_bytes":1623},"src/dataconnect-generated/react/index.d.ts":{"content":"import { CreateUserData, ListSurveysData, UpdateSurveyStatusData, GetSurveyData } from '../';\nimport { UseDataConnectQueryResult, useDataConnectQueryOptions, UseDataConnectMutationResult, useDataConnectMutationOptions} from '@tanstack-query-firebase/react/data-connect';\nimport { UseQueryResult, UseMutationResult} from '@tanstack/react-query';\nimport { DataConnect } from 'firebase/data-connect';\nimport { FirebaseError } from 'firebase/app';\n\n\nexport function useCreateUser(options?: useDataConnectMutationOptions<CreateUserData, FirebaseError, void>): UseDataConnectMutationResult<CreateUserData, undefined>;\nexport function useCreateUser(dc: DataConnect, options?: useDataConnectMutationOptions<CreateUserData, FirebaseError, void>): UseDataConnectMutationResult<CreateUserData, undefined>;\n\nexport function useListSurveys(options?: useDataConnectQueryOptions<ListSurveysData>): UseDataConnectQueryResult<ListSurveysData, undefined>;\nexport function useListSurveys(dc: DataConnect, options?: useDataConnectQueryOptions<ListSurveysData>): UseDataConnectQueryResult<ListSurveysData, undefined>;\n\nexport function useUpdateSurveyStatus(options?: useDataConnectMutationOptions<UpdateSurveyStatusData, FirebaseError, void>): UseDataConnectMutationResult<UpdateSurveyStatusData, undefined>;\nexport function useUpdateSurveyStatus(dc: DataConnect, options?: useDataConnectMutationOptions<UpdateSurveyStatusData, FirebaseError, void>): UseDataConnectMutationResult<UpdateSurveyStatusData, undefined>;\n\nexport function useGetSurvey(options?: useDataConnectQueryOptions<GetSurveyData>): UseDataConnectQueryResult<GetSurveyData, undefined>;\nexport function useGetSurvey(dc: DataConnect, options?: useDataConnectQueryOptions<GetSurveyData>): UseDataConnectQueryResult<GetSurveyData, undefined>;\n","size_bytes":1785},"my-app/src/components/providers/mobile-provider.tsx":{"content":"\n'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\n// Use a more generic name for the hook\nfunction useMediaQuery(query: string) {\n  const [matches, setMatches] = useState(false);\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const listener = () => setMatches(media.matches);\n    window.addEventListener('resize', listener);\n    return () => window.removeEventListener('resize', listener);\n  }, [matches, query]);\n  return matches;\n}\n\ninterface MobileDesignContextType {\n  isMobileDesign: boolean;\n  setIsMobileDesign: (isMobile: boolean) => void;\n  isMobileView: boolean;\n  height: number;\n}\n\nconst MobileDesignContext = createContext<MobileDesignContextType | undefined>(undefined);\n\nexport function MobileProvider({ children }: { children: ReactNode }) {\n  const [isMobileDesign, setMobileDesignState] = useState(true);\n  const isMobile = useMediaQuery('(max-width: 768px)');\n  \n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    const savedMobileDesign = localStorage.getItem('mobile_redesign');\n    const isEnabled = savedMobileDesign !== null ? savedMobileDesign === 'true' : true;\n    \n    setMobileDesignState(isEnabled);\n    document.body.dataset.mobile = isEnabled ? \"true\" : \"false\";\n\n    const setVisualViewportHeight = () => {\n        if (window.visualViewport) {\n            // Use the visualViewport height which correctly accounts for the keyboard\n            setHeight(window.visualViewport.height);\n        } else {\n            // Fallback for older browsers\n            setHeight(window.innerHeight);\n        }\n    };\n\n    // Initial call\n    setVisualViewportHeight();\n\n    // Attach event listeners\n    const visualViewport = window.visualViewport;\n    if (visualViewport) {\n        visualViewport.addEventListener('resize', setVisualViewportHeight);\n        return () => visualViewport.removeEventListener('resize', setVisualViewportHeight);\n    } else {\n        // Fallback for older browsers\n         window.addEventListener('resize', setVisualViewportHeight);\n        return () => window.removeEventListener('resize', setVisualViewportHeight);\n    }\n\n  }, []);\n\n  const setIsMobileDesign = (enabled: boolean) => {\n    setMobileDesignState(enabled);\n    localStorage.setItem('mobile_redesign', String(enabled));\n    document.body.dataset.mobile = enabled ? \"true\" : \"false\";\n  };\n\n  const isMobileView = isMobile && isMobileDesign;\n\n  return (\n    <MobileDesignContext.Provider value={{ isMobileDesign, setIsMobileDesign, isMobileView, height }}>\n      {children}\n    </MobileDesign-context.Provider>\n  );\n}\n\nexport function useMobileDesign() {\n  const context = useContext(MobileDesignContext);\n  if (context === undefined) {\n    throw new Error('useMobileDesign must be used within a MobileProvider');\n  }\n  return context;\n}\n\n\n","size_bytes":2925},"src/app/(auth)/login/page.tsx":{"content":"'use client';\n\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useSignInWithEmailAndPassword, useSignInWithGoogle } from 'react-firebase-hooks/auth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport React, { useState, useEffect } from 'react';\nimport { doc, serverTimestamp, updateDoc, getDoc, setDoc } from 'firebase/firestore';\nimport { GoogleAuthProvider, signInWithPopup, sendPasswordResetEmail } from 'firebase/auth';\n\nimport { auth, db } from '@/lib/firebase';\nimport { registerDeviceSecurely } from '@/utils/device-auth';\nimport { Button } from '@/components/ui/button';\nimport {\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { Toaster } from '@/components/ui/toaster';\nimport { cn } from '@/lib/utils';\nimport { Card } from '@/components/ui/card';\nimport type { User } from '@/lib/types';\n\n\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z\n    .string()\n    .min(6, { message: 'Password must be at least 6 characters.' }),\n});\n\nexport default function LoginPage() {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [signInWithEmailAndPassword, , loading, error] = useSignInWithEmailAndPassword(auth);\n  const [signInWithGoogle, , googleLoading] = useSignInWithGoogle(auth);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\n    console.log('Login attempt for email:', values.email);\n    try {\n      const res = await signInWithEmailAndPassword(values.email, values.password);\n      console.log('Sign in result:', res);\n      \n      if (res) {\n        console.log('User signed in successfully:', res.user.uid);\n        \n        // Ensure user document exists with minimal data (devices handled by secure API)\n        const userDocRef = doc(db, 'users', res.user.uid);\n        const userDoc = await getDoc(userDocRef);\n        \n        if (!userDoc.exists()) {\n          console.log('Creating new user document');\n          // Create minimal user document if it doesn't exist\n          await setDoc(userDocRef, {\n            uid: res.user.uid,\n            email: res.user.email,\n            name: res.user.displayName || values.email.split('@')[0],\n            photoURL: res.user.photoURL || null,\n            status: 'online',\n            about: '',\n            devices: [], // Will be populated by secure device registration\n            background: 'galaxy',\n            useCustomBackground: true,\n            friends: [],\n            friendRequestsSent: [],\n            friendRequestsReceived: [],\n            blockedUsers: [],\n            mutedConversations: [],\n            createdAt: serverTimestamp(),\n            updatedAt: serverTimestamp(),\n          });\n        } else {\n          console.log('Updating existing user status');\n          // Update status for existing user\n          await updateDoc(userDocRef, {\n            status: 'online',\n            updatedAt: serverTimestamp(),\n          });\n        }\n\n        // Register device securely after login\n        try {\n          const deviceResult = await registerDeviceSecurely(res.user);\n          if (!deviceResult.success) {\n            console.warn('Device registration failed:', deviceResult.error);\n            // Continue anyway - device registration failure shouldn't block login\n          }\n        } catch (deviceError) {\n          console.warn('Device registration error (continuing anyway):', deviceError);\n        }\n\n        console.log('Login successful, redirecting to home');\n        router.push('/');\n      }\n    } catch (e: any) {\n        console.error(\"Login submission error:\", e);\n        console.error(\"Error code:\", e.code);\n        console.error(\"Error message:\", e.message);\n        \n        let errorMessage = 'An unexpected error occurred. Please try again.';\n        \n        // Handle specific Firebase auth error codes\n        switch (e.code) {\n          case 'auth/user-not-found':\n            errorMessage = 'No account found with this email address. Please check your email or sign up for a new account.';\n            break;\n          case 'auth/wrong-password':\n            errorMessage = 'Incorrect password. Please check your password and try again.';\n            break;\n          case 'auth/invalid-credential':\n            errorMessage = 'Invalid email or password. Please check your credentials and try again.';\n            break;\n          case 'auth/invalid-email':\n            errorMessage = 'Please enter a valid email address.';\n            break;\n          case 'auth/user-disabled':\n            errorMessage = 'This account has been disabled. Please contact support.';\n            break;\n          case 'auth/too-many-requests':\n            errorMessage = 'Too many failed login attempts. Please try again later or reset your password.';\n            break;\n          case 'auth/network-request-failed':\n            errorMessage = 'Network error. Please check your internet connection and try again.';\n            break;\n          default:\n            if (e.message) {\n              errorMessage = e.message;\n            }\n        }\n        \n        toast({\n            title: 'Login Failed',\n            description: errorMessage,\n            variant: 'destructive',\n        });\n    }\n  };\n\n  const handleForgotPassword = async () => {\n    const email = form.getValues('email');\n    if (!email) {\n      toast({\n        title: 'Email required',\n        description: 'Please enter your email address first.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    try {\n      // Get the current domain for the reset URL\n      const currentDomain = typeof window !== 'undefined' ? window.location.origin : \n        process.env.REPLIT_DOMAINS ? `https://${process.env.REPLIT_DOMAINS}` :\n        'https://2b711deb-9881-4c8e-9864-f2078ec28923-00-1z7caopfvm8sp.picard.replit.dev';\n      \n      // Configure action code settings for the password reset email\n      const actionCodeSettings = {\n        url: `${currentDomain}/reset-password`,\n        handleCodeInApp: false, // We want to handle the reset in the web app, not mobile\n      };\n\n      // Use Firebase's built-in sendPasswordResetEmail method\n      await sendPasswordResetEmail(auth, email, actionCodeSettings);\n      \n      toast({\n        title: 'Password reset email sent',\n        description: 'Check your email for a link to reset your password. If you don\\'t see it, check your spam folder.',\n      });\n    } catch (error: any) {\n      console.error('Password reset error:', error);\n      \n      let errorMessage = 'Failed to send password reset email. Please try again.';\n      \n      // Handle specific Firebase auth error codes\n      switch (error.code) {\n        case 'auth/user-not-found':\n          errorMessage = 'No account found with this email address. Please check your email or create a new account.';\n          break;\n        case 'auth/invalid-email':\n          errorMessage = 'Please enter a valid email address.';\n          break;\n        case 'auth/too-many-requests':\n          errorMessage = 'Too many reset requests. Please wait a few minutes before trying again.';\n          break;\n        case 'auth/network-request-failed':\n          errorMessage = 'Network error. Please check your connection and try again.';\n          break;\n        default:\n          if (error.message) {\n            errorMessage = error.message;\n          }\n      }\n      \n      toast({\n        title: 'Error sending reset email',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      // Configure provider with proper settings\n      const provider = new GoogleAuthProvider();\n      provider.addScope('email');\n      provider.addScope('profile');\n      provider.setCustomParameters({\n        prompt: 'select_account'\n      });\n      \n      console.log('Starting Google sign-in...');\n      const res = await signInWithPopup(auth, provider);\n      console.log('Google sign-in result:', res);\n      if (res) {\n        // Ensure user document exists with minimal data (devices handled by secure API)\n        const userDocRef = doc(db, 'users', res.user.uid);\n        const userDoc = await getDoc(userDocRef);\n        \n        if (!userDoc.exists()) {\n          // Create minimal user document for Google user\n          await setDoc(userDocRef, {\n            uid: res.user.uid,\n            email: res.user.email,\n            name: res.user.displayName || (res.user.email ? res.user.email.split('@')[0] : 'New User'),\n            photoURL: res.user.photoURL || null,\n            status: 'online',\n            about: '',\n            devices: [], // Will be populated by secure device registration\n            background: 'galaxy',\n            useCustomBackground: true,\n            friends: [],\n            friendRequestsSent: [],\n            friendRequestsReceived: [],\n            blockedUsers: [],\n            mutedConversations: [],\n            emailVerified: true, // Google accounts are pre-verified\n            createdAt: serverTimestamp(),\n            updatedAt: serverTimestamp(),\n          });\n        } else {\n          // Update status for existing user\n          await updateDoc(userDocRef, {\n            status: 'online',\n            updatedAt: serverTimestamp(),\n          });\n        }\n\n        // Register device securely after Google login\n        const deviceResult = await registerDeviceSecurely(res.user);\n        if (!deviceResult.success) {\n          console.warn('Device registration failed:', deviceResult.error);\n          // Continue anyway - device registration failure shouldn't block login\n        }\n\n        router.push('/');\n      }\n    } catch (e: any) {\n        console.error(\"Google Sign-In error:\", e);\n        let errorMessage = 'An unexpected error occurred. Please try again.';\n        if (e.code === 'auth/popup-closed-by-user') {\n            errorMessage = 'Google sign-in was cancelled.';\n        } else if (e.message) {\n            errorMessage = e.message;\n        }\n        toast({\n            title: 'Error signing in with Google',\n            description: errorMessage,\n            variant: 'destructive',\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      console.error('Firebase auth hook error:', error);\n      // Error handling is now done in onSubmit for better control\n    }\n  }, [error]);\n\n\n  return (\n    <>\n      <Toaster />\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <Card className=\"bg-transparent border-0 shadow-none\">\n            <CardHeader className=\"space-y-1 text-center\">\n              <CardTitle className=\"text-2xl\">Welcome Back</CardTitle>\n              <CardDescription>\n                Enter your email below to log in to your account\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid gap-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem className=\"grid gap-2\">\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"m@example.com\"\n                        {...field}\n                        disabled={loading || googleLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem className=\"grid gap-2\">\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" {...field} disabled={loading || googleLoading} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button className=\"w-full\" type=\"submit\" disabled={loading || googleLoading}>\n                {loading ? 'Logging in...' : 'Login'}\n              </Button>\n\n              <div className=\"text-center\">\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"text-sm text-muted-foreground hover:text-primary\"\n                  onClick={() => handleForgotPassword()}\n                  disabled={loading || googleLoading}\n                >\n                  Forgot your password?\n                </Button>\n              </div>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    Or continue with\n                  </span>\n                </div>\n              </div>\n\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={handleGoogleSignIn}\n                disabled={loading || googleLoading}\n              >\n                {googleLoading ? (\n                  'Signing in...'\n                ) : (\n                  <>\n                    <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                      />\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                      />\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                      />\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                      />\n                    </svg>\n                    Continue with Google\n                  </>\n                )}\n              </Button>\n\n              <div className=\"text-center text-sm text-muted-foreground\">\n                Don't have an account?{' '}\n                <Link\n                  href=\"/signup\"\n                  className={cn(\n                    \"font-medium text-primary underline-offset-4 hover:underline\",\n                    (loading || googleLoading) && \"pointer-events-none opacity-50\"\n                  )}\n                  aria-disabled={loading || googleLoading}\n                  tabIndex={(loading || googleLoading) ? -1 : undefined}\n                >\n                  Sign up\n                </Link>\n              </div>\n            </CardFooter>\n          </Card>\n        </form>\n      </Form>\n    </>\n  );\n}","size_bytes":15955},"src/app/(auth)/signup/page.tsx":{"content":"\n'use client';\n\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useCreateUserWithEmailAndPassword, useUpdateProfile, useSignInWithGoogle } from 'react-firebase-hooks/auth';\nimport { doc, setDoc, serverTimestamp, collection, updateDoc, getDoc } from 'firebase/firestore';\nimport { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { auth, db } from '@/lib/firebase';\nimport { sendVerificationEmail, verifyEmailCode } from '@/utils/replitmail';\nimport { registerDeviceSecurely } from '@/utils/device-auth';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { Toaster } from '@/components/ui/toaster';\n\nconst formSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z\n    .string()\n    .min(6, { message: 'Password must be at least 6 characters.' }),\n});\n\n\nexport default function SignupPage() {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [createUserWithEmailAndPassword, , loading] =\n    useCreateUserWithEmailAndPassword(auth);\n  const [updateProfile] = useUpdateProfile(auth);\n  const [signInWithGoogle, , googleLoading] = useSignInWithGoogle(auth);\n  \n  // Email verification states\n  const [showVerification, setShowVerification] = useState(false);\n  const [verificationCode, setVerificationCode] = useState('');\n  const [verificationEmail, setVerificationEmail] = useState('');\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isSendingCode, setIsSendingCode] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n  });\n\n\n  const handleSendVerificationCode = async (email: string) => {\n    setIsSendingCode(true);\n    try {\n      const success = await sendVerificationEmail(email);\n      if (success) {\n        setVerificationEmail(email);\n        setShowVerification(true);\n        \n        toast({\n          title: 'Verification code sent',\n          description: 'Please check your email for the verification code.',\n        });\n      } else {\n        // Show success message even if email fails (simulated send)\n        toast({\n          title: 'Verification code sent',\n          description: 'Please check your email for the verification code.',\n        });\n        setVerificationEmail(email);\n        setShowVerification(true);\n      }\n    } catch (error) {\n      console.error('Error sending verification code:', error);\n      // Show success message for development\n      toast({\n        title: 'Verification code sent',\n        description: 'Please check your email for the verification code.',\n      });\n      setVerificationEmail(email);\n      setShowVerification(true);\n    } finally {\n      setIsSendingCode(false);\n    }\n  };\n\n  const handleVerifyCode = async () => {\n    if (!verificationCode.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter the verification code.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsVerifying(true);\n    try {\n      const isValid = await verifyEmailCode(verificationEmail, verificationCode);\n      if (isValid) {\n        // Code is valid, proceed with account creation\n        const formData = form.getValues();\n        await createAccountAfterVerification(formData);\n      } else {\n        toast({\n          title: 'Invalid code',\n          description: 'The verification code is incorrect or has expired. Please try again.',\n          variant: 'destructive',\n        });\n        setIsVerifying(false);\n      }\n    } catch (error) {\n      console.error('Error verifying code:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to verify code. Please try again.',\n        variant: 'destructive',\n      });\n      setIsVerifying(false);\n    }\n  };\n\n  const createAccountAfterVerification = async (values: z.infer<typeof formSchema>) => {\n    try {\n      const res = await createUserWithEmailAndPassword(verificationEmail, values.password);\n      if (res) {\n        await updateProfile(res.user, { displayName: values.name });\n        \n        // Create user document first (without devices - handled securely by device API)\n        const userDocRef = doc(db, 'users', res.user.uid);\n        await setDoc(userDocRef, {\n          uid: res.user.uid,\n          name: values.name,\n          email: verificationEmail,\n          photoURL: null,\n          status: 'online',\n          about: '',\n          devices: [], // Will be populated by secure device registration\n          background: 'galaxy',\n          useCustomBackground: true,\n          friends: [],\n          friendRequestsSent: [],\n          friendRequestsReceived: [],\n          blockedUsers: [],\n          mutedConversations: [],\n          emailVerified: true,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        });\n\n        // Register device securely after user creation\n        const deviceResult = await registerDeviceSecurely(res.user);\n        if (!deviceResult.success) {\n          console.warn('Device registration failed:', deviceResult.error);\n          // Continue anyway - device registration failure shouldn't block login\n        }\n\n        toast({\n          title: 'Account created successfully!',\n          description: 'Welcome to Vibez. You are now logged in.',\n        });\n\n        router.push('/');\n      }\n    } catch (error: any) {\n      console.error('Error creating account:', error);\n      let errorMessage = 'Failed to create account. Please try again.';\n      if (error.code === 'auth/email-already-in-use') {\n        errorMessage = 'An account with this email already exists.';\n      } else if (error.code === 'auth/weak-password') {\n        errorMessage = 'Password is too weak. Please choose a stronger password.';\n      }\n      toast({\n        title: 'Error',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const handleGoogleSignup = async () => {\n    try {\n      // Configure provider with proper settings\n      const provider = new GoogleAuthProvider();\n      provider.addScope('email');\n      provider.addScope('profile');\n      provider.setCustomParameters({\n        prompt: 'select_account'\n      });\n      \n      console.log('Starting Google signup...');\n      const result = await signInWithPopup(auth, provider);\n      console.log('Google signup result:', result);\n      \n      if (result?.user) {\n        const userDocRef = doc(db, 'users', result.user.uid);\n        const userDoc = await getDoc(userDocRef);\n\n        if (!userDoc.exists()) {\n          // Create user document for new Google user (without devices - handled by secure API)\n          await setDoc(userDocRef, {\n            uid: result.user.uid,\n            name: result.user.displayName || 'Google User',\n            email: result.user.email,\n            photoURL: result.user.photoURL,\n            status: 'online',\n            about: '',\n            devices: [], // Will be populated by secure device registration\n            background: 'galaxy',\n            useCustomBackground: true,\n            friends: [],\n            friendRequestsSent: [],\n            friendRequestsReceived: [],\n            blockedUsers: [],\n            mutedConversations: [],\n            emailVerified: true, // Google accounts are pre-verified\n            createdAt: serverTimestamp(),\n            updatedAt: serverTimestamp(),\n          });\n        }\n\n        // Register device securely for both new and existing users\n        const deviceResult = await registerDeviceSecurely(result.user);\n        if (!deviceResult.success) {\n          console.warn('Device registration failed:', deviceResult.error);\n          // Continue anyway - device registration failure shouldn't block login\n        }\n\n        toast({\n          title: 'Welcome!',\n          description: 'Successfully signed up with Google.',\n        });\n        \n        router.push('/');\n      }\n    } catch (error: any) {\n      console.error(\"Google signup error:\", error);\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to sign up with Google.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\n    try {\n      // Step 1: Send verification code first, before creating account\n      await handleSendVerificationCode(values.email);\n    } catch (error: any) {\n      console.error('Error in signup:', error);\n      let errorMessage = 'Failed to send verification code. Please try again.';\n      if (error.code === 'auth/email-already-in-use') {\n        errorMessage = 'An account with this email already exists.';\n      } else if (error.code === 'auth/invalid-email') {\n        errorMessage = 'Please enter a valid email address.';\n      }\n      toast({\n        title: 'Error',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (showVerification) {\n    return (\n      <>\n        <Toaster />\n        <Card className=\"bg-transparent border-0 shadow-none\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <CardTitle className=\"text-2xl\">Verify Your Email</CardTitle>\n            <CardDescription>\n              We sent a 6-digit code to {verificationEmail}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"grid gap-4\">\n            <div className=\"grid gap-2\">\n              <label htmlFor=\"verification-code\" className=\"text-sm font-medium\">\n                Verification Code\n              </label>\n              <Input\n                id=\"verification-code\"\n                type=\"text\"\n                placeholder=\"000000\"\n                value={verificationCode}\n                onChange={(e) => setVerificationCode(e.target.value)}\n                disabled={isVerifying}\n                maxLength={6}\n                className=\"text-center text-lg tracking-widest\"\n              />\n            </div>\n            \n            <Button \n              onClick={handleVerifyCode} \n              disabled={isVerifying || !verificationCode.trim()}\n              className=\"w-full\"\n            >\n              {isVerifying ? 'Verifying...' : 'Verify Email'}\n            </Button>\n\n            <div className=\"text-center space-y-2\">\n              <Button\n                type=\"button\"\n                variant=\"link\"\n                onClick={() => handleSendVerificationCode(verificationEmail)}\n                disabled={isVerifying}\n                className=\"text-sm\"\n              >\n                Resend Code\n              </Button>\n              <p className=\"text-xs text-muted-foreground\">\n                Didn't receive the code? Check your spam folder.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <Button\n                type=\"button\"\n                variant=\"link\"\n                onClick={() => setShowVerification(false)}\n                disabled={isVerifying}\n                className=\"text-sm\"\n              >\n                ← Back to signup\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Toaster />\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <Card className=\"bg-transparent border-0 shadow-none\">\n            <CardHeader className=\"space-y-1 text-center\">\n              <CardTitle className=\"text-2xl\">Create an account</CardTitle>\n              <CardDescription>\n                Enter your information to create an account\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem className=\"grid gap-2\">\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Your Name\" {...field} disabled={loading || isSendingCode} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem className=\"grid gap-2\">\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"m@example.com\"\n                        {...field}\n                        disabled={loading || isSendingCode}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem className=\"grid gap-2\">\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" {...field} disabled={loading || isSendingCode}/>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button className=\"w-full\" type=\"submit\" disabled={loading || googleLoading || isSendingCode}>\n                {isSendingCode ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                    Sending verification...\n                  </div>\n                ) : loading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                    Creating account...\n                  </div>\n                ) : (\n                  'Create account'\n                )}\n              </Button>\n              \n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    Or continue with\n                  </span>\n                </div>\n              </div>\n\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={handleGoogleSignup}\n                disabled={loading || googleLoading || isSendingCode}\n              >\n                {googleLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                    Signing up...\n                  </div>\n                ) : (\n                  <>\n                    <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                      />\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                      />\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                      />\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                      />\n                    </svg>\n                    Continue with Google\n                  </>\n                )}\n              </Button>\n              \n              <div className=\"text-center text-sm text-muted-foreground\">\n                Already have an account?{' '}\n                <Link\n                  href=\"/login\"\n                  className={cn(\n                    \"font-medium text-primary underline-offset-4 hover:underline\",\n                    (loading || googleLoading || isSendingCode) && \"pointer-events-none opacity-50\"\n                  )}\n                  aria-disabled={loading || googleLoading || isSendingCode}\n                  tabIndex={(loading || googleLoading || isSendingCode) ? -1 : undefined}\n                >\n                  Login\n                </Link>\n              </div>\n            </CardFooter>\n          </Card>\n        </form>\n      </Form>\n    </>\n  );\n}\n","size_bytes":17960},"src/app/settings/account/page.tsx":{"content":"\n'use client';\n\nimport { useAuth } from '@/hooks/use-auth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { motion } from 'framer-motion';\nimport { sendPasswordResetEmail, deleteUser } from 'firebase/auth';\nimport { auth, db } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { doc, getDoc, collection, getDocs, query, where, writeBatch, runTransaction, addDoc, serverTimestamp } from 'firebase/firestore';\nimport React, { useState, useRef } from 'react';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Loader2 } from 'lucide-react';\nimport type { Conversation, Message, User } from '@/lib/types';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nfunction AccountSkeleton() {\n  return (\n    <div className=\"space-y-8 animate-fade-in\">\n      <div>\n        <Skeleton className=\"h-9 w-48\" />\n        <Skeleton className=\"h-5 w-72 mt-2\" />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <Skeleton className=\"h-7 w-40\" />\n          <Skeleton className=\"h-4 w-full max-w-md mt-2\" />\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-5 w-24\" />\n            <Skeleton className=\"h-10 w-full\" />\n          </div>\n          <div className=\"flex justify-end\">\n            <Skeleton className=\"h-10 w-36\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n           <Skeleton className=\"h-7 w-48\" />\n           <Skeleton className=\"h-4 w-full max-w-lg mt-2\" />\n        </CardHeader>\n        <CardContent className=\"flex gap-2\">\n             <Skeleton className=\"h-10 w-40\" />\n             <Skeleton className=\"h-10 w-40\" />\n        </CardContent>\n      </Card>\n\n       <Card className=\"border-destructive\">\n        <CardHeader>\n            <Skeleton className=\"h-7 w-48\" />\n            <Skeleton className=\"h-4 w-full max-w-lg mt-2\" />\n        </CardHeader>\n        <CardContent>\n            <Skeleton className=\"h-10 w-40\" />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function AccountPage() {\n    const { user, loading } = useAuth();\n    const { toast } = useToast();\n    const [isProcessing, setIsProcessing] = useState(false);\n    const importInputRef = useRef<HTMLInputElement>(null);\n\n    const handlePasswordChange = async () => {\n        if (!user || !user.email) {\n            toast({ title: \"Error\", description: \"Could not find user email.\", variant: \"destructive\"});\n            return;\n        };\n        setIsProcessing(true);\n        try {\n            await sendPasswordResetEmail(auth, user.email);\n            toast({ title: \"Success\", description: \"A password reset link has been sent to your email.\"});\n        } catch (error: any) {\n            console.error(\"Password reset error:\", error);\n            toast({ title: \"Error\", description: error.message || \"Failed to send password reset email.\", variant: \"destructive\"});\n        } finally {\n            setIsProcessing(false);\n        }\n    }\n\n    const handleExportData = async () => {\n        if (!user) return;\n        setIsProcessing(true);\n        try {\n            const userDocRef = doc(db, 'users', user.uid);\n            const userDoc = await getDoc(userDocRef);\n            const userData = userDoc.data();\n\n            const convosQuery = query(collection(db, 'conversations'), where('participants', 'array-contains', user.uid));\n            const convosSnapshot = await getDocs(convosQuery);\n            \n            const conversationsData = await Promise.all(\n                convosSnapshot.docs.map(async (convoDoc) => {\n                    const messagesQuery = query(collection(convoDoc.ref, 'messages'));\n                    const messagesSnapshot = await getDocs(messagesQuery);\n                    const messages = messagesSnapshot.docs.map(msgDoc => msgDoc.data());\n                    return { ...convoDoc.data(), messages };\n                })\n            );\n\n            const exportData = {\n                user: userData,\n                conversations: conversationsData,\n            };\n\n            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `vibez_export_${user.uid}.json`;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            \n            toast({ title: \"Success\", description: \"Your data has been exported.\" });\n\n        } catch (error: any) {\n            console.error(\"Data export error:\", error);\n            toast({ title: \"Error\", description: \"Failed to export data.\", variant: \"destructive\"});\n        } finally {\n            setIsProcessing(false);\n        }\n    }\n    \n    const handleImportData = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!user) {\n            toast({ title: 'Error', description: 'You must be logged in to import data.', variant: 'destructive' });\n            return;\n        }\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        setIsProcessing(true);\n        try {\n            const fileContent = await file.text();\n            const data = JSON.parse(fileContent);\n\n            if (!data.conversations || !Array.isArray(data.conversations)) {\n                throw new Error(\"Invalid import file: Missing 'conversations' array.\");\n            }\n\n            const oldUserId = data.user?.uid;\n            if (!oldUserId) {\n                throw new Error(\"Invalid import file: Missing original user UID.\");\n            }\n\n            for (const convo of data.conversations as (Omit<Conversation, 'id'> & { messages: Message[] })[]) {\n                const newParticipants = convo.participants.map(p => p === oldUserId ? user.uid : p);\n\n                const newConvoData = {\n                    type: convo.type,\n                    participants: newParticipants,\n                    name: convo.name,\n                    avatar: convo.avatar,\n                    description: convo.description,\n                    createdBy: convo.createdBy === oldUserId ? user.uid : convo.createdBy,\n                    createdAt: serverTimestamp(),\n                    lastMessage: null,\n                    lastRead: {},\n                };\n\n                const newConvoRef = await addDoc(collection(db, 'conversations'), newConvoData);\n\n                const messagesBatch = writeBatch(db);\n                if (convo.messages && convo.messages.length > 0) {\n                    let lastMessage: Message | null = null;\n                    convo.messages.forEach(msg => {\n                        const messageDocRef = doc(collection(db, 'conversations', newConvoRef.id, 'messages'));\n                        \n                        const newMsg = { ...msg };\n                        if (newMsg.senderId === oldUserId) {\n                            newMsg.senderId = user.uid;\n                        }\n                        // Timestamps need to be converted back to Firestore Timestamps if they are strings\n                        if (typeof newMsg.timestamp === 'object' && newMsg.timestamp.seconds) {\n                            newMsg.timestamp = new Date(newMsg.timestamp.seconds * 1000);\n                        } else {\n                            newMsg.timestamp = new Date(); // fallback\n                        }\n\n                        messagesBatch.set(messageDocRef, newMsg);\n                        if (!lastMessage || newMsg.timestamp > (lastMessage.timestamp as Date)) {\n                            lastMessage = newMsg;\n                        }\n                    });\n\n                    if (lastMessage) {\n                        await updateDoc(newConvoRef, {\n                            lastMessage: {\n                                text: lastMessage.text,\n                                senderId: lastMessage.senderId,\n                                timestamp: lastMessage.timestamp,\n                            }\n                        });\n                    }\n\n                    await messagesBatch.commit();\n                }\n            }\n            toast({ title: 'Import Complete', description: 'Your conversations have been restored.' });\n        } catch (error: any) {\n            console.error(\"Data import error:\", error);\n            toast({ title: \"Import Failed\", description: error.message || \"Could not import data. Please check the file and try again.\", variant: \"destructive\" });\n        } finally {\n            setIsProcessing(false);\n            if (importInputRef.current) {\n                importInputRef.current.value = '';\n            }\n        }\n    };\n\n\n    const handleDeleteAccount = async () => {\n        if (!user) return;\n        setIsProcessing(true);\n        try {\n            const batch = writeBatch(db);\n            const userDocRef = doc(db, 'users', user.uid);\n            batch.delete(userDocRef);\n            \n            await batch.commit();\n\n            await deleteUser(user);\n            \n            toast({ title: \"Account Deleted\", description: \"Your account has been permanently deleted.\" });\n        } catch (error: any) {\n            console.error(\"Account deletion error:\", error);\n            if(error.code === 'auth/requires-recent-login') {\n                 toast({ title: \"Action Required\", description: \"This is a sensitive action. Please log out and log back in before deleting your account.\", variant: \"destructive\", duration: 7000});\n            } else {\n                toast({ title: \"Error\", description: error.message || \"Failed to delete account.\", variant: \"destructive\"});\n            }\n        } finally {\n            setIsProcessing(false);\n        }\n    }\n\n\n    if (loading || !user) {\n        return <AccountSkeleton />;\n    }\n\n    return (\n        <motion.div \n          className=\"space-y-8\"\n          initial=\"initial\"\n          animate=\"animate\"\n          variants={{\n            animate: {\n              transition: {\n                staggerChildren: 0.1,\n              },\n            },\n          }}\n        >\n            <motion.header variants={cardVariants}>\n                <h1 className=\"text-3xl font-bold font-heading\">Account</h1>\n                <p className=\"text-muted-foreground mt-1\">Manage your account settings and data.</p>\n            </motion.header>\n\n             <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Security</CardTitle>\n                        <CardDescription>\n                            Change your password and manage your account security.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        <div>\n                            <h3 className=\"font-medium\">Password</h3>\n                            <p className=\"text-sm text-muted-foreground\">Click the button to receive a password reset link in your email.</p>\n                        </div>\n                        <div className=\"flex justify-end\">\n                            <Button asChild onClick={handlePasswordChange} disabled={isProcessing}>\n                                <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                    {isProcessing ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : null}\n                                    Change Password\n                                </motion.button>\n                            </Button>\n                        </div>\n                    </CardContent>\n                </Card>\n            </motion.div>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Manage Data</CardTitle>\n                        <CardDescription>\n                            Export or import your account data. This allows you to take your information with you.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        <p className=\"text-sm text-muted-foreground\">Export all your personal data as a JSON file, or import data from a previous export.</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                            <Button variant=\"secondary\" asChild onClick={handleExportData} disabled={isProcessing}>\n                                 <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                     {isProcessing ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : null}\n                                     Export My Data\n                                 </motion.button>\n                            </Button>\n                            <input type=\"file\" accept=\".json\" ref={importInputRef} onChange={handleImportData} className=\"hidden\" />\n                            <Button variant=\"secondary\" asChild onClick={() => importInputRef.current?.click()} disabled={isProcessing}>\n                                 <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                     {isProcessing ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : null}\n                                     Import Data\n                                 </motion.button>\n                            </Button>\n                        </div>\n                    </CardContent>\n                </Card>\n            </motion.div>\n\n            <motion.div variants={cardVariants}>\n                <Card className=\"border-destructive\">\n                    <CardHeader>\n                        <CardTitle className=\"text-destructive\">Delete Account</CardTitle>\n                        <CardDescription>\n                            Permanently delete your account and all of your content. This action is not reversible.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                                <Button variant=\"destructive\" asChild disabled={isProcessing}>\n                                    <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                        {isProcessing ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : null}\n                                        Delete My Account\n                                    </motion.button>\n                                </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                                <AlertDialogHeader>\n                                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                        This action cannot be undone. This will permanently delete your account and remove your data from our servers.\n                                    </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction onClick={handleDeleteAccount} className=\"bg-destructive hover:bg-destructive/90\">\n                                        Delete\n                                    </AlertDialogAction>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                        </AlertDialog>\n                    </CardContent>\n                </Card>\n            </motion.div>\n        </motion.div>\n    );\n}\n","size_bytes":16365},"src/app/settings/appearance/page.tsx":{"content":"\n'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Sun, Moon, Plus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport Image from 'next/image';\nimport { useTheme } from 'next-themes';\nimport React, { useRef } from 'react';\nimport { useAppearance } from '@/components/providers/appearance-provider';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { useMobileDesign } from '@/components/providers/mobile-provider';\nimport { motion } from 'framer-motion';\nimport { Slider } from '@/components/ui/slider';\nimport useGlassTheme from '@/components/settings/hooks/useGlassTheme';\n\nconst themes = [\n    { name: 'Light', value: 'light', icon: Sun },\n    { name: 'Dark', value: 'dark', icon: Moon },\n]\n\nconst accentColors = [\n    { name: 'Default', value: '283 51% 53%' },\n    { name: 'Teal', value: '175 70% 40%' },\n    { name: 'Blue', value: '210 90% 55%' },\n    { name: 'Green', value: '145 65% 45%' },\n    { name: 'Orange', value: '25 95% 55%' },\n    { name: 'Pink', value: '330 85% 60%' },\n]\n\nconst defaultChatBackgrounds = [\n  { id: 'default', url: 'https://picsum.photos/seed/bg-default/600/1000', hint: 'abstract pattern' },\n  { id: 'bg1', url: 'https://picsum.photos/seed/bg1/600/1000', hint: 'abstract pattern' },\n  { id: 'bg2', url: 'https://picsum.photos/seed/bg2/600/1000', hint: 'mountain landscape' },\n  { id: 'bg3', url: 'https://picsum.photos/seed/bg3/600/1000', hint: 'minimalist texture' },\n  { id: 'bg4', url: 'https://picsum.photos/seed/bg4/600/1000', hint: 'forest path' },\n];\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nexport default function AppearancePage() {\n    const { theme, setTheme } = useTheme();\n    const { \n        accentColor, setAccentColor,\n        gradientFrom, setGradientFrom,\n        gradientTo, setGradientTo, \n        chatBackground, setChatBackground, \n        isAmoled, setIsAmoled,\n        chatListOpacity, setChatListOpacity\n    } = useAppearance();\n    const { blurStrength, setBlurStrength, isGlassEnabled, setIsGlassEnabled, isMounted } = useGlassTheme();\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const { isMobileDesign, setIsMobileDesign } = useMobileDesign();\n\n    const handleCustomBgUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                if (e.target?.result) {\n                    setChatBackground(e.target.result as string);\n                }\n            };\n            reader.readAsDataURL(file);\n        }\n    };\n\n\n    return (\n        <motion.div \n            className=\"space-y-8\"\n            initial=\"initial\"\n            animate=\"animate\"\n            variants={{\n                animate: {\n                transition: {\n                    staggerChildren: 0.1,\n                },\n                },\n            }}\n        >\n             <motion.header variants={cardVariants}>\n                <h1 className=\"text-3xl font-bold font-heading\">Appearance</h1>\n                <p className=\"text-muted-foreground mt-1\">Customize the look and feel of your app.</p>\n            </motion.header>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>App Theme</CardTitle>\n                        <CardDescription>Select a theme for the entire application.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    {themes.map((t) => (\n                            <motion.div key={t.value} whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                                <Button \n                                    variant=\"outline\" \n                                    onClick={() => setTheme(t.value)}\n                                    className={cn(\n                                        \"w-full h-28 flex flex-col gap-2 items-center justify-center text-lg transition-colors\",\n                                        theme === t.value && \"border-primary ring-2 ring-primary bg-primary/10\"\n                                    )}\n                                >\n                                    <t.icon className=\"h-6 w-6\"/>\n                                    <span>{t.name}</span>\n                                </Button>\n                            </motion.div>\n                    ))}\n                    </CardContent>\n                    {theme === 'dark' && (\n                        <CardContent>\n                            <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                                <Label htmlFor=\"amoled-mode\" className=\"flex flex-col space-y-1\">\n                                    <span>AMOLED Black</span>\n                                    <span className=\"font-normal leading-snug text-muted-foreground\">\n                                    Use a true black background for OLED screens.\n                                    </span>\n                                </Label>\n                                <Switch id=\"amoled-mode\" checked={isAmoled} onCheckedChange={setIsAmoled} />\n                            </div>\n                        </CardContent>\n                    )}\n                </Card>\n            </motion.div>\n\n            {isMounted && (\n              <motion.div variants={cardVariants}>\n                  <Card>\n                      <CardHeader>\n                          <CardTitle>Glass UI</CardTitle>\n                          <CardDescription>Configure the frosted glass effect for UI cards.</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                          <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                              <Label htmlFor=\"glass-enabled\" className=\"flex flex-col space-y-1\">\n                                  <span>Enable Glass Effect</span>\n                                  <span className=\"font-normal leading-snug text-muted-foreground\">\n                                      Toggles the frosted glass background on cards.\n                                  </span>\n                              </Label>\n                              <Switch id=\"glass-enabled\" checked={isGlassEnabled} onCheckedChange={setIsGlassEnabled} />\n                          </div>\n                          {isGlassEnabled && (\n                              <div className=\"space-y-2\">\n                                  <Label htmlFor=\"blur-strength\">Blur Strength ({blurStrength}px)</Label>\n                                  <Slider\n                                      id=\"blur-strength\"\n                                      value={[blurStrength]}\n                                      onValueChange={(value) => setBlurStrength(value[0])}\n                                      max={20}\n                                      step={1}\n                                  />\n                              </div>\n                          )}\n                      </CardContent>\n                  </Card>\n              </motion.div>\n            )}\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Mobile Redesign (Beta)</CardTitle>\n                        <CardDescription>\n                            Enable the new experimental mobile-optimized layout.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                            <Label htmlFor=\"mobile-redesign-mode\" className=\"flex flex-col space-y-1\">\n                                <span>Enable Mobile Redesign</span>\n                                <span className=\"font-normal leading-snug text-muted-foreground\">\n                                    Experience the new compact layout on mobile devices.\n                                </span>\n                            </Label>\n                            <Switch id=\"mobile-redesign-mode\" checked={isMobileDesign} onCheckedChange={setIsMobileDesign} />\n                        </div>\n                    </CardContent>\n                </Card>\n            </motion.div>\n            \n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Accent Color</CardTitle>\n                        <CardDescription>Pick an accent color for buttons, highlights, and more.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"flex flex-wrap gap-4\">\n                    {accentColors.map((color) => (\n                        <motion.div key={color.name} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>\n                            <Button\n                                size=\"icon\"\n                                onClick={() => setAccentColor(color.value)}\n                                className={cn(\n                                    \"rounded-full h-10 w-10 transition-shadow\",\n                                    accentColor === color.value && \"ring-2 ring-offset-2 ring-primary ring-offset-background\"\n                                )}\n                                style={{ backgroundColor: `hsl(${color.value})` }}\n                            >\n                                <span className=\"sr-only\">{color.name}</span>\n                            </Button>\n                        </motion.div>\n                    ))}\n                    </CardContent>\n                </Card>\n            </motion.div>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Gradient Colors</CardTitle>\n                        <CardDescription>Customize the gradient for your chat bubbles.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        <div>\n                            <Label>From</Label>\n                            <div className=\"flex flex-wrap gap-4 mt-2\">\n                                {accentColors.map((color) => (\n                                    <motion.div key={color.name} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>\n                                        <Button\n                                            size=\"icon\"\n                                            onClick={() => setGradientFrom(color.value)}\n                                            className={cn(\n                                                \"rounded-full h-8 w-8 transition-shadow\",\n                                                gradientFrom === color.value && \"ring-2 ring-offset-2 ring-primary ring-offset-background\"\n                                            )}\n                                            style={{ backgroundColor: `hsl(${color.value})` }}\n                                        >\n                                            <span className=\"sr-only\">{color.name}</span>\n                                        </Button>\n                                    </motion.div>\n                                ))}\n                            </div>\n                        </div>\n                         <div>\n                            <Label>To</Label>\n                             <div className=\"flex flex-wrap gap-4 mt-2\">\n                                {accentColors.map((color) => (\n                                    <motion.div key={color.name} whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>\n                                        <Button\n                                            size=\"icon\"\n                                            onClick={() => setGradientTo(color.value)}\n                                            className={cn(\n                                                \"rounded-full h-8 w-8 transition-shadow\",\n                                                gradientTo === color.value && \"ring-2 ring-offset-2 ring-primary ring-offset-background\"\n                                            )}\n                                            style={{ backgroundColor: `hsl(${color.value})` }}\n                                        >\n                                            <span className=\"sr-only\">{color.name}</span>\n                                        </Button>\n                                    </motion.div>\n                                ))}\n                            </div>\n                        </div>\n                    </CardContent>\n                </Card>\n            </motion.div>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Chat List Transparency</CardTitle>\n                        <CardDescription>Adjust the transparency of the chat list sidebar.</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"flex items-center gap-4\">\n                           <span className=\"text-sm font-medium\">Opaque</span>\n                            <Slider\n                                value={[100 - chatListOpacity]}\n                                onValueChange={(value) => setChatListOpacity(100 - value[0])}\n                                max={100}\n                                step={1}\n                            />\n                           <span className=\"text-sm font-medium\">Transparent</span>\n                        </div>\n                    </CardContent>\n                </Card>\n            </motion.div>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Chat Background</CardTitle>\n                        <CardDescription>Choose a wallpaper for your conversations.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4\">\n                        <input\n                            type=\"file\"\n                            ref={fileInputRef}\n                            onChange={handleCustomBgUpload}\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                        />\n                        <motion.div className=\"relative group\" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                            <button \n                                onClick={() => fileInputRef.current?.click()}\n                                className=\"w-full aspect-[9/16] rounded-lg border-2 border-dashed border-muted-foreground/30 flex flex-col items-center justify-center hover:border-primary hover:text-primary transition-colors\"\n                            >\n                                <Plus className=\"h-8 w-8\"/>\n                                <span className=\"mt-2 text-sm font-medium\">Custom</span>\n                            </button>\n                        </motion.div>\n\n                        {defaultChatBackgrounds.map((bg) => (\n                            <motion.div key={bg.id} className=\"relative group\" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                <Image \n                                    src={bg.url} \n                                    alt=\"Chat background option\" \n                                    width={200}\n                                    height={300}\n                                    onClick={() => setChatBackground(bg.url)}\n                                    className={cn(\n                                        \"rounded-lg object-cover aspect-[9/16] cursor-pointer transition-transform\",\n                                        chatBackground === bg.url && \"ring-2 ring-offset-2 ring-primary ring-offset-background\"\n                                    )}\n                                    data-ai-hint={bg.hint}\n                                />\n                            </motion.div>\n                        ))}\n                    </CardContent>\n                </Card>\n            </motion.div>\n\n        </motion.div>\n    );\n}\n","size_bytes":16656},"src/app/settings/backgrounds/page.tsx":{"content":"\n'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { motion } from 'framer-motion';\nimport { useAppearance } from '@/components/providers/appearance-provider';\nimport { cn } from '@/lib/utils';\nimport { Check } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nconst backgrounds = [\n    { id: 'galaxy', name: 'Galaxy', description: 'The default animated starfield.' },\n    { id: 'glow', name: 'Gradient Glow', description: 'A slow, shifting gradient.' },\n    { id: 'aura', name: 'Aura', description: 'Soft, floating orbs of light.' },\n    { id: 'grid', name: 'Grid', description: 'A subtle, futuristic grid.' },\n    { id: 'black', name: 'Solid Black', description: 'A clean, solid black.' },\n];\n\nexport default function BackgroundsPage() {\n    const { \n        appBackground, \n        setAppBackground,\n        useCustomBackground,\n        setUseCustomBackground,\n    } = useAppearance();\n    const { user } = useAuth();\n    const { toast } = useToast();\n\n    const handleBackgroundSelect = async (id: string) => {\n        setAppBackground(id);\n        if (user) {\n            try {\n                await updateDoc(doc(db, 'users', user.uid), { background: id });\n            } catch (error) {\n                toast({ title: \"Error\", description: \"Could not save background preference.\", variant: \"destructive\" });\n            }\n        }\n    }\n\n    const handleToggleCustomBackground = async (enabled: boolean) => {\n        setUseCustomBackground(enabled);\n        if (user) {\n            try {\n                await updateDoc(doc(db, 'users', user.uid), { useCustomBackground: enabled });\n            } catch (error) {\n                toast({ title: \"Error\", description: \"Could not save preference.\", variant: \"destructive\" });\n            }\n        }\n    }\n\n  return (\n    <motion.div\n      className=\"space-y-8\"\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={{\n        animate: {\n          transition: {\n            staggerChildren: 0.1,\n          },\n        },\n      }}\n    >\n      <motion.header variants={cardVariants}>\n        <h1 className=\"text-3xl font-bold font-heading\">Backgrounds</h1>\n        <p className=\"text-muted-foreground mt-1\">Customize the app's background to your liking.</p>\n      </motion.header>\n\n      <motion.div variants={cardVariants}>\n        <Card>\n            <CardHeader>\n                <CardTitle>Master Switch</CardTitle>\n                <CardDescription>Enable or disable all custom backgrounds.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                    <Label htmlFor=\"custom-bg-mode\" className=\"flex flex-col space-y-1\">\n                        <span>Use Custom Backgrounds</span>\n                        <span className=\"font-normal leading-snug text-muted-foreground\">\n                            When off, the app will use a solid black background.\n                        </span>\n                    </Label>\n                    <Switch id=\"custom-bg-mode\" checked={useCustomBackground} onCheckedChange={handleToggleCustomBackground} />\n                </div>\n            </CardContent>\n        </Card>\n      </motion.div>\n\n      {useCustomBackground && (\n        <motion.div variants={cardVariants}>\n            <Card>\n                <CardHeader>\n                    <CardTitle>Choose Your Background</CardTitle>\n                    <CardDescription>Select a background to apply across the app.</CardDescription>\n                </CardHeader>\n                <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {backgrounds.map(bg => (\n                        <div key={bg.id} className=\"relative\" onClick={() => handleBackgroundSelect(bg.id)}>\n                            <div className={cn(\n                                \"w-full aspect-video rounded-lg cursor-pointer transition-all border-2\",\n                                appBackground === bg.id ? \"border-primary ring-2 ring-primary\" : \"border-border hover:border-primary/50\"\n                            )}>\n                                <div className={`h-full w-full rounded-md bg-preview-${bg.id}`} />\n                            </div>\n                            <div className=\"mt-2\">\n                                <h3 className=\"font-semibold\">{bg.name}</h3>\n                                <p className=\"text-sm text-muted-foreground\">{bg.description}</p>\n                            </div>\n                            {appBackground === bg.id && (\n                                <div className=\"absolute top-2 right-2 bg-primary text-primary-foreground rounded-full h-6 w-6 flex items-center justify-center\">\n                                    <Check className=\"h-4 w-4\" />\n                                </div>\n                            )}\n                        </div>\n                    ))}\n                </CardContent>\n            </Card>\n        </motion.div>\n      )}\n\n      <style jsx global>{`\n        .bg-preview-galaxy { background-color: #000; background-image: radial-gradient(circle at 20% 20%, hsla(260, 45%, 15%, 0.4) 0%, transparent 50%), radial-gradient(circle at 80% 80%, hsla(220, 50%, 20%, 0.3) 0%, transparent 50%); }\n        .bg-preview-glow { background: linear-gradient(270deg, #0f0c29, #302b63, #24243e); background-size: 600% 600%; animation: gradient-pan 10s ease infinite; }\n        .bg-preview-aura { background-color: #0d0d0d; background-image: radial-gradient(circle at 15% 50%, hsla(280, 50%, 40%, 0.2) 0%, transparent 40%), radial-gradient(circle at 85% 30%, hsla(210, 60%, 50%, 0.2) 0%, transparent 40%); }\n        .bg-preview-grid { background-color: #050505; background-image: linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px), linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px); background-size: 2rem 2rem; }\n        .bg-preview-black { background-color: #000; }\n        \n        @keyframes gradient-pan {\n            0%{background-position:0% 50%}\n            50%{background-position:100% 50%}\n            100%{background-position:0% 50%}\n        }\n      `}</style>\n    </motion.div>\n  );\n}\n","size_bytes":6676},"src/app/settings/feedback/page.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Mail } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useToast } from '@/hooks/use-toast';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nexport default function FeedbackPage() {\n    const { toast } = useToast();\n    const [feedbackType, setFeedbackType] = useState('');\n    const [message, setMessage] = useState('');\n    const recipientEmail = 'aviraly26@gmail.com';\n\n    const handleCompose = (target: 'default' | 'gmail') => {\n        if (!feedbackType || !message) {\n            toast({\n                title: 'Missing Information',\n                description: 'Please select a feedback type and write a message.',\n                variant: 'destructive',\n            });\n            return;\n        }\n\n        const subject = `Vibez Feedback: ${feedbackType}`;\n        const body = encodeURIComponent(message);\n        \n        if (target === 'gmail') {\n            const gmailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${recipientEmail}&su=${encodeURIComponent(subject)}&body=${body}`;\n            window.open(gmailUrl, '_blank');\n        } else {\n            window.location.href = `mailto:${recipientEmail}?subject=${encodeURIComponent(subject)}&body=${body}`;\n        }\n    };\n\n    return (\n        <motion.div \n          className=\"space-y-8\"\n          initial=\"initial\"\n          animate=\"animate\"\n          variants={{\n            animate: {\n              transition: {\n                staggerChildren: 0.1,\n              },\n            },\n          }}\n        >\n            <motion.header variants={cardVariants}>\n                <h1 className=\"text-3xl font-bold font-heading\">Feedback</h1>\n                <p className=\"text-muted-foreground mt-1\">We'd love to hear your thoughts!</p>\n            </motion.header>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Send Your Feedback</CardTitle>\n                        <CardDescription>\n                            Your feedback helps us improve Vibez. Please fill out the form below.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"space-y-6\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"feedback-type\">What is this about?</Label>\n                                <Select onValueChange={setFeedbackType} value={feedbackType}>\n                                    <SelectTrigger id=\"feedback-type\" className=\"w-full\">\n                                        <SelectValue placeholder=\"Select feedback type\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"Bug Report\">Bug Report</SelectItem>\n                                        <SelectItem value=\"Feature Request\">Feature Request</SelectItem>\n                                        <SelectItem value=\"General Feedback\">General Feedback</SelectItem>\n                                        <SelectItem value=\"Question\">Question</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                            </div>\n\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"feedback-message\">Your Message</Label>\n                                <Textarea\n                                    id=\"feedback-message\"\n                                    placeholder=\"Tell us what you're thinking...\"\n                                    value={message}\n                                    onChange={(e) => setMessage(e.target.value)}\n                                    rows={6}\n                                />\n                            </div>\n                            \n                            <div className=\"flex flex-wrap gap-2\">\n                                <Button onClick={() => handleCompose('default')} className=\"flex-grow sm:flex-grow-0\" asChild>\n                                    <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                        <Mail className=\"mr-2 h-4 w-4\" />\n                                        Compose in Default App\n                                    </motion.button>\n                                </Button>\n                                 <Button onClick={() => handleCompose('gmail')} variant=\"secondary\" className=\"flex-grow sm:flex-grow-0\" asChild>\n                                    <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                        <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                                            <path d=\"M22 5.88V18a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6c0-.56.23-1.05.59-1.41L12 15l9.41-10.41c.36.36.59.85.59 1.41zM12 13L2.59 4.59A1.99 1.99 0 0 1 4 4h16a2 2 0 0 1 1.41.59L12 13z\"/>\n                                        </svg>\n                                        Compose in Gmail\n                                    </motion.button>\n                                </Button>\n                            </div>\n                        </div>\n                    </CardContent>\n                </Card>\n            </motion.div>\n        </motion.div>\n    );\n}\n","size_bytes":5907},"src/app/settings/notifications/page.tsx":{"content":"\n'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAppearance } from '@/components/providers/appearance-provider';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { motion } from 'framer-motion';\nimport { Check, Upload } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport React, { useRef } from 'react';\nimport { createToneAudio } from '@/lib/sound';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nexport default function NotificationsPage() {\n    const { notificationSound, setNotificationSound, areNotificationsMuted, setAreNotificationsMuted } = useAppearance();\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    const playSound = (sound: string) => {\n        if (typeof window === 'undefined') return;\n\n        if (sound === 'default') {\n            const { audio, source } = createToneAudio();\n            audio.start(0);\n            setTimeout(() => {\n                source.stop();\n            }, 200);\n        } else if (sound.startsWith('data:audio')) {\n            const audio = new Audio(sound);\n            audio.play().catch(console.error);\n        }\n    };\n    \n    const handleSelectSound = (sound: string) => {\n        setNotificationSound(sound);\n        playSound(sound);\n    }\n    \n    const handleCustomSoundUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file && file.type.startsWith('audio/')) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const dataUrl = e.target?.result as string;\n                if (dataUrl) {\n                    setNotificationSound(dataUrl);\n                    playSound(dataUrl);\n                }\n            };\n            reader.readAsDataURL(file);\n        }\n    };\n\n    const isCustomSound = notificationSound !== 'default';\n\n    return (\n        <motion.div \n            className=\"space-y-8\"\n            initial=\"initial\"\n            animate=\"animate\"\n            variants={{\n                animate: {\n                transition: {\n                    staggerChildren: 0.1,\n                },\n                },\n            }}\n        >\n             <motion.header variants={cardVariants}>\n                <h1 className=\"text-3xl font-bold font-heading\">Notifications</h1>\n                <p className=\"text-muted-foreground mt-1\">Manage how you get notified about new messages.</p>\n            </motion.header>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Sounds</CardTitle>\n                        <CardDescription>Select a sound for new message notifications.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                            <Label htmlFor=\"mute-notifications\" className=\"flex flex-col space-y-1\">\n                                <span>Mute all notifications</span>\n                                <span className=\"font-normal leading-snug text-muted-foreground\">\n                                    You will not receive any sounds or alerts for new messages.\n                                </span>\n                            </Label>\n                            <Switch id=\"mute-notifications\" checked={areNotificationsMuted} onCheckedChange={setAreNotificationsMuted} />\n                        </div>\n                        {!areNotificationsMuted && (\n                             <div className=\"pt-4\">\n                                <button \n                                    key=\"default\"\n                                    onClick={() => handleSelectSound('default')}\n                                    className=\"flex items-center justify-between w-full p-3 rounded-lg hover:bg-muted/50 text-left\"\n                                    disabled={areNotificationsMuted}\n                                >\n                                    <span>Default</span>\n                                    {notificationSound === 'default' && <Check className=\"h-5 w-5 text-primary\" />}\n                                </button>\n                                <input\n                                    type=\"file\"\n                                    ref={fileInputRef}\n                                    onChange={handleCustomSoundUpload}\n                                    accept=\"audio/*\"\n                                    className=\"hidden\"\n                                />\n                                <button\n                                    onClick={() => fileInputRef.current?.click()}\n                                    className={cn(\n                                        \"flex items-center justify-between w-full p-3 rounded-lg hover:bg-muted/50 text-left\",\n                                        isCustomSound && \"text-primary\"\n                                    )}\n                                    disabled={areNotificationsMuted}\n                                >\n                                    <div className=\"flex items-center gap-2\">\n                                        <Upload className=\"h-5 w-5\" />\n                                        <span>Upload Custom Sound</span>\n                                    </div>\n                                    {isCustomSound && <Check className=\"h-5 w-5 text-primary\" />}\n                                </button>\n                            </div>\n                        )}\n                    </CardContent>\n                </Card>\n            </motion.div>\n        </motion.div>\n    );\n}\n","size_bytes":5892},"src/app/settings/profile/page.tsx":{"content":"\n'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { UserAvatar } from '@/components/user-avatar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Camera, Loader2, Shield } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { doc, updateDoc, onSnapshot } from 'firebase/firestore';\nimport { db, auth } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { updateProfile } from 'firebase/auth';\nimport type { User as UserType } from '@/lib/types';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Separator } from '@/components/ui/separator';\nimport { motion } from 'framer-motion';\nimport { Switch } from '@/components/ui/switch';\nimport { useAppearance } from '@/components/providers/appearance-provider';\nimport { ImagePreviewDialog } from '@/components/image-preview-dialog';\nimport { Textarea } from '@/components/ui/textarea';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nasync function uploadToCloudinaryXHR(\n  file: File,\n  cloudName: string,\n  uploadPreset: string\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const url = `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`;\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', uploadPreset);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', url, true);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try { resolve(JSON.parse(xhr.responseText)); }\n          catch (e) { reject(new Error('Invalid JSON response from Cloudinary')); }\n        } else {\n          reject(new Error(`Cloudinary upload failed: ${xhr.status} ${xhr.responseText}`));\n        }\n      }\n    };\n\n    xhr.onerror = () => reject(new Error('Network error during Cloudinary upload'));\n    xhr.send(formData);\n  });\n}\n\nfunction ProfileSkeleton() {\n    return (\n        <div className=\"space-y-8 animate-fade-in p-4 sm:p-6 lg:p-8\">\n            <div>\n                <Skeleton className=\"h-9 w-40\" />\n                <Skeleton className=\"h-5 w-64 mt-2\" />\n            </div>\n            <Card>\n                <CardHeader>\n                    <Skeleton className=\"h-7 w-32\" />\n                    <Skeleton className=\"h-4 w-72 mt-2\" />\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                    <div className=\"flex flex-col sm:flex-row items-center gap-6\">\n                        <Skeleton className=\"h-24 w-24 rounded-full\" />\n                        <div className=\"flex-1 space-y-4 text-center sm:text-left w-full\">\n                            <Skeleton className=\"h-10 w-full\" />\n                            <Skeleton className=\"h-10 w-full\" />\n                        </div>\n                    </div>\n                    <Separator />\n                    <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                            <Skeleton className=\"h-5 w-12\" />\n                            <Skeleton className=\"h-10 w-full\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Skeleton className=\"h-5 w-12\" />\n                            <Skeleton className=\"h-10 w-full\" />\n                        </div>\n                    </div>\n                    <div className=\"flex justify-end\">\n                        <Skeleton className=\"h-10 w-28\" />\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default function ProfilePage() {\n  const { user: authUser, loading: authLoading } = useAuth();\n  const [user, setUser] = useState<UserType | null>(null);\n  const [loading, setLoading] = useState(true);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [name, setName] = useState('');\n  const [about, setAbout] = useState('');\n  const [avatarUrl, setAvatarUrl] = useState('');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n  const [previewFile, setPreviewFile] = useState<File | null>(null);\n  const { appBackground, useCustomBackground } = useAppearance();\n\n  const handleUpdatePhotoUrl = useCallback(async (newPhotoUrl: string) => {\n    const currentUser = auth.currentUser;\n    if (!currentUser) throw new Error(\"No authenticated user found.\");\n    \n    await updateProfile(currentUser, { photoURL: newPhotoUrl });\n    \n    const userDocRef = doc(db, 'users', currentUser.uid);\n    await updateDoc(userDocRef, { photoURL: newPhotoUrl });\n    \n    setAvatarUrl(newPhotoUrl);\n    toast({ title: 'Success', description: 'Your avatar has been updated.' });\n  }, [toast]);\n\n  const handleAvatarUpload = useCallback(async (file: File) => {\n    setIsUploading(true);\n    const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n    const uploadPreset = process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET;\n\n    if (!cloudName || !uploadPreset) {\n        toast({ title: 'Cloudinary config missing', variant: 'destructive' });\n        setIsUploading(false);\n        return;\n    }\n\n    try {\n        const result = await uploadToCloudinaryXHR(file, cloudName, uploadPreset);\n        await handleUpdatePhotoUrl(result.secure_url);\n    } catch (error) {\n        console.error(\"Error uploading avatar to Cloudinary:\", error);\n        toast({ title: 'Error', description: 'Failed to upload new avatar.', variant: 'destructive' });\n    } finally {\n        setIsUploading(false);\n        setPreviewFile(null);\n    }\n  }, [toast, handleUpdatePhotoUrl]);\n\n  useEffect(() => {\n    if (authLoading) return;\n    if (!authUser) {\n      setLoading(false);\n      return;\n    };\n\n    const userDocRef = doc(db, 'users', authUser.uid);\n    const unsubscribe = onSnapshot(userDocRef, (doc) => {\n        if (doc.exists()) {\n            const userData = { id: doc.id, ...doc.data() } as UserType;\n            setUser(userData);\n            setName(userData.name || '');\n            setAbout(userData.about || '');\n            setAvatarUrl(userData.photoURL || '');\n            setIsPrivate(userData.isPrivate || false);\n        }\n        setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [authUser, authLoading]);\n\n  // Conditional returns must come AFTER all hooks have been called.\n  if (loading || authLoading) {\n    return <ProfileSkeleton />;\n  }\n\n  if (!user) {\n    return <div className=\"text-center text-muted-foreground p-8\">User not found. Please log in again.</div>;\n  }\n\n  const handleNameInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  }\n  \n  const handleSetAvatarFromUrl = async () => {\n    if (!avatarUrl) {\n      toast({ title: 'Error', description: 'Please enter a URL.', variant: 'destructive' });\n      return;\n    }\n    \n    setIsUploading(true);\n    try {\n      await handleUpdatePhotoUrl(avatarUrl);\n    } catch (error: any) {\n      console.error(\"Error updating avatar from URL:\", error);\n      toast({ title: 'Error', description: error.message || 'Failed to update avatar.', variant: 'destructive' });\n    } finally {\n      setIsUploading(false);\n    }\n  }\n\n  const onSelectFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n        const file = e.target.files[0];\n        setPreviewFile(file);\n        if(fileInputRef.current) fileInputRef.current.value = '';\n    }\n  };\n\n  const handleSaveChanges = async () => {\n    const currentUser = auth.currentUser;\n    if (!currentUser || !user) return;\n    \n    setIsSaving(true);\n    try {\n        const dataToUpdate: any = {};\n        if(name !== user.name) {\n            await updateProfile(currentUser, { displayName: name });\n            dataToUpdate.name = name;\n        }\n\n        if(about !== (user.about || '')) {\n            dataToUpdate.about = about;\n        }\n\n        dataToUpdate.background = appBackground;\n        dataToUpdate.useCustomBackground = useCustomBackground;\n\n        if (Object.keys(dataToUpdate).length > 0) {\n            const userDocRef = doc(db, 'users', currentUser.uid);\n            await updateDoc(userDocRef, dataToUpdate);\n        }\n        \n        toast({\n            title: \"Saved!\",\n            description: \"Your profile information has been updated.\"\n        });\n\n    } catch(error) {\n        console.error(\"Error saving profile:\", error);\n        toast({\n            title: \"Error\",\n            description: \"Failed to save profile changes.\",\n            variant: \"destructive\"\n        });\n    } finally {\n        setIsSaving(false);\n    }\n  }\n\n  const handlePrivacyChange = async (isPrivate: boolean) => {\n    const currentUser = auth.currentUser;\n    if (!currentUser) return;\n    \n    setIsPrivate(isPrivate);\n\n    try {\n        const userDocRef = doc(db, 'users', currentUser.uid);\n        await updateDoc(userDocRef, { isPrivate: isPrivate });\n        toast({\n            title: \"Privacy settings updated\",\n            description: isPrivate ? \"Your account is now private.\" : \"Your account is now public.\"\n        });\n    } catch(error) {\n        setIsPrivate(!isPrivate);\n        console.error(\"Error updating privacy:\", error);\n        toast({\n            title: \"Error\",\n            description: \"Failed to update privacy settings.\",\n            variant: \"destructive\"\n        });\n    }\n  }\n\n  const isSaveDisabled = !user || (name === user.name && about === (user.about || ''));\n\n  return (\n    <motion.div \n        className=\"space-y-8 p-4 sm:p-6 lg:p-8\"\n        initial=\"initial\"\n        animate=\"animate\"\n        variants={{\n            animate: {\n            transition: {\n                staggerChildren: 0.1,\n            },\n            },\n        }}\n    >\n       <motion.header variants={cardVariants}>\n        <h1 className=\"text-3xl font-bold font-heading\">Profile</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your public profile information.</p>\n      </motion.header>\n\n      <motion.div variants={cardVariants}>\n        <Card>\n            <CardHeader>\n            <CardTitle>Your Profile</CardTitle>\n            <CardDescription>Update your photo and personal details here.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row items-center gap-6\">\n                <div className=\"relative\">\n                    <UserAvatar user={user} className=\"h-24 w-24 sm:h-28 sm:w-28 text-3xl\" />\n                    <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        onChange={onSelectFile}\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                    />\n                </div>\n                <div className=\"flex-1 space-y-3 w-full\">\n                    <Button asChild className=\"w-full\">\n                        <motion.button whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }} onClick={() => fileInputRef.current?.click()} disabled={isUploading}>\n                            {isUploading ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : <Camera className=\"h-4 w-4 mr-2\"/>}\n                            {isUploading ? 'Uploading...' : 'Upload from computer'}\n                        </motion.button>\n                    </Button>\n\n                    <div className=\"relative\">\n                        <div className=\"absolute inset-0 flex items-center\">\n                            <span className=\"w-full border-t\"></span>\n                        </div>\n                        <div className=\"relative flex justify-center text-xs uppercase\">\n                            <span className=\"bg-card px-2 text-muted-foreground\">OR</span>\n                        </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                        <Input\n                            placeholder=\"Paste image URL\"\n                            value={avatarUrl}\n                            onChange={(e) => setAvatarUrl(e.target.value)}\n                            disabled={isUploading}\n                        />\n                         <Button asChild variant=\"secondary\" onClick={handleSetAvatarFromUrl} disabled={isUploading || !avatarUrl || avatarUrl === user.photoURL}>\n                            <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                {isUploading ? <Loader2 className=\"h-4 w-4 animate-spin\"/> : 'Set'}\n                            </motion.button>\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            \n            <Separator />\n\n            <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Name</Label>\n                    <Input \n                        id=\"name\" \n                        value={name} \n                        onChange={handleNameInputChange}\n                        disabled={isSaving}\n                    />\n                </div>\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"about\">About</Label>\n                    <Textarea \n                        id=\"about\" \n                        value={about} \n                        onChange={(e) => setAbout(e.target.value)}\n                        placeholder=\"Tell everyone a little about yourself.\"\n                        disabled={isSaving}\n                        rows={3}\n                    />\n                </div>\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input id=\"email\" type=\"email\" value={user.email || ''} disabled />\n                </div>\n            </div>\n            <div className=\"flex justify-end\">\n                <Button asChild onClick={handleSaveChanges} disabled={isSaveDisabled || isUploading || isSaving}>\n                    <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                        {isSaving ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : null}\n                        {isSaving ? 'Saving...' : 'Save Changes'}\n                    </motion.button>\n                </Button>\n            </div>\n            </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div variants={cardVariants}>\n        <Card>\n            <CardHeader>\n                <CardTitle>Privacy</CardTitle>\n                <CardDescription>Control how others can find your account.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                    <Label htmlFor=\"private-account-mode\" className=\"flex flex-col space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                            <Shield className=\"h-5 w-5\" />\n                            <span>Private Account</span>\n                        </div>\n                        <span className=\"font-normal leading-snug text-muted-foreground\">\n                           When enabled, your account can only be found by your exact email address.\n                        </span>\n                    </Label>\n                    <Switch id=\"private-account-mode\" checked={isPrivate} onCheckedChange={handlePrivacyChange} />\n                </div>\n            </CardContent>\n        </Card>\n      </motion.div>\n      \n      {previewFile && (\n        <ImagePreviewDialog\n          file={previewFile}\n          onSend={(file) => handleAvatarUpload(file)}\n          onCancel={() => setPreviewFile(null)}\n          mode=\"avatar\"\n        />\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":16152},"src/app/settings/weather/page.tsx":{"content":"\n'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { motion } from 'framer-motion';\nimport { useAppearance } from '@/components/providers/appearance-provider';\nimport { Input } from '@/components/ui/input';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Button } from '@/components/ui/button';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nexport default function WeatherSettingsPage() {\n    const {\n        isWeatherVisible,\n        setIsWeatherVisible,\n        weatherLocation,\n        setWeatherLocation,\n        weatherUnit,\n        setWeatherUnit,\n    } = useAppearance();\n    \n    const [tempLocation, setTempLocation] = React.useState(weatherLocation);\n\n    const handleLocationBlur = () => {\n        if (tempLocation !== weatherLocation) {\n            setWeatherLocation(tempLocation);\n        }\n    };\n    \n    const handleLocationKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            setWeatherLocation(tempLocation);\n            e.currentTarget.blur();\n        }\n    };\n\n  return (\n    <motion.div\n      className=\"space-y-8\"\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={{\n        animate: {\n          transition: {\n            staggerChildren: 0.1,\n          },\n        },\n      }}\n    >\n      <motion.header variants={cardVariants}>\n        <h1 className=\"text-3xl font-bold font-heading\">Weather</h1>\n        <p className=\"text-muted-foreground mt-1\">Customize the weather widget shown in the sidebar.</p>\n      </motion.header>\n\n      <motion.div variants={cardVariants}>\n        <Card>\n            <CardHeader>\n                <CardTitle>Display</CardTitle>\n                <CardDescription>Control the visibility of the weather widget.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                    <Label htmlFor=\"show-weather-widget\" className=\"flex flex-col space-y-1\">\n                        <span>Show Weather Widget</span>\n                        <span className=\"font-normal leading-snug text-muted-foreground\">\n                            Display the current weather in the chat list header.\n                        </span>\n                    </Label>\n                    <Switch id=\"show-weather-widget\" checked={isWeatherVisible} onCheckedChange={setIsWeatherVisible} />\n                </div>\n            </CardContent>\n        </Card>\n      </motion.div>\n\n      {isWeatherVisible && (\n        <>\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Location</CardTitle>\n                        <CardDescription>\n                            Set the location for the weather forecast. Leave it blank to use your browser's location.\n                        </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <Input\n                            placeholder=\"e.g., London, UK\"\n                            value={tempLocation}\n                            onChange={(e) => setTempLocation(e.target.value)}\n                            onBlur={handleLocationBlur}\n                            onKeyDown={handleLocationKeyDown}\n                        />\n                         <p className=\"text-xs text-muted-foreground mt-2\">\n                           Changes are saved when you press Enter or click outside the box.\n                        </p>\n                    </CardContent>\n                </Card>\n            </motion.div>\n\n            <motion.div variants={cardVariants}>\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Units</CardTitle>\n                        <CardDescription>Choose the unit for temperature.</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <RadioGroup defaultValue={weatherUnit} onValueChange={(v) => setWeatherUnit(v as 'Celsius' | 'Fahrenheit')}>\n                            <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"Celsius\" id=\"celsius\" />\n                                <Label htmlFor=\"celsius\">Celsius (°C)</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"Fahrenheit\" id=\"fahrenheit\" />\n                                <Label htmlFor=\"fahrenheit\">Fahrenheit (°F)</Label>\n                            </div>\n                        </RadioGroup>\n                    </CardContent>\n                </Card>\n            </motion.div>\n        </>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":5093},"src/components/settings/cards/CardsGrid.tsx":{"content":"\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface CardsGridProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst CardsGrid: React.FC<CardsGridProps> = ({ children, className }) => {\n  return (\n    <div className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\", className)}>\n      {children}\n    </div>\n  );\n};\n\nexport { CardsGrid };\n","size_bytes":385},"src/components/settings/cards/SettingsCard.tsx":{"content":"\nimport React from 'react';\nimport { GlassCard } from '@/components/ui/cards/GlassCard';\nimport { cn } from '@/lib/utils';\n\ninterface SettingsCardProps {\n  title: string;\n  description?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst SettingsCard: React.FC<SettingsCardProps> = ({ title, description, children, className }) => {\n  return (\n    <GlassCard className={cn(\"p-6\", className)}>\n      <div className=\"mb-4\">\n        <h3 className=\"text-lg font-bold font-heading\">{title}</h3>\n        {description && <p className=\"text-sm text-muted-foreground mt-1\">{description}</p>}\n      </div>\n      <div className=\"space-y-4\">\n        {children}\n      </div>\n    </GlassCard>\n  );\n};\n\nexport { SettingsCard };\n","size_bytes":730},"src/components/settings/hooks/useGlassTheme.ts":{"content":"\nimport { useState, useEffect } from 'react';\nimport { useTheme } from 'next-themes';\n\nconst useGlassTheme = () => {\n  const { theme } = useTheme();\n  const [blurStrength, setBlurStrength] = useState(10);\n  const [isGlassEnabled, setIsGlassEnabled] = useState(true);\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    // This effect runs only on the client, after initial render\n    setIsMounted(true);\n    \n    const savedBlur = localStorage.getItem('glass-blur');\n    const savedGlassEnabled = localStorage.getItem('glass-enabled');\n\n    if (savedBlur) setBlurStrength(parseInt(savedBlur, 10));\n    if (savedGlassEnabled) setIsGlassEnabled(savedGlassEnabled === 'true');\n  }, []);\n\n  useEffect(() => {\n    // This effect also runs only on the client, after isMounted is true\n    if (!isMounted) return;\n\n    // Apply CSS variables to the root element\n    const root = document.documentElement;\n    root.style.setProperty('--glass-blur', `${blurStrength}px`);\n    \n    if (!isGlassEnabled) {\n      root.style.setProperty('--glass-bg', 'hsl(var(--card))');\n      document.body.classList.add('glass-lite');\n    } else {\n      document.body.classList.remove('glass-lite');\n      if (theme === 'dark' || theme === 'amoled') {\n        root.style.setProperty('--glass-bg', 'rgba(30,30,30,0.5)');\n      } else {\n        root.style.setProperty('--glass-bg', 'rgba(255,255,255,0.6)');\n      }\n    }\n\n    // Save settings to localStorage\n    localStorage.setItem('glass-blur', blurStrength.toString());\n    localStorage.setItem('glass-enabled', isGlassEnabled.toString());\n  }, [blurStrength, isGlassEnabled, theme, isMounted]);\n\n  return {\n    blurStrength,\n    setBlurStrength,\n    isGlassEnabled,\n    setIsGlassEnabled,\n    isMounted,\n  };\n};\n\nexport default useGlassTheme;\n","size_bytes":1795},"src/components/ui/cards/GlassCard.tsx":{"content":"\nimport React from 'react';\nimport { motion, MotionProps } from 'framer-motion';\nimport { cn } from '@/lib/utils';\n\ninterface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary';\n  blurStrength?: number; // 0-20\n  accent?: string; // e.g., 'hsl(var(--primary))'\n  as?: React.ElementType;\n  className?: string;\n}\n\nconst GlassCard = React.forwardRef<HTMLDivElement, GlassCardProps & MotionProps>(\n  ({ \n    children, \n    variant = 'primary', \n    blurStrength = 10, \n    accent, \n    as: Component = motion.div, \n    className, \n    ...props \n  }, ref) => {\n\n    const cardStyle: React.CSSProperties = {\n      '--glass-blur': `${blurStrength}px`,\n      '--glass-accent-glow': accent ? `0 8px 24px ${accent}` : 'none',\n    } as React.CSSProperties;\n\n    return (\n      <Component\n        ref={ref}\n        style={cardStyle}\n        className={cn(\n          'rounded-lg border',\n          'bg-[var(--glass-bg)] border-[var(--glass-border)] text-[var(--text-on-glass)]',\n          'backdrop-blur-[var(--glass-blur)]',\n          '[--glass-bg:rgba(255,255,255,0.04)] [--glass-border:rgba(255,255,255,0.06)] [--text-on-glass:rgba(255,255,255,0.92)]',\n          'dark:[--glass-bg:rgba(30,30,30,0.5)] dark:[--glass-border:rgba(255,255,255,0.1)] dark:[--text-on-glass:rgba(255,255,255,0.95)]',\n          'shadow-[var(--glass-accent-glow)]',\n          'transition-colors duration-300',\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n\nGlassCard.displayName = 'GlassCard';\n\nexport { GlassCard };\n","size_bytes":1621},"src/dataconnect-generated/react/esm/index.esm.js":{"content":"import { createUserRef, listSurveysRef, updateSurveyStatusRef, getSurveyRef, connectorConfig } from '../../esm/index.esm.js';\nimport { validateArgs, CallerSdkTypeEnum } from 'firebase/data-connect';\nimport { useDataConnectQuery, useDataConnectMutation, validateReactArgs } from '@tanstack-query-firebase/react/data-connect';\n\nexport function useCreateUser(dcOrOptions, options) {\n  const { dc: dcInstance, vars: inputOpts } = validateArgs(connectorConfig, dcOrOptions, options);\n  function refFactory() {\n    return createUserRef(dcInstance);\n  }\n  return useDataConnectMutation(refFactory, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}\n\n\nexport function useListSurveys(dcOrOptions, options) {\n  const { dc: dcInstance, options: inputOpts } = validateReactArgs(connectorConfig, dcOrOptions, options);\n  const ref = listSurveysRef(dcInstance);\n  return useDataConnectQuery(ref, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}\nexport function useUpdateSurveyStatus(dcOrOptions, options) {\n  const { dc: dcInstance, vars: inputOpts } = validateArgs(connectorConfig, dcOrOptions, options);\n  function refFactory() {\n    return updateSurveyStatusRef(dcInstance);\n  }\n  return useDataConnectMutation(refFactory, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}\n\n\nexport function useGetSurvey(dcOrOptions, options) {\n  const { dc: dcInstance, options: inputOpts } = validateReactArgs(connectorConfig, dcOrOptions, options);\n  const ref = getSurveyRef(dcInstance);\n  return useDataConnectQuery(ref, inputOpts, CallerSdkTypeEnum.GeneratedReact);\n}","size_bytes":1539},"my-app/src/app/settings/profile/page.tsx":{"content":"\n'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { UserAvatar } from '@/components/user-avatar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Camera, Loader2, Shield } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { doc, updateDoc, onSnapshot } from 'firebase/firestore';\nimport { db, auth } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { updateProfile } from 'firebase/auth';\nimport type { User as UserType } from '@/lib/types';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Separator } from '@/components/ui/separator';\nimport { motion } from 'framer-motion';\nimport { Switch } from '@/components/ui/switch';\nimport { useAppearance } from '@/components/providers/appearance-provider';\nimport { ImagePreviewDialog } from '@/components/image-preview-dialog';\nimport { Textarea } from '@/components/ui/textarea';\n\nconst cardVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n};\n\nasync function uploadToCloudinaryXHR(\n  file: File,\n  cloudName: string,\n  uploadPreset: string\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const url = `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`;\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', uploadPreset);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', url, true);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try { resolve(JSON.parse(xhr.responseText)); }\n          catch (e) { reject(new Error('Invalid JSON response from Cloudinary')); }\n        } else {\n          reject(new Error(`Cloudinary upload failed: ${xhr.status} ${xhr.responseText}`));\n        }\n      }\n    };\n\n    xhr.onerror = () => reject(new Error('Network error during Cloudinary upload'));\n    xhr.send(formData);\n  });\n}\n\nfunction ProfileSkeleton() {\n    return (\n        <div className=\"space-y-8 animate-fade-in\">\n            <div>\n                <Skeleton className=\"h-9 w-40\" />\n                <Skeleton className=\"h-5 w-64 mt-2\" />\n            </div>\n            <Card>\n                <CardHeader>\n                    <Skeleton className=\"h-7 w-32\" />\n                    <Skeleton className=\"h-4 w-72 mt-2\" />\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                    <div className=\"flex flex-col sm:flex-row items-center gap-6\">\n                        <Skeleton className=\"h-24 w-24 rounded-full\" />\n                        <div className=\"flex-1 space-y-4 text-center sm:text-left w-full\">\n                            <Skeleton className=\"h-10 w-full\" />\n                            <Skeleton className=\"h-10 w-full\" />\n                        </div>\n                    </div>\n                    <Separator />\n                    <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                            <Skeleton className=\"h-5 w-12\" />\n                            <Skeleton className=\"h-10 w-full\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Skeleton className=\"h-5 w-12\" />\n                            <Skeleton className=\"h-10 w-full\" />\n                        </div>\n                    </div>\n                    <div className=\"flex justify-end\">\n                        <Skeleton className=\"h-10 w-28\" />\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\n\nexport default function ProfilePage() {\n  const { user: authUser, loading: authLoading } = useAuth();\n  const [user, setUser] = useState<UserType | null>(null);\n  const [loading, setLoading] = useState(true);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [name, setName] = useState('');\n  const [about, setAbout] = useState('');\n  const [avatarUrl, setAvatarUrl] = useState('');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n\n  const [previewFile, setPreviewFile] = useState<File | null>(null);\n  const { appBackground, useCustomBackground } = useAppearance();\n\n  \n  useEffect(() => {\n    if (authLoading) return;\n    if (!authUser) {\n      setLoading(false);\n      return;\n    };\n\n    const userDocRef = doc(db, 'users', authUser.uid);\n    const unsubscribe = onSnapshot(userDocRef, (doc) => {\n        if (doc.exists()) {\n            const userData = { id: doc.id, ...doc.data() } as UserType;\n            setUser(userData);\n            setName(userData.name || '');\n            setAbout(userData.about || '');\n            setAvatarUrl(userData.photoURL || '');\n            setIsPrivate(userData.isPrivate || false);\n        }\n        setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [authUser, authLoading]);\n\n\n  if (loading || authLoading) {\n    return <ProfileSkeleton />;\n  }\n\n  if (!user) {\n    return <div className=\"text-center text-muted-foreground\">User not found. Please log in again.</div>;\n  }\n\n  const handleNameInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  }\n  \n const handleUpdatePhotoUrl = async (newPhotoUrl: string) => {\n    const currentUser = auth.currentUser;\n    if (!currentUser) throw new Error(\"No authenticated user found.\");\n    \n    // Update Firebase Auth profile\n    await updateProfile(currentUser, { photoURL: newPhotoUrl });\n    \n    // Update Firestore document\n    const userDocRef = doc(db, 'users', currentUser.uid);\n    await updateDoc(userDocRef, { photoURL: newPhotoUrl });\n    \n    setAvatarUrl(newPhotoUrl);\n    toast({ title: 'Success', description: 'Your avatar has been updated.' });\n  }\n\n  const handleSetAvatarFromUrl = async () => {\n    if (!avatarUrl) {\n      toast({ title: 'Error', description: 'Please enter a URL.', variant: 'destructive' });\n      return;\n    }\n    \n    setIsUploading(true);\n    try {\n      await handleUpdatePhotoUrl(avatarUrl);\n    } catch (error: any) {\n      console.error(\"Error updating avatar from URL:\", error);\n      toast({ title: 'Error', description: error.message || 'Failed to update avatar.', variant: 'destructive' });\n    } finally {\n      setIsUploading(false);\n    }\n  }\n\n  const onSelectFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n        const file = e.target.files[0];\n        setPreviewFile(file);\n        if(fileInputRef.current) fileInputRef.current.value = '';\n    }\n  };\n\n  const handleAvatarUpload = useCallback(async (file: File) => {\n    setIsUploading(true);\n    const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n    const uploadPreset = process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET;\n\n    if (!cloudName || !uploadPreset) {\n        toast({ title: 'Cloudinary config missing', variant: 'destructive' });\n        setIsUploading(false);\n        return;\n    }\n\n    try {\n        const result = await uploadToCloudinaryXHR(file, cloudName, uploadPreset);\n        await handleUpdatePhotoUrl(result.secure_url);\n    } catch (error) {\n        console.error(\"Error uploading avatar to Cloudinary:\", error);\n        toast({ title: 'Error', description: 'Failed to upload new avatar.', variant: 'destructive' });\n    } finally {\n        setIsUploading(false);\n        setPreviewFile(null);\n    }\n  }, [toast]);\n\n\n  const handleSaveChanges = async () => {\n    const currentUser = auth.currentUser;\n    if (!currentUser || !user) return;\n    \n    setIsSaving(true);\n    try {\n        const dataToUpdate: any = {};\n        if(name !== user.name) {\n            await updateProfile(currentUser, { displayName: name });\n            dataToUpdate.name = name;\n        }\n\n        if(about !== (user.about || '')) {\n            dataToUpdate.about = about;\n        }\n\n        dataToUpdate.background = appBackground;\n        dataToUpdate.useCustomBackground = useCustomBackground;\n\n        if (Object.keys(dataToUpdate).length > 0) {\n            const userDocRef = doc(db, 'users', currentUser.uid);\n            await updateDoc(userDocRef, dataToUpdate);\n        }\n        \n        toast({\n            title: \"Saved!\",\n            description: \"Your profile information has been updated.\"\n        });\n\n    } catch(error) {\n        console.error(\"Error saving profile:\", error);\n        toast({\n            title: \"Error\",\n            description: \"Failed to save profile changes.\",\n            variant: \"destructive\"\n        });\n    } finally {\n        setIsSaving(false);\n    }\n  }\n\n  const handlePrivacyChange = async (isPrivate: boolean) => {\n    const currentUser = auth.currentUser;\n    if (!currentUser) return;\n    \n    setIsPrivate(isPrivate);\n\n    try {\n        const userDocRef = doc(db, 'users', currentUser.uid);\n        await updateDoc(userDocRef, { isPrivate: isPrivate });\n        toast({\n            title: \"Privacy settings updated\",\n            description: isPrivate ? \"Your account is now private.\" : \"Your account is now public.\"\n        });\n    } catch(error) {\n        setIsPrivate(!isPrivate);\n        console.error(\"Error updating privacy:\", error);\n        toast({\n            title: \"Error\",\n            description: \"Failed to update privacy settings.\",\n            variant: \"destructive\"\n        });\n    }\n  }\n\n  const isSaveDisabled = !user || (name === user.name && about === (user.about || ''));\n  \n\n  return (\n    <motion.div \n        className=\"space-y-8\"\n        initial=\"initial\"\n        animate=\"animate\"\n        variants={{\n            animate: {\n            transition: {\n                staggerChildren: 0.1,\n            },\n            },\n        }}\n    >\n       <motion.header variants={cardVariants}>\n        <h1 className=\"text-3xl font-bold font-heading\">Profile</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your public profile information.</p>\n      </motion.header>\n\n      <motion.div variants={cardVariants}>\n        <Card>\n            <CardHeader>\n            <CardTitle>Your Profile</CardTitle>\n            <CardDescription>Update your photo and personal details here.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row items-center gap-6\">\n                <div className=\"relative\">\n                    <UserAvatar user={user} className=\"h-24 w-24 sm:h-28 sm:w-28 text-3xl\" />\n                    <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        onChange={onSelectFile}\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                    />\n                </div>\n                <div className=\"flex-1 space-y-3 w-full\">\n                    <Button asChild className=\"w-full\">\n                        <motion.button whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }} onClick={() => fileInputRef.current?.click()} disabled={isUploading}>\n                            {isUploading ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : <Camera className=\"h-4 w-4 mr-2\"/>}\n                            {isUploading ? 'Uploading...' : 'Upload from computer'}\n                        </motion.button>\n                    </Button>\n\n                    <div className=\"relative\">\n                        <div className=\"absolute inset-0 flex items-center\">\n                            <span className=\"w-full border-t\"></span>\n                        </div>\n                        <div className=\"relative flex justify-center text-xs uppercase\">\n                            <span className=\"bg-card px-2 text-muted-foreground\">OR</span>\n                        </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                        <Input\n                            placeholder=\"Paste image URL\"\n                            value={avatarUrl}\n                            onChange={(e) => setAvatarUrl(e.target.value)}\n                            disabled={isUploading}\n                        />\n                         <Button asChild variant=\"secondary\" onClick={handleSetAvatarFromUrl} disabled={isUploading || !avatarUrl || avatarUrl === user.photoURL}>\n                            <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                                {isUploading ? <Loader2 className=\"h-4 w-4 animate-spin\"/> : 'Set'}\n                            </motion.button>\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            \n            <Separator />\n\n            <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Name</Label>\n                    <Input \n                        id=\"name\" \n                        value={name} \n                        onChange={handleNameInputChange}\n                        disabled={isSaving}\n                    />\n                </div>\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"about\">About</Label>\n                    <Textarea \n                        id=\"about\" \n                        value={about} \n                        onChange={(e) => setAbout(e.target.value)}\n                        placeholder=\"Tell everyone a little about yourself.\"\n                        disabled={isSaving}\n                        rows={3}\n                    />\n                </div>\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input id=\"email\" type=\"email\" value={user.email || ''} disabled />\n                </div>\n            </div>\n            <div className=\"flex justify-end\">\n                <Button asChild onClick={handleSaveChanges} disabled={isSaveDisabled || isUploading || isSaving}>\n                    <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                        {isSaving ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : null}\n                        {isSaving ? 'Saving...' : 'Save Changes'}\n                    </motion.button>\n                </Button>\n            </div>\n            </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div variants={cardVariants}>\n        <Card>\n            <CardHeader>\n                <CardTitle>Privacy</CardTitle>\n                <CardDescription>Control how others can find your account.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n                    <Label htmlFor=\"private-account-mode\" className=\"flex flex-col space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                            <Shield className=\"h-5 w-5\" />\n                            <span>Private Account</span>\n                        </div>\n                        <span className=\"font-normal leading-snug text-muted-foreground\">\n                           When enabled, your account can only be found by your exact email address.\n                        </span>\n                    </Label>\n                    <Switch id=\"private-account-mode\" checked={isPrivate} onCheckedChange={handlePrivacyChange} />\n                </div>\n            </CardContent>\n        </Card>\n      </motion.div>\n      \n      {previewFile && (\n        <ImagePreviewDialog\n          file={previewFile}\n          onSend={(file) => handleAvatarUpload(file)}\n          onCancel={() => setPreviewFile(null)}\n          mode=\"avatar\"\n        />\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":16076},"src/utils/replitmail.ts":{"content":"import { z } from \"zod\";\n\nexport const zSmtpMessage = z.object({\n  to: z.union([z.string().email(), z.array(z.string().email())])\n    .describe(\"Recipient email address(es)\"),\n  cc: z.union([z.string().email(), z.array(z.string().email())])\n    .optional()\n    .describe(\"CC recipient email address(es)\"),\n  subject: z.string().describe(\"Email subject\"),\n  text: z.string().optional().describe(\"Plain text body\"),\n  html: z.string().optional().describe(\"HTML body\"),\n  attachments: z.array(\n    z.object({\n      filename: z.string().describe(\"File name\"),\n      content: z.string().describe(\"Base64 encoded content\"),\n      contentType: z.string().optional().describe(\"MIME type\"),\n      encoding: z.enum([\"base64\", \"7bit\", \"quoted-printable\", \"binary\"])\n        .default(\"base64\"),\n    })\n  )\n  .optional()\n  .describe(\"Email attachments\"),\n});\n\nexport type SmtpMessage = z.infer<typeof zSmtpMessage>;\n\nfunction getAuthToken(): string {\n  const xReplitToken = process.env.REPL_IDENTITY\n    ? \"repl \" + process.env.REPL_IDENTITY\n    : process.env.WEB_REPL_RENEWAL\n      ? \"depl \" + process.env.WEB_REPL_RENEWAL\n      : null;\n\n  if (!xReplitToken) {\n    throw new Error(\n      \"No authentication token found. Please set REPL_IDENTITY or ensure you're running in Replit environment.\"\n    );\n  }\n\n  return xReplitToken;\n}\n\nexport async function sendEmail(message: SmtpMessage): Promise<{\n  accepted: string[];\n  rejected: string[];\n  pending?: string[];\n  messageId: string;\n  response: string;\n}> {\n  const authToken = getAuthToken();\n\n  const response = await fetch(\n    \"https://connectors.replit.com/api/v2/mailer/send\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X_REPLIT_TOKEN\": authToken,\n      },\n      body: JSON.stringify({\n        to: message.to,\n        cc: message.cc,\n        subject: message.subject,\n        text: message.text,\n        html: message.html,\n        attachments: message.attachments,\n      }),\n    }\n  );\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to send email\");\n  }\n\n  return await response.json();\n}\n\n// Send verification email using secure server-side API\nexport async function sendVerificationEmail(email: string): Promise<boolean> {\n  try {\n    const response = await fetch('/api/verify-email?action=send', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    const result = await response.json();\n    return result.success;\n  } catch (error) {\n    console.error('Error sending verification email:', error);\n    return false;\n  }\n}\n\n// Verify email code using secure server-side API\nexport async function verifyEmailCode(email: string, code: string): Promise<boolean> {\n  try {\n    const response = await fetch('/api/verify-email?action=verify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, code }),\n    });\n\n    const result = await response.json();\n    return result.success;\n  } catch (error) {\n    console.error('Error verifying email code:', error);\n    return false;\n  }\n}\n\n// Generate random verification code (for display purposes only)\nexport function generateVerificationCode(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}","size_bytes":3397},"src/app/(auth)/verify-email/page.tsx":{"content":"'use client';\n\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport React, { useState, useEffect } from 'react';\nimport { sendEmailVerification, User } from 'firebase/auth';\nimport { doc, updateDoc } from 'firebase/firestore';\n\nimport { auth, db } from '@/lib/firebase';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { Toaster } from '@/components/ui/toaster';\nimport { sendEmail } from '@/utils/replitmail';\n\nconst formSchema = z.object({\n  code: z.string().min(6, { message: 'Verification code must be 6 digits.' }).max(6),\n});\n\n// Generate a 6-digit verification code\nconst generateVerificationCode = () => {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n};\n\nexport default function VerifyEmailPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [resendLoading, setResendLoading] = useState(false);\n  const [verificationCode, setVerificationCode] = useState<string>('');\n  const [userEmail, setUserEmail] = useState<string>('');\n\n  useEffect(() => {\n    // Get email and verification code from URL params (passed from signup)\n    const email = searchParams.get('email');\n    const code = searchParams.get('code');\n    \n    if (!email || !code) {\n      toast({\n        title: 'Error',\n        description: 'Missing verification information. Please sign up again.',\n        variant: 'destructive',\n      });\n      router.push('/signup');\n      return;\n    }\n    \n    setUserEmail(email);\n    setVerificationCode(code);\n  }, [searchParams, router, toast]);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      code: '',\n    },\n  });\n\n  const sendVerificationEmail = async (email: string, code: string) => {\n    try {\n      await sendEmail({\n        to: email,\n        subject: 'Vibez - Email Verification Code',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <h1 style=\"color: #6366f1; margin: 0;\">Vibez</h1>\n            </div>\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; text-align: center;\">\n              <h2 style=\"margin: 0 0 20px 0;\">Verify Your Email</h2>\n              <p style=\"margin: 0 0 30px 0; font-size: 16px;\">Welcome to Vibez! Please use the verification code below to complete your registration:</p>\n              <div style=\"background: rgba(255,255,255,0.2); padding: 20px; border-radius: 8px; font-size: 32px; font-weight: bold; letter-spacing: 8px; margin: 20px 0;\">\n                ${code}\n              </div>\n              <p style=\"margin: 20px 0 0 0; font-size: 14px; opacity: 0.9;\">This code will expire in 10 minutes. If you didn't request this, please ignore this email.</p>\n            </div>\n          </div>\n        `,\n        text: `Welcome to Vibez! Your verification code is: ${code}\\n\\nThis code will expire in 10 minutes. If you didn't request this, please ignore this email.`,\n      });\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      throw error;\n    }\n  };\n\n  const resendCode = async () => {\n    setResendLoading(true);\n    try {\n      const newCode = generateVerificationCode();\n      await sendVerificationEmail(userEmail, newCode);\n      setVerificationCode(newCode);\n      \n      // Update URL with new code\n      const newUrl = new URL(window.location.href);\n      newUrl.searchParams.set('code', newCode);\n      window.history.replaceState({}, '', newUrl.toString());\n      \n      toast({\n        title: 'Code Sent',\n        description: 'A new verification code has been sent to your email.',\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to send verification code. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setResendLoading(false);\n    }\n  };\n\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\n    setLoading(true);\n    try {\n      if (values.code === verificationCode) {\n        // Verification successful - mark user as verified and redirect\n        const user = auth.currentUser;\n        if (user) {\n          // Update user document to mark as verified\n          const userDocRef = doc(db, 'users', user.uid);\n          await updateDoc(userDocRef, {\n            emailVerified: true,\n            verifiedAt: new Date(),\n          });\n        }\n        \n        toast({\n          title: 'Email Verified!',\n          description: 'Your email has been successfully verified. Welcome to Vibez!',\n        });\n        \n        // Redirect to main app\n        router.push('/');\n      } else {\n        toast({\n          title: 'Invalid Code',\n          description: 'The verification code is incorrect. Please try again.',\n          variant: 'destructive',\n        });\n      }\n    } catch (error) {\n      toast({\n        title: 'Verification Failed',\n        description: 'Something went wrong. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Toaster />\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Verify Your Email</CardTitle>\n              <CardDescription>\n                We've sent a 6-digit verification code to <strong>{userEmail}</strong>\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"code\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Verification Code</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter 6-digit code\"\n                        maxLength={6}\n                        className=\"text-center text-2xl font-mono tracking-widest\"\n                        {...field}\n                        onChange={(e) => {\n                          // Only allow numbers and limit to 6 digits\n                          const value = e.target.value.replace(/\\D/g, '').slice(0, 6);\n                          field.onChange(value);\n                        }}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n            <CardFooter className=\"flex flex-col space-y-4\">\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loading || form.watch('code').length !== 6}\n              >\n                {loading ? 'Verifying...' : 'Verify Email'}\n              </Button>\n              \n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Didn't receive the code?\n                </p>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={resendCode}\n                  disabled={resendLoading}\n                >\n                  {resendLoading ? 'Sending...' : 'Resend Code'}\n                </Button>\n              </div>\n\n              <div className=\"text-center\">\n                <Link\n                  href=\"/login\"\n                  className=\"text-sm text-muted-foreground hover:text-primary underline\"\n                >\n                  Back to Login\n                </Link>\n              </div>\n            </CardFooter>\n          </Card>\n        </form>\n      </Form>\n    </>\n  );\n}","size_bytes":8439},"src/lib/firebase-admin.ts":{"content":"\nimport { getApps, initializeApp, cert, ServiceAccount } from 'firebase-admin/app';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getAuth } from 'firebase-admin/auth';\n\nlet firebaseAdmin: any;\n\n// Initialize Firebase Admin with service account or fallback\nfunction initializeFirebaseAdmin() {\n  if (getApps().length === 0) {\n    try {\n      // Try to use service account if available\n      const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;\n      \n      if (serviceAccount) {\n        const serviceAccountKey = JSON.parse(serviceAccount) as ServiceAccount;\n        firebaseAdmin = initializeApp({\n          credential: cert(serviceAccountKey),\n          projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n        });\n      } else {\n        // Fallback: Use project ID only (limited functionality but won't crash)\n        firebaseAdmin = initializeApp({\n          projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n        });\n      }\n    } catch (error) {\n      console.error('Failed to initialize Firebase Admin:', error);\n      // Create a minimal app for development\n      firebaseAdmin = initializeApp({\n        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || 'vibez-dev',\n      });\n    }\n  }\n  return firebaseAdmin;\n}\n\nexport function getAdminFirestore() {\n  try {\n    const app = initializeFirebaseAdmin();\n    return getFirestore(app);\n  } catch (error) {\n    console.error('Error getting Firestore admin:', error);\n    throw new Error('Firebase Admin not properly configured');\n  }\n}\n\nexport function getAdminAuth() {\n  try {\n    const app = initializeFirebaseAdmin();\n    return getAuth(app);\n  } catch (error) {\n    console.error('Error getting Auth admin:', error);\n    throw new Error('Firebase Admin not properly configured');\n  }\n}\n","size_bytes":1799},"src/utils/device-auth.ts":{"content":"import { User } from 'firebase/auth';\n\nexport interface DeviceRegistrationResult {\n  success: boolean;\n  deviceId?: string;\n  error?: string;\n}\n\n/**\n * Register device securely using Firebase ID token\n * This replaces localStorage-based device tracking\n */\nexport async function registerDeviceSecurely(user: User): Promise<DeviceRegistrationResult> {\n  try {\n    // Get fresh ID token\n    const idToken = await user.getIdToken();\n    \n    const response = await fetch('/api/device', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        authToken: idToken,\n        deviceType: 'web',\n      }),\n    });\n\n    const result = await response.json();\n    \n    if (result.success) {\n      return {\n        success: true,\n        deviceId: result.deviceId,\n      };\n    } else {\n      return {\n        success: false,\n        error: result.error || 'Device registration failed',\n      };\n    }\n  } catch (error) {\n    console.error('Device registration error:', error);\n    return {\n      success: false,\n      error: 'Network error during device registration',\n    };\n  }\n}\n\n/**\n * Get device ID from secure HttpOnly cookie (server-side only)\n * This function is for documentation - actual reading happens server-side\n */\nexport function getDeviceIdNote(): string {\n  return 'Device ID is stored securely in HttpOnly cookie and managed server-side only';\n}","size_bytes":1426},"src/app/api/device/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { headers } from 'next/headers';\nimport crypto from 'crypto';\nimport { getAdminAuth } from '@/lib/firebase-admin';\n\nconst zRegisterDeviceRequest = z.object({\n  authToken: z.string(), // Firebase ID token\n  deviceType: z.enum(['web', 'mobile', 'desktop']).default('web'),\n});\n\n// Generate a secure device ID\nfunction generateSecureDeviceId(): string {\n  return crypto.randomBytes(16).toString('hex');\n}\n\n// Rate limiting for device registration\nconst deviceRateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nfunction isDeviceRegistrationRateLimited(identifier: string): boolean {\n  const now = Date.now();\n  const windowMs = 5 * 60 * 1000; // 5 minutes\n  const maxRequests = 3; // Max 3 device registrations per 5 minutes\n\n  const record = deviceRateLimitStore.get(identifier);\n  if (!record || now > record.resetTime) {\n    deviceRateLimitStore.set(identifier, { count: 1, resetTime: now + windowMs });\n    return false;\n  }\n\n  if (record.count >= maxRequests) {\n    return true;\n  }\n\n  record.count++;\n  return false;\n}\n\n// Get device info from request headers\nfunction getDeviceInfo(request: NextRequest) {\n  const userAgent = request.headers.get('user-agent') || 'unknown';\n  const clientIP = request.headers.get('x-forwarded-for') || \n                   request.headers.get('x-real-ip') || \n                   'unknown';\n  \n  // Basic device type detection\n  let deviceType: 'web' | 'mobile' | 'desktop' = 'web';\n  if (/Mobile|Android|iPhone|iPad/.test(userAgent)) {\n    deviceType = 'mobile';\n  } else if (/Electron/.test(userAgent)) {\n    deviceType = 'desktop';\n  }\n\n  return {\n    userAgent,\n    clientIP,\n    deviceType,\n  };\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    const parseResult = zRegisterDeviceRequest.safeParse(body);\n    if (!parseResult.success) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid request data' },\n        { status: 400 }\n      );\n    }\n\n    const { authToken } = parseResult.data;\n    const deviceInfo = getDeviceInfo(request);\n\n    // SECURE TOKEN VERIFICATION using Firebase Admin SDK\n    let userId: string;\n    let userEmail: string | undefined;\n    \n    try {\n      // Check if Firebase Admin SDK is properly configured\n      const hasServiceAccountKey = !!process.env.FIREBASE_SERVICE_ACCOUNT_KEY;\n      \n      if (hasServiceAccountKey) {\n        // PRODUCTION: Use proper Firebase Admin SDK token verification\n        console.log('Using Firebase Admin SDK for secure token verification');\n        const adminAuth = getAdminAuth();\n        const decodedToken = await adminAuth.verifyIdToken(authToken);\n        userId = decodedToken.uid;\n        userEmail = decodedToken.email;\n        \n        if (!userId) {\n          throw new Error('No user ID in verified token');\n        }\n      } else {\n        // DEVELOPMENT FALLBACK: Log security warning and use basic validation\n        console.error('🚨 CRITICAL SECURITY WARNING: FIREBASE_SERVICE_ACCOUNT_KEY not configured!');\n        console.error('🚨 Using insecure token parsing for development only.');\n        console.error('🚨 This MUST be fixed before production deployment!');\n        \n        // Basic token structure validation for development\n        if (!authToken || typeof authToken !== 'string' || authToken.split('.').length !== 3) {\n          throw new Error('Invalid token format');\n        }\n        \n        // Parse token payload (INSECURE - development only)\n        const payload = JSON.parse(Buffer.from(authToken.split('.')[1], 'base64').toString());\n        userId = payload.user_id || payload.sub || payload.uid;\n        userEmail = payload.email;\n        \n        if (!userId) {\n          throw new Error('No user ID in token payload');\n        }\n        \n        // Additional development-only validation\n        const now = Math.floor(Date.now() / 1000);\n        if (payload.exp && payload.exp < now) {\n          throw new Error('Token has expired');\n        }\n        \n        // Log warning for each request in development\n        console.warn(`⚠️  DEV MODE: Processing device registration for user ${userId} with INSECURE token verification`);\n      }\n    } catch (error: any) {\n      console.error('Token verification error:', error);\n      \n      // Provide specific error messages for different failure types\n      let errorMessage = 'Invalid authentication token';\n      let statusCode = 401;\n      \n      if (error.code === 'auth/id-token-expired') {\n        errorMessage = 'Authentication token has expired';\n      } else if (error.code === 'auth/id-token-revoked') {\n        errorMessage = 'Authentication token has been revoked';\n      } else if (error.code === 'auth/invalid-id-token') {\n        errorMessage = 'Invalid authentication token format';\n      } else if (error.message?.includes('expired')) {\n        errorMessage = 'Authentication token has expired';\n      } else if (error.message?.includes('FIREBASE_SERVICE_ACCOUNT_KEY')) {\n        errorMessage = 'Server configuration error';\n        statusCode = 500;\n        console.error('Firebase Admin SDK not properly configured for production');\n      }\n      \n      return NextResponse.json(\n        { success: false, error: errorMessage },\n        { status: statusCode }\n      );\n    }\n\n    // Rate limiting per user and IP\n    const userKey = `user:${userId}`;\n    const ipKey = `ip:${deviceInfo.clientIP}`;\n    \n    if (isDeviceRegistrationRateLimited(userKey) || isDeviceRegistrationRateLimited(ipKey)) {\n      return NextResponse.json(\n        { success: false, error: 'Rate limit exceeded' },\n        { status: 429 }\n      );\n    }\n\n    // Check for existing device ID from secure cookie\n    const existingDeviceId = request.cookies.get('deviceId')?.value;\n    const deviceId = existingDeviceId || generateSecureDeviceId();\n    const isNewDevice = !existingDeviceId;\n    \n    // Log device registration (include email if available)\n    console.log('Device registration request for user:', userId, userEmail ? `(${userEmail})` : '');\n    console.log('Device info:', deviceInfo);\n    console.log(isNewDevice ? 'Registering new device:' : 'Updating existing device:', deviceId);\n    \n    // Security audit log for production\n    if (process.env.NODE_ENV === 'production') {\n      console.log(`SECURITY_AUDIT: Device registration - User: ${userId}, IP: ${deviceInfo.clientIP}, UserAgent: ${deviceInfo.userAgent}`);\n    }\n\n    // Create secure device cookie and return success\n    const response = NextResponse.json({\n      success: true,\n      deviceId: deviceId,\n      message: isNewDevice ? 'Device registered successfully' : 'Device updated successfully',\n    });\n\n    // Set secure cookie with device ID\n    response.cookies.set('deviceId', deviceId, {\n      httpOnly: true,\n      secure: true,\n      sameSite: 'strict',\n      maxAge: 365 * 24 * 60 * 60, // 1 year\n      path: '/',\n    });\n\n    return response;\n  } catch (error) {\n    console.error('Device registration error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Device registration failed' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":7228},"src/app/api/send-email/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { headers } from 'next/headers';\nimport crypto from 'crypto';\n\nconst zSmtpMessage = z.object({\n  to: z.union([z.string().email(), z.array(z.string().email())]),\n  cc: z.union([z.string().email(), z.array(z.string().email())]).optional(),\n  subject: z.string(),\n  text: z.string().optional(),\n  html: z.string().optional(),\n  attachments: z.array(\n    z.object({\n      filename: z.string(),\n      content: z.string(),\n      contentType: z.string().optional(),\n      encoding: z.enum([\"base64\", \"7bit\", \"quoted-printable\", \"binary\"]).default(\"base64\"),\n    })\n  ).optional(),\n  // Add HMAC for authentication\n  hmac: z.string(),\n  timestamp: z.number(),\n});\n\ntype SmtpMessage = z.infer<typeof zSmtpMessage>;\n\n// Server-side rate limiting store (in production, use Redis)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nfunction getAuthToken(): string {\n  return process.env.REPL_IDENTITY || process.env.REPL_RENEWAL || '';\n}\n\nfunction getServerSecret(): string {\n  const secret = process.env.EMAIL_HMAC_SECRET;\n  if (!secret) {\n    throw new Error('EMAIL_HMAC_SECRET environment variable is required');\n  }\n  return secret;\n}\n\nfunction verifyHMAC(message: Omit<SmtpMessage, 'hmac'>, receivedHmac: string): boolean {\n  try {\n    const secret = getServerSecret();\n    const payload = JSON.stringify(message);\n    const expectedHmac = crypto.createHmac('sha256', secret).update(payload).digest('hex');\n    \n    // Guard against length mismatches before timingSafeEqual\n    if (expectedHmac.length !== receivedHmac.length) {\n      return false;\n    }\n    \n    return crypto.timingSafeEqual(Buffer.from(expectedHmac, 'hex'), Buffer.from(receivedHmac, 'hex'));\n  } catch (error) {\n    // Return false for any HMAC verification errors (malformed hex, etc.)\n    return false;\n  }\n}\n\nfunction isRateLimited(clientIP: string): boolean {\n  const now = Date.now();\n  const windowMs = 60 * 1000; // 1 minute\n  const maxRequests = 5; // Max 5 emails per minute per IP\n\n  const record = rateLimitStore.get(clientIP);\n  if (!record || now > record.resetTime) {\n    rateLimitStore.set(clientIP, { count: 1, resetTime: now + windowMs });\n    return false;\n  }\n\n  if (record.count >= maxRequests) {\n    return true;\n  }\n\n  record.count++;\n  return false;\n}\n\nasync function sendEmailServer(message: Omit<SmtpMessage, 'hmac' | 'timestamp'>): Promise<boolean> {\n  try {\n    const token = getAuthToken();\n    if (!token) {\n      console.error('No authentication token available for email service');\n      return false;\n    }\n\n    const response = await fetch('https://smtp.replit.com/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n      body: JSON.stringify(message),\n    });\n\n    if (!response.ok) {\n      console.error('Failed to send email:', response.statusText);\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return false;\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get client IP for rate limiting\n    const headersList = await headers();\n    const clientIP = headersList.get('x-forwarded-for') || \n                     headersList.get('x-real-ip') || \n                     'unknown';\n\n    // Check rate limiting\n    if (isRateLimited(clientIP)) {\n      return NextResponse.json(\n        { success: false, error: 'Rate limit exceeded' },\n        { status: 429 }\n      );\n    }\n\n    const body = await request.json();\n    \n    // Validate the request body\n    const parseResult = zSmtpMessage.safeParse(body);\n    if (!parseResult.success) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid email data' },\n        { status: 400 }\n      );\n    }\n\n    const { hmac, timestamp, ...emailData } = parseResult.data;\n\n    // Check timestamp (prevent replay attacks)\n    const now = Date.now();\n    if (Math.abs(now - timestamp) > 5 * 60 * 1000) { // 5 minutes tolerance\n      return NextResponse.json(\n        { success: false, error: 'Request timestamp expired' },\n        { status: 401 }\n      );\n    }\n\n    // Verify HMAC\n    if (!verifyHMAC({ ...emailData, timestamp }, hmac)) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid authentication' },\n        { status: 401 }\n      );\n    }\n    \n    // Send the email\n    const success = await sendEmailServer(emailData);\n    \n    return NextResponse.json({ success });\n  } catch (error) {\n    console.error('Email API error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Export helper function for server-side email sending\nexport function createEmailHMAC(message: Omit<SmtpMessage, 'hmac'>): string {\n  const secret = getServerSecret();\n  const payload = JSON.stringify(message);\n  return crypto.createHmac('sha256', secret).update(payload).digest('hex');\n}","size_bytes":5039},"src/app/api/verify-email/route.ts":{"content":"\nimport { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { headers } from 'next/headers';\nimport crypto from 'crypto';\n\nconst zSendVerificationRequest = z.object({\n  email: z.string().email(),\n});\n\nconst zVerifyCodeRequest = z.object({\n  email: z.string().email(),\n  code: z.string().length(6),\n});\n\n// In-memory storage for development (use Redis in production)\nconst verificationStore = new Map<string, { \n  code: string; \n  expiresAt: number; \n  attempts: number; \n}>();\n\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nfunction generateVerificationCode(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\nfunction isRateLimited(identifier: string): boolean {\n  const now = Date.now();\n  const windowMs = 60 * 1000; // 1 minute\n  const maxRequests = 3; // Max 3 attempts per minute\n\n  const record = rateLimitStore.get(identifier);\n  if (!record || now > record.resetTime) {\n    rateLimitStore.set(identifier, { count: 1, resetTime: now + windowMs });\n    return false;\n  }\n\n  if (record.count >= maxRequests) {\n    return true;\n  }\n\n  record.count++;\n  return false;\n}\n\n// Use proper Replit Mail service\nasync function sendEmailDirectly(to: string, subject: string, html: string, text: string): Promise<{ success: boolean; message?: string }> {\n  try {\n    // Try to use the sendEmail function from replitmail.ts\n    const { sendEmail } = await import('@/utils/replitmail');\n    \n    try {\n      const result = await sendEmail({\n        to: to,\n        subject: subject,\n        text: text,\n        html: html,\n      });\n      \n      console.log('Email sent successfully to:', to, 'Message ID:', result.messageId);\n      return { success: true };\n    } catch (error) {\n      console.error('Replit Mail service error:', error);\n      \n      // In development, log the verification code for testing\n      if (process.env.NODE_ENV === 'development') {\n        console.log('\\n=== EMAIL VERIFICATION CODE (For Development Testing) ===');\n        console.log('To:', to);\n        console.log('Subject:', subject);\n        console.log('Content:', text);\n        console.log('========================================================\\n');\n        return { success: true, message: 'Development mode - code logged to console' };\n      }\n      \n      return { success: false, message: 'Email service unavailable' };\n    }\n  } catch (importError) {\n    console.error('Error importing sendEmail:', importError);\n    \n    // Fallback for development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('\\n=== EMAIL VERIFICATION CODE (Fallback) ===');\n      console.log('To:', to);\n      console.log('Subject:', subject);\n      console.log('Content:', text);\n      console.log('==========================================\\n');\n      return { success: true, message: 'Development mode - code logged to console' };\n    }\n    \n    return { success: false, message: 'Email service error' };\n  }\n}\n\nasync function sendVerificationCode(email: string, clientIP: string): Promise<{ success: boolean; message?: string }> {\n  try {\n    // Rate limiting per email and IP\n    const emailKey = `email:${email}`;\n    const ipKey = `ip:${clientIP}`;\n    \n    if (isRateLimited(emailKey) || isRateLimited(ipKey)) {\n      return { success: false, message: 'Rate limit exceeded' };\n    }\n\n    const code = generateVerificationCode();\n    const expiresAt = Date.now() + 10 * 60 * 1000; // 10 minutes\n\n    // Store verification code in memory\n    verificationStore.set(email, {\n      code,\n      expiresAt,\n      attempts: 0,\n    });\n\n    // Send email directly\n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #6366f1; margin: 0;\">Vibez</h1>\n        </div>\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; text-align: center;\">\n          <h2 style=\"margin: 0 0 20px 0;\">Verify Your Email</h2>\n          <p style=\"margin: 0 0 30px 0; font-size: 16px;\">Welcome to Vibez! Please use the verification code below to complete your registration:</p>\n          <div style=\"background: rgba(255,255,255,0.2); padding: 20px; border-radius: 8px; font-size: 32px; font-weight: bold; letter-spacing: 8px; margin: 20px 0;\">\n            ${code}\n          </div>\n          <p style=\"margin: 20px 0 0 0; font-size: 14px; opacity: 0.9;\">This code will expire in 10 minutes. If you didn't request this, please ignore this email.</p>\n        </div>\n      </div>\n    `;\n\n    const text = `Welcome to Vibez! Your verification code is: ${code}. This code will expire in 10 minutes.`;\n\n    const emailResult = await sendEmailDirectly(email, 'Vibez - Email Verification Code', html, text);\n    return emailResult;\n  } catch (error) {\n    console.error('Error sending verification code:', error);\n    return { success: false, message: 'Failed to send verification code' };\n  }\n}\n\nasync function sendPasswordResetEmail(email: string): Promise<{ success: boolean; message?: string }> {\n  try {\n    const resetCode = generateVerificationCode();\n    const expiresAt = Date.now() + 30 * 60 * 1000; // 30 minutes for password reset\n    \n    // Store reset code\n    verificationStore.set(`reset:${email}`, {\n      code: resetCode,\n      expiresAt,\n      attempts: 0,\n    });\n\n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #6366f1; margin: 0;\">Vibez</h1>\n        </div>\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; text-align: center;\">\n          <h2 style=\"margin: 0 0 20px 0;\">Reset Your Password</h2>\n          <p style=\"margin: 0 0 30px 0; font-size: 16px;\">You requested a password reset. Use the code below to reset your password:</p>\n          <div style=\"background: rgba(255,255,255,0.2); padding: 20px; border-radius: 8px; font-size: 32px; font-weight: bold; letter-spacing: 8px; margin: 20px 0;\">\n            ${resetCode}\n          </div>\n          <p style=\"margin: 20px 0 0 0; font-size: 14px; opacity: 0.9;\">This code will expire in 30 minutes. If you didn't request this, please ignore this email.</p>\n        </div>\n      </div>\n    `;\n\n    const text = `Password reset code for Vibez: ${resetCode}. This code will expire in 30 minutes.`;\n\n    const emailResult = await sendEmailDirectly(email, 'Vibez - Password Reset Code', html, text);\n    return emailResult;\n  } catch (error) {\n    console.error('Error sending password reset email:', error);\n    return { success: false, message: 'Failed to send password reset email' };\n  }\n}\n\nasync function verifyCode(email: string, code: string): Promise<boolean> {\n  try {\n    const record = verificationStore.get(email);\n    \n    if (!record) {\n      return false;\n    }\n\n    const { code: storedCode, expiresAt, attempts } = record;\n\n    // Check if expired\n    if (Date.now() > expiresAt) {\n      verificationStore.delete(email);\n      return false;\n    }\n\n    // Check attempts (rate limiting)\n    if (attempts >= 5) {\n      verificationStore.delete(email);\n      return false;\n    }\n\n    // Verify the code\n    if (code === storedCode) {\n      // Code is correct, delete the verification record\n      verificationStore.delete(email);\n      return true;\n    } else {\n      // Increment attempts\n      record.attempts += 1;\n      verificationStore.set(email, record);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error verifying code:', error);\n    return false;\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const headersList = await headers();\n    const clientIP = headersList.get('x-forwarded-for') || \n                     headersList.get('x-real-ip') || \n                     'unknown';\n\n    const url = new URL(request.url);\n    const action = url.searchParams.get('action');\n\n    if (action === 'send') {\n      const body = await request.json();\n      const parseResult = zSendVerificationRequest.safeParse(body);\n      \n      if (!parseResult.success) {\n        return NextResponse.json(\n          { success: false, error: 'Invalid email address' },\n          { status: 400 }\n        );\n      }\n\n      const result = await sendVerificationCode(parseResult.data.email, clientIP);\n      \n      if (!result.success) {\n        return NextResponse.json(\n          { success: false, error: result.message || 'Failed to send email. Please try again.' },\n          { status: 500 }\n        );\n      }\n      \n      return NextResponse.json({ success: true, message: result.message });\n    }\n\n    if (action === 'verify') {\n      const body = await request.json();\n      const parseResult = zVerifyCodeRequest.safeParse(body);\n      \n      if (!parseResult.success) {\n        return NextResponse.json(\n          { success: false, error: 'Invalid verification data' },\n          { status: 400 }\n        );\n      }\n\n      const { email, code } = parseResult.data;\n      const isValid = await verifyCode(email, code);\n      \n      return NextResponse.json({ success: isValid });\n    }\n\n    if (action === 'reset-password') {\n      const body = await request.json();\n      const parseResult = zSendVerificationRequest.safeParse(body);\n      \n      if (!parseResult.success) {\n        return NextResponse.json(\n          { success: false, error: 'Invalid email address' },\n          { status: 400 }\n        );\n      }\n\n      const result = await sendPasswordResetEmail(parseResult.data.email);\n      \n      return NextResponse.json({ \n        success: result.success, \n        message: result.message,\n        error: result.success ? undefined : result.message \n      });\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Invalid action' },\n      { status: 400 }\n    );\n  } catch (error) {\n    console.error('Verification API error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":10226},"src/app/(auth)/reset-password/page.tsx":{"content":"'use client';\n\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport React, { useState, useEffect, Suspense } from 'react';\nimport { confirmPasswordReset, verifyPasswordResetCode } from 'firebase/auth';\n\nimport { auth } from '@/lib/firebase';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { Toaster } from '@/components/ui/toaster';\nimport { cn } from '@/lib/utils';\n\nconst formSchema = z.object({\n  password: z\n    .string()\n    .min(6, { message: 'Password must be at least 6 characters.' }),\n  confirmPassword: z\n    .string()\n    .min(6, { message: 'Password must be at least 6 characters.' }),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nfunction ResetPasswordForm() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [email, setEmail] = useState<string>('');\n  const [codeVerified, setCodeVerified] = useState(false);\n  const [oobCode, setOobCode] = useState<string>('');\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      password: '',\n      confirmPassword: '',\n    },\n  });\n\n  useEffect(() => {\n    const code = searchParams.get('oobCode');\n    const mode = searchParams.get('mode');\n    \n    if (code && mode === 'resetPassword') {\n      setOobCode(code);\n      verifyCode(code);\n    } else {\n      toast({\n        title: 'Invalid reset link',\n        description: 'This password reset link is invalid or has expired.',\n        variant: 'destructive',\n      });\n    }\n  }, [searchParams]);\n\n  const verifyCode = async (code: string) => {\n    try {\n      const userEmail = await verifyPasswordResetCode(auth, code);\n      setEmail(userEmail);\n      setCodeVerified(true);\n      toast({\n        title: 'Reset link verified',\n        description: 'Please enter your new password below.',\n      });\n    } catch (error: any) {\n      console.error('Error verifying reset code:', error);\n      let errorMessage = 'Invalid or expired reset link.';\n      \n      if (error.code === 'auth/expired-action-code') {\n        errorMessage = 'This reset link has expired. Please request a new one.';\n      } else if (error.code === 'auth/invalid-action-code') {\n        errorMessage = 'This reset link is invalid or has already been used.';\n      }\n      \n      toast({\n        title: 'Verification failed',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\n    if (!codeVerified || !oobCode) {\n      toast({\n        title: 'Error',\n        description: 'Invalid reset link. Please request a new password reset.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await confirmPasswordReset(auth, oobCode, values.password);\n      \n      toast({\n        title: 'Password reset successful',\n        description: 'Your password has been updated. You can now log in with your new password.',\n      });\n      \n      // Redirect to login page after a brief delay\n      setTimeout(() => {\n        router.push('/login?message=Password reset successful. Please log in with your new password.');\n      }, 2000);\n    } catch (error: any) {\n      console.error('Error resetting password:', error);\n      let errorMessage = 'Failed to reset password. Please try again.';\n      \n      if (error.code === 'auth/weak-password') {\n        errorMessage = 'Password is too weak. Please choose a stronger password.';\n      } else if (error.code === 'auth/expired-action-code') {\n        errorMessage = 'Reset link has expired. Please request a new one.';\n      }\n      \n      toast({\n        title: 'Reset failed',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!codeVerified) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-full max-w-md mx-auto bg-white/10 backdrop-blur-lg border-white/20\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-white text-center\">\n              Verifying Reset Link\n            </CardTitle>\n            <CardDescription className=\"text-gray-300 text-center\">\n              Please wait while we verify your password reset link...\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex justify-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen\">\n      <Card className=\"w-full max-w-md mx-auto bg-white/10 backdrop-blur-lg border-white/20\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-white text-center\">\n            Reset Password\n          </CardTitle>\n          <CardDescription className=\"text-gray-300 text-center\">\n            Enter your new password for <strong>{email}</strong>\n          </CardDescription>\n        </CardHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">New Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                        className=\"bg-white/20 border-white/30 text-white placeholder:text-gray-300\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Confirm new password\"\n                        className=\"bg-white/20 border-white/30 text-white placeholder:text-gray-300\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n            <CardFooter className=\"flex flex-col space-y-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={loading}\n              >\n                {loading ? 'Resetting Password...' : 'Reset Password'}\n              </Button>\n              <div className=\"text-center text-sm text-gray-300\">\n                Remember your password?{' '}\n                <Link href=\"/login\" className=\"text-blue-400 hover:text-blue-300 underline\">\n                  Back to Login\n                </Link>\n              </div>\n            </CardFooter>\n          </form>\n        </Form>\n      </Card>\n      <Toaster />\n    </div>\n  );\n}\n\nexport default function ResetPasswordPage() {\n  return (\n    <Suspense fallback={\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white\"></div>\n      </div>\n    }>\n      <ResetPasswordForm />\n    </Suspense>\n  );\n}","size_bytes":8423}},"version":1}